Timestamp: 2024-12-26T20:23:21.294508
Title: 一旦我找到Pydantic，我就停止使用其他所有东西 BV1gtqBYfErv
URL: https://b23.tv/HHp2bSD
Status: success

Description:
**核心思想概述:**

1.  **Pedantic 简介:** Pedantic 是一个 Python 库，用于数据验证和设置管理，旨在确保数据干净、正确且符合预期，避免编写大量冗余代码。核心在于使用数据模型类定义数据结构，自动处理错误和异常。
2.  **Pedantic 的优势:**  Pedantic 自动进行幕后数据验证，简化开发流程，无需手动编写大量验证代码。它与流行的框架（如 Fast API）兼容，易于集成。
3.  **实际应用案例:** 通过一家初创公司的 API 集成案例，展示了 Pedantic 如何解决数据不一致问题，提高应用程序的稳定性。案例中手动校验数据，不如直接使用Pedantic的数据模型。
4.  **代码演示:**
    *   展示了如何使用 `BaseModel` 定义数据模型，自动创建构造函数和打印属性的方法。
    *   演示了如何添加数据验证规则，例如字符串长度、数值范围和电子邮件格式验证。
    *   介绍了如何使用 `EmailStr` 进行电子邮件格式验证。
    *   详细讲解了如何创建自定义验证器以满足更复杂的数据验证需求，例如用户名唯一性和格式限制。
5.  **总结:**  Pedantic 提供了一个简单且强大的方法来进行数据验证，可以快速集成到项目中，并有效防止数据问题导致的应用程序崩溃。

**结论：** Pedantic 是一个强大的 Python 库，通过自动化的数据验证和模型创建，能够大幅简化开发流程，并有效提升应用程序的健壮性。


Content:
这是那些你不知道自己需要,但最终每天都会用到的东西之一。这是Pedantic。但可能不是您习惯的Pedantic,因为他进行了相当大的更新。Pedantic将防止你的Python项目变成数据噩梦。如果您是教练,而求援是Python对象,我喜欢将Pedantic视为一本剧本。他确保每个玩家都在做其需要做的事情。在此视频中,我们将介绍有关Pedantic的三件事。首先,我们将介绍什么事Pedantic以及为什么应该在你的项目中使用它。其次,我们将介绍Pedantic如何拯救一家出厂公司。最后,我们将通过编码势力结束本视频,以便您可以在项目中实现Pedantic。如果您是此频道的新人,我是Eric Roby,一位拥有十多年经验的软件工程师,我已经帮助数千名开发人员在七领域内学习和成长。让我们先来了解一下Pedantic是什么。Pedantic是Python的数据验证和设置管理库。其核心在于确保您的数据干净,正确且符合您的预期,而无需编写大量样的代码。Pedantic通过允许您将Python类定以为这些Pedantic数据模型来实现这一点。因此,如果你创建一个包含不正确数据的Python对象,Pedantic将处理错误和异常而不会导致系统崩溃。在处理REST4 API端点的许多应用程序中,当用户发送错误数据时,系统崩溃是很常见的。如果你没有编写大码,来正确处理坏数据,那么您的应用程序就会失败。现在,Pedantic如此受欢迎的原因在于一切都在幕后进行,你实际上不需要做任何事情。您可能听说过,这也被称为引擎盖下或自动或神奇。事情就应该如此,其中任何一个都意味著您无比处理任何代码。而且,Pedantic是自动出现的,因此另一个也是自动出现的,带有像Sas API和C-Core model这样的流行框架。当亚利克斯的创业公司并零崩溃时,它正是这么做的。亚利克斯是一名工程师在一家发展非常迅速的出创公司工作。Alex的任务是将他们的API集成到客户的应用程序中。谁没有做过验证?您或许知道这是怎么回事?客户的日期是自负串。名字全部采用大写字母。电子邮件没有列出服务提供商,也许最糟糕的是,他们没有列出对象唯一标实服。全世界每个人和世界上每个应用程序都称之为ID。他们称之为唯一标实服的UI。好吧,Alex首先尝试使用保护子剧和异常处理进行手动检查来修复所有这些数据,这种方法一开始确实起了作用。API点存在很多问题需要集成。因此,它没有自己处理所有这些异常,而是让Pedantic模型为它完成所有工作。亚利克斯的快速周转给手机之行关留下了深刻的印象,因为他们的申请很快就得到了验证。如果你想成为Alex并学习如何实现Pedantic,让我们深入研究代码,以便您还可以学习如何在您的应用程序中使用Pedantic。这里我们有一个拍上对象的势力,它仅打应用户。因此,我们有一个用户,它有性名、年龄、身高,所有这些都包装在一都构思。我们有这种神奇的方法,当我们想要打应用户时,它只会打应属性。我们可以看到,如果我们运行该应用程序,我们将获得用户属性张斗30和52。现在,Pedantic真正拖影而出,因为它有点像一个数据类,其中自动内置了很多魔法。所以我们要做的第一件事,就是倒入Pedantic及其秘密武器,也就是基础模型。为了能够使用Pedantic,我们当然需要安装它。我忘了它,因此我们继续说Pip install Piedantic。现在,安装Pedantic后,我们将看到这条黄线会消失,并且我们可以使用这个基础模型。现在,我们可以做的事,我们可以定义用户的属性,而不是创建这个构造韩数。所以,我要删除所有这些并说出自服串类型的名称,Int类型的年龄和Int类型的身高。好的,现在,如果我们继续保存,并通过输入Python 3 mainpy,重新运行该应用程序。我们可以立即看到它说用户,这是用户不但任何残数。这是因为现在我们只有一个普通的Python类。为了能够使用Pedantic及其附带的所有特殊功能,我们必须使用这个基础模型。所以,我只需抓住基础模型,我们就可以将其传递进去,以便用户实现基础模型。现在,如果我们继续重新运行该应用程序,我们可以看到它显示性名等于张斗,年龄等于30,身高等于52。现在你可能会想,这与我们在这个魔法方法中所用到的不同。这是因为Pedantic覆盖了这一点并以自己的方式答应属性。所以,现在我们可以继续阐除它,并且我们可以看到,如果我们重新运行该应用程序,我们会得到完全相同的东西。因此,Pedantic已经自动允许我们,采用这个基本模型,该模型会自动创建构造韩数,并为我们提供一种答应用户的方法。而不仅仅是相对相等于谋谋那样,它会谈论内存位置,它会快速答应整个用户。如果你喜欢这个视频,请订阅以及收集将发布的视频的通知,并查看下面链接的我最长销的快速API课程,现在让我们继续倒入自断。这使得我们现在可以对每个属性进行数据验证。因此,我们可以首先说这个自服穿类型的名称等于最小长度为三的自断。对于我们的年龄,我们可以说同样的话,但是必须大于18岁。然后,我们可以说高度大于48或小于70。我们要去的地方就像做过山车或类似的东西,我们必须有一个名字,并且没有一个名字少于3个字母。您的年龄必须大于18岁,并且升高必须在4英尺到7英尺之间,我甚至不知道那是多少大概是7英尺左右。不,70处理12,12,24,36,48,60,一直处理就是5英尺时。好的,那么你的升高肯定在4英尺到5英尺时应存之间。所以,现在如果我们继续运行该应用程序,我们可以看到它将起作用。长度长度超过三个字服,并且年龄大于18岁。但是,如果你将其中任何一个更改为与这些字段不同的信息,并且我们继续长适运行它。我们可以看到应用程序抛出一个异常,并且它是从Pedantic验证错误中发生的,其中一个是用户的验证错误。所以,我们在这里可以看到,我们允许用户创建一个用户,但是我们有验证,所以如果我们想把它改成只有两个字母,这将抛出一个错误。因为说说,应该至少有三个字服,然后如果我们对高度做同样的事情,我们说它将是45小于48,我们运行它。我们会看到输入的高度需要大于48。所以,我们已经正确地实施了验证,这就是Pedantic能够如此快速的实施验证。我们只需添加我们的基本模型,它为我们的对象创造很多神奇的功能,然后我们可以继续添加字段。这是我们可以拥有最小长度,大于,大于,小于,所有这些奇特的东西,这真的非常有用。现在让我们继续添加另外两个字段,让我们继续添加电子邮件和用户名。因此,电子邮件将是一种自服串类型。我们的用户名也将是自服串类型,但是对于我们的用户名,我们继续说Equals自断的最小长度为五。好的,这一切看起来真的非常好。现在,我们可能唯一想做的事情,就是在电子邮件上添加某种验证。通常,当您对电子邮件进行验证时,您会需要一个服务提供商,可能是Gmail或腰护或其他什么。您需要一个点抗,因此是 Service Provider点抗。然后,您会想要一个ad4号。因此,它可能像Test to Serial to Mail点抗。我们可以为此创建一个自定验证器,但实际上有一个更简单的方法可以做到这一点。我们可以安装一个叫做电子邮件验证器的东西,它随Pedantic一起提供,但它是一个单独的小型库。您需要随它一起安装,所以,让我们继续说Pip Install Email Validator。现在,一旦您安装完毕,我们就可以到这里并导入成为电子邮件自服范的东西。现在我们可以说,电子邮件属于电子邮件自服范类型。这就是您对电子邮件所要做的全部事情。现在,我们已经使用Pedantic,验证了电子邮件。它将检查你在处理Pedantic或电子邮件时需要的所有用力。所以,现在在这里,我们可以说斗号。我们现在需要说一封电子邮件,用于测试目的。我只会说测试,然后用户名可以是1.22。太棒了,太棒了。这实际上是倒退了,墨尾有3个耳。好的,现在让我们继续重新运行我们的应用程序。我们可以立即看到我们收到一个错误,因为电子邮件必须有一个ad符号,后跟服务提供商。因此,我们可以继续在 e-mail.com上进行测试。如果我们这样做,一切看起来都会很棒。但是,我们的用户名至少需要五位长度。那么,如果还有其他用力怎么办?如果我们有一个用户名列表怎么办?并且,我们要确保此列表中没有重复项。为了能够正确做到这一点,我们需要继续创建自定义验证器。因为没有简单的方法,可以使用自断来确保我们只使用自母和数字。并且,我们需要确保,它不再该用户的列表中。我们需要进行一系列不同的测试,才能做到这一点。但在 pdantic 中,我们可以自动添加它。并使其成为一个自断验证器,因此在这个对象内部,它不会是这个对象内部的一个心寒数。我们需要使用一个成为自断验证器的东西。但在我们这样做之前,我们需要导入它。这样,我们就可以在这里说自断验证器,现在让我们继续说自断验证器。我们要说的是,这个验证器是用于我们的用户名属性。现在在这里,我们要说,杂责的 user,我们在这里传递我们的类。所以,我们只能说 CLS和一个值。我们的价值就是我们的用户名。这里我们将进行一些模式匹配。所以我们可以说,我们想要导入 re,然后如果不是 rematch,我们必须传入以下训练。用户名必须是自母。必须是自母数字。然后,我们就可以传递值了。如果这是一个值,那我们要引发一个指错。错误指索带的位置是用户名必须紧包含自母数字字幅和下滑线。然后,我们要检查并确保该用户名上未备使用。所以,我们可以说,如果用户名中有值,则引发指错误。用户名必须是唯一的。如果一切通过,我们就可以说用户名是点付价。然后,我们要返回待之来将其设置为属性。所以,现在如果我们继续尝试运行我们的应用程序,我们将会因为我们的自定应用户,明然收到用户名错误。我们有这个 eyeball art art作为用户名列表,然后我们将它传递到这里。因此,它符合这里的条件及用户名必须是唯一的。因此,我们现在能做的就是在用户名中添加新内容。现在,如果我们继续运行我们的应用程序,我们会发现它再次失败。这是因为我添加了一个感叹号,但它只允许自母数字和下滑线。因此,我们可以做的是在用户名墨尾添加一些新数字。如果我们现在运行它,一切都会正常,因为我们刚刚成功的使用传递的用户名添加了新对象。现在,如果我们再这样做,它将会好的,就这样。这就是将 Pientic和数据验证添加等您的项目中的简单方法。我们将在下期再见。
