Timestamp: 2024-12-29T00:55:06.047951
Title: Build an AI-Powered Technical Analysis Stock Dashboard in Python with Streamlit and Ollama
URL: https://youtu.be/N3ttsxgcP9I?si=9GSfuHcqn0D_tHMJ
Status: success

Description:
* **Core Ideas:**
    *   This project demonstrates a basic, customizable, AI-powered stock technical analysis dashboard built with Python.
    *   The dashboard uses an AI Vision model to analyze stock charts and provide buy/hold/sell recommendations.
    *   It's designed to be a starting point, easily extendable for custom trading strategies, or further analysis.

*   **Conclusion:** This project offers a foundational framework for incorporating AI-powered chart analysis into a stock trading workflow which can be customized for many specific trading strategies.

*   **Fundamental Point:** AI tools, when combined with Python libraries, can enable accessible and customizable stock market analysis workflows using vision models for chart interpretation.


Content:
this financial dashboard uses an AI Vision model to automate technical stock analysis it runs on a laptop and requires only about 100 lines of python code the process involves selecting a stock and time range picking technical indicators and letting the AI provide detailed chart analysis but this skeletal dashboard is just a starting point you can easily customize it to Target specific trading strategies or apply specialized technical analysis Frameworks for interpreting chart data you could also integrate it into an automated workflow looping over a set of stocks to perform higher level analysis and uncover broader Market insights this Project's Tech stack integrates AI tools like o llama and meta's open source llama 3.2 Vision model alongside streamlit an interactive machine learning web app framework it also utilizes python libraries such as y Finance for stock data retrieval pandas for data manipulation and plotly for interactive data visualization before we start it's important to note that this tutorial is for educational purposes only and is not intended as Financial or investing advice Additionally you should approach the conclusions of AI llm models with caution they are experimental technology prone to inaccuracies and may generate incorrect or misleading information you should also have a solid understanding of technical analysis including its strengths and limitations to effectively interpret the insights provided by this dashboard start by going to the oama website downloading the installer and setting up oama on your desktop once installed open up your terminal or command prompt and type AMA run llama 3.2 dvision this will install the Llama 3.2 Vision model onto your local machine make sure to keep this terminal or command prompt window open next go to a new terminal or command prompt window activate a python Environ M and install the libraries shown here using Pip with our environment Now set up let's shift to a code editor and go over the underlying python code that will create the AI technical analysis app we'll start by importing the previously installed libraries along with temp file base 64 and Os which are built-in python libraries used for handling temporary files encoding data and managing file operations now we'll set up the streamlet app by setting the page P config to wide giving the app a title and giving the sidebar a header title as well the next step is to create inputs in the sidebar for users to specify the stock ticker select a date range and fetch the corresponding stock data using St sidebar text input we allow users to input the stock ticker with a default value set to AAPL similarly using St sidebar date input users can select the start and end dates for the analys analysis finally a button labeled fetch data triggers the retrieval of stock data using the Y Finance Library we set up the fetch data button in a way that when it is clicked the app triggers the YF download function which fetches historical stock data for the specified ticker and date range the fetch data is stored as stock data in St session State ensuring it remains accessible and persists across user interactions even when the app is Rerun after the data is successfully retrieved a confirmation message is displayed using an st success Banner to inform the user that the stock data has been loaded and is ready for further analysis to begin visualizing the stock data we first check if stock data exists ensuring that the data has been successfully pulled and stored if the data is available we assign it to a local variable called data for easier manipulation using plotly we then create a Candlestick chart with the figure and Candlestick functions plotting the stocks open high low and close prices over the selected date range to enhance Clarity we label the chart as candle stick in the legend we can now enhance the visualization by allowing users to Overlay technical indicators in the sidebar we create a section titled technical indicators using St sidebar subheader a multi- select widget enables users to choose from a list of indicators including the 20-day simple moving average 20-day exponential moving average 20-day Ballinger bands and vwap we make the 20-day SMA be the default selection to dynamically add the chosen indicators to the Chart we Define a helper function called add indicator this function computes the selected indicator based on the stock data for SMA and EMA it calculates the respective moving averages for Ballinger bands it computes the upper and lower bands around the SMA using the standard deviation for vwap it calculates the volume weighted average price based on cumulative values each computed indicator is then added to the Chart as a line using G scatter finally we iterate over the user selected indicators and pass them to the ad indicator function ensuring they will be displayed on the Candlestick chart to finalize the chart we update its layout using fig update layout disabling the xais range slider for a cleaner and more focused visualization the updated chart now including any selected technical indicators is displayed in the app using St plotly chart ensuring it is interactive and Visually engaging for the user next we initiate the AI powered technical analysis using the Llama 3.2 Vision Model A subheader titled AI powered analysis introduces this section and a button labeled run AI analysis triggers the process when clicked a spinner informs the user that the chart is being analyzed the app saves the chart as a temporary image file encodes it in base 64 format and includes it in a message payload sent to the Llama 3.2 Vision model via the AMA API the AI model is prompted to analyze the Candlestick chart and selected technical indicators then provide a detailed buy hold or sell recommendation along with its reasoning you can alter this prompt based on the type of result you want the llm to Output once the analysis is complete the ai's response is displayed in the app under the AI analysis results section finally the temporary file is deleted to maintain efficient resource usage at this point you can now save this file open a terminal or command prompt and type streamlit run AI technicalanalysis dopy with the path to the file before the file name this will automatically open your web browser to a local host address and display the technical analysis app the full code is in the video description below you can customize and expand it to suit your own trading strategies or experiment with additional AI models for more advanced Market insights for example you could integrate additional technical indicators such as RSI or macd refine the AI models prompts to deliver more specific recommendations or automate the workflow to analyze multiple stocks in a single batch this app's modular design makes it easy to incorporate Advanced features such as portfolio level analytics custom trading signals or more sophisticated charting options tailored to your strategies with just a few targeted modifications you can extend its functionality and transform this project into a comprehensive and robust tool for in-depth stock analysis and decision making if you enjoyed this tutorial make sure to like comment and subscribe to the Deep charts channel for more videos on how to leverage Ai and machine learning for Quant Finance
