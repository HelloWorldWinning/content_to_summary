Timestamp: 2024-12-21T22:38:27.793793
Title: 15 Years of Software Engineer Knowledge in 1 hour 30 mins
URL: https://youtube.com/watch?v=PJPFLHw8lKI&si=aXUowdQSJQifhtoR
Status: success

Description:
Okay, here's a comprehensive summary of the provided text, focusing on key points and maintaining the original context:

The speaker, a tech industry veteran, shares his 15 years of experience on how to supercharge a software engineering career. He emphasizes that success in tech is not overnight, requiring patience and consistent effort. The video is divided into five key categories: foundational skills, networking, job acquisition, job success, and self-advocacy.

**Foundational Skills:**

*   **Writing Code:** Learning to code effectively requires writing *a lot* of code. Tutorials are helpful initially but become detrimental as reliance increases, hindering creativity. Focus on building original projects and experimenting, learning through mistakes rather than blindly following guides. The speaker emphasizes that it's okay to make mistakes and that those mistakes are critical to deep learning.
*   **Writing Clean Code:** Quality code comes from writing bad code first. Painful experiences, like code reviews and bugs, are essential for learning maintainable coding practices. Actively engaging with code review feedback is a key learning accelerator. Don't be afraid of receiving negative feedback and try to learn from the mistakes of others in code review.
*   **Debugging:** Debugging is crucial and often harder than writing code. It involves understanding the end-to-end flow of a software system. Mastering debugging can lead to significant career rewards. Develop a methodical approach to debugging by understanding the system's instructions to the computer, isolating where the mismatch occurs, and leveraging debugging tools. The best debugger is often the most valued engineer.

**Academic Journey:**

*   School provides limited practical coding skills. Its main values are networking, access to faculty connections, and life skills. Grades are less important than building side projects and networking with smart peers. Focus on building a network and learning from peers and faculty rather than focusing on grade.

**Networking:**

*   Networking is vital for career advancement. The key rule is to give more than you take, leading with kindness. Helping others can create opportunities later. Don't see networking as politics but as a way of forming real connections.
*   Imposter syndrome is common. Reframe it as an opportunity to learn from others. Develop individual relationships and seek constructive feedback. Ask for feedback and take advantage of the different people who are willing to share that feedback with you.

**Job Acquisition:**

*   Finding a job is not always fair. Target roles where you have an "unfair advantage." Referrals and having someone advocate for you is probably the best way to get a job.
*   Interviews are random. Approach them with a positive, adaptable mindset. Prepare thoroughly but don't hinge your life on any single interview. Study hard but care a little. Be confident and be yourself.
*   Job searching has two phases: getting interviews and passing interviews. Focus on networking and finding advantages to get interviews first before preparing for them.

*   **Resumes:** Resumes should be concise, focusing on professional accomplishments and showing results with numbers. Use a standardized, one-page format. Show don't tell by talking about what have you achieved, what metrics you have moved, and the technology used.
*   **Data Structures and Algorithms (DSA):** DSA preparation, while not directly applicable in daily work, is crucial for interviews. Focus on understanding core patterns rather than memorizing solutions. LeetCode is a valuable preparation tool. Embrace discomfort when problem solving by giving yourself the time to struggle with a problem before looking at the answer.
*   **Behavioral Interviews:** Behavioral interviews are more critical than DSA, especially for senior roles. Frame stories around your passion for the craft of engineering, the company, and your team collaboration abilities. Use the STAR method (Situation, Task, Action, Result) to structure your answers.
*   **System Design:** System design interviews assess your ability to think through high-level architecture and trade-offs. Don't focus on specific technologies, but on your reasoning and assumptions. Learn from experienced engineers.

**Succeeding on the Job:**

*   **Feedback:** Be a "feedback vacuum," actively seeking and acting on all feedback. View it as a gift, not criticism. Ask follow-up questions and be open even if the feedback is not entirely correct. Take the feedback and act on it in a meaningful way to showcase that you are able to take feedback.
*   **Manager Relationship:** Build a peer-to-peer relationship with your manager. Communicate proactively, provide feedback, and maintain a one-on-one document to track topics and progress.
*   **Promotion:** Promotions are about behavior, not just output. Focus on having a multiplicative impact and frame your career growth as a benefit to the team and company. Be proactive in the promotion process and engage with your manager.
*   **Negotiation:** Negotiation is key to improving your financial situation. Don't share numbers first, make it multi-dimensional, and negotiate in writing. If you have the position that you want, you can close the deal by saying you will sign it if you get the offer that you want.

**Work-Life Balance:**

*   Work-life balance depends on you and your team. Use a "hard stop" like a sport to force time off work. Prioritize tasks effectively. Be deliberate about the parts of life you want to protect from work.

**Concluding Remarks:**

*   The video serves as a starting point. The speaker's startup, Taro, offers in-depth courses on these topics.

**Simplified Chinese Summary (简体中文):**

这段视频中，一位资深科技行业人士分享了他15年的职业生涯经验，教你如何提升软件工程师的职业发展。他强调，科技行业的成功并非一蹴而就，需要耐心和持续的努力。视频分为五个关键部分：基础技能、人际关系、求职、职场成功和自我主张。

**基础技能：**

*   **编写代码：** 要有效地学习编程，需要编写*大量*的代码。教程起初很有帮助，但过度依赖会适得其反，阻碍创造力。要专注于构建原创项目和实验，在错误中学习，而不是盲目地遵循指南。犯错是可以的，而且这些错误对于深度学习至关重要。
*   **编写整洁的代码：** 高质量的代码源于先编写糟糕的代码。代码审查和错误等痛苦的经历对于学习可维护的编码实践至关重要。积极参与代码审查反馈是加速学习的关键。不要害怕接受负面反馈，并尝试从其他人在代码审查中的错误中学习。
*   **调试：** 调试至关重要，而且通常比编写代码更难。它涉及到理解软件系统的端到端流程。掌握调试技能可以带来显著的职业回报。通过了解计算机的指令、找出不匹配的地方以及利用调试工具，开发有条理的调试方法。最佳的调试人员通常是最有价值的工程师。

**学术经历：**

*   学校提供的实际编程技能有限。它的主要价值在于人脉、与教师建立联系的机会和生活技能。比起重视分数，更应该专注于构建课外项目以及与聪明的同学建立人脉。比起专注于分数，更应该专注于建立人脉和从同学及教师身上学习。

**人际关系：**

*   人脉对于职业发展至关重要。关键原则是付出多于索取，以友善的态度待人。帮助他人可以为将来创造机会。不要把人际关系看作是政治，而是看作是建立真正联系的方式。
*   冒名顶替综合症很常见。将其视为向他人学习的机会。建立个人关系并寻求建设性的反馈。利用愿意分享反馈的不同人士。

**求职：**

*   找工作并不总是公平的。要锁定那些你具有“不公平优势”的职位。推荐和有人支持你可能是找到工作的最佳途径。
*   面试是随机的。以积极、适应的心态对待面试。做好充分准备，但不要把生命押在任何一次面试上。努力学习，但不要过分在意结果，保持自信和做真实的自己。
*   求职分为两个阶段：获得面试机会和通过面试。在准备面试之前，首先要专注于建立人脉并寻找优势来获得面试机会。

*   **简历：** 简历应该简洁，重点突出专业成就，并用数字展示结果。使用标准化的单页格式。展示而非描述，通过谈论你取得的成就、你推动的指标以及使用的技术。
*   **数据结构和算法（DSA）：** 虽然DSA的准备工作在日常工作中没有直接应用，但对于面试至关重要。专注于理解核心模式，而不是死记硬背答案。LeetCode 是一个有价值的准备工具。当解决问题时要勇于接受不舒适感，先让自己挣扎一段时间，然后再看答案。
*   **行为面试：** 行为面试比DSA更重要，特别是对于高级职位。围绕你对工程工艺、公司和你团队协作能力的激情来构建故事。使用STAR方法（情境、任务、行动、结果）来组织你的回答。
*   **系统设计：** 系统设计面试评估你思考高层架构和权衡取舍的能力。不要专注于特定技术，而是要关注你的推理和假设。向有经验的工程师学习。

**职场成功：**

*   **反馈：** 成为一个“反馈吸收器”，积极寻求并根据所有反馈采取行动。将其视为一份礼物，而不是批评。提出后续问题，即使反馈不完全正确也要保持开放态度。接受反馈并采取有意义的行动，表明你有能力接受反馈。
*   **与经理的关系：** 与你的经理建立对等关系。积极沟通，提供反馈，并维护一个一对一文件来跟踪主题和进展。
*   **晋升：** 晋升是关于行为，而不仅仅是产出。专注于产生倍增效应，并将你的职业发展视为对团队和公司的贡献。在晋升过程中要积极主动，并与你的经理沟通。
*   **谈判：** 谈判是改善财务状况的关键。不要先分享数字，使其多维度，并以书面形式进行谈判。如果你有想要的职位，你可以通过说如果得到想要的offer，你愿意签约来达成交易。

**工作与生活平衡：**

*   工作与生活的平衡取决于你和你的团队。使用“硬性停止”，如运动来强迫自己停止工作。有效地安排任务的优先级。明确你想保护的生活部分不受工作的影响。

**总结：**

*   这段视频是一个起点。演讲者的创业公司Taro提供了有关这些主题的深入课程。


Content:
for 15 years now I thought about one topic more than anything else how can I supercharge my career this question has been a constant throughout my entire journey in the tech industry starting from 2009 when I was a Stanford computer science student and then after graduation joining a startup which got acquired by Pinterest failing literally hundreds of interviews throughout my journey including failing my first few internships and not getting a return offer joining Pinterest for a few years before joined meta where I finally felt like I attained some level of success I made $800,000 as a staff engineer and manager and then finally leaving Big Tech 2 years ago to start my own company throughout that whole journey I've always thought about how could I have done better how could I make sure the people around me who I care about could also thrive in their career in this video I want to package up 15 years of my experience and share it with you of what I wish I knew as a is coming up before we go too much deeper I want to share a warning with you software engineering is a huge field tons of nuances and a ton of depth and that's actually a really cool and fun part of working in the industry but that also means that there is no such thing as being an overnight success in our industry if you're not able to sit down and watch more than 5 minutes of this video you're going to have a really hard time in the tech industry you need to have patience and even after watching this video you're not going to magically become uh an amazing software engineer this is a starting point to lay the foundation for a really amazing career I have wasted so many hours and thousands of dollars on dead ends and suboptimal ways of learning how to become a really good engineer I'm going to save you from that grief through this video I've broken down this video into five different categories for each part of your career so first of all how do you attain the fundamental skills the ability of writing and debugging code that's going to serve you throughout your career second is networking your ability to connect and help and get help from the people around you is going to dictate how far you go third is getting a job how do you interview effectively how do you get the interview we'll talk about the different types of assessment that you're going to come across fourth is you've gotten the job how do you now succeed on the J job how do you improve once you've gotten the job things like working with your manager onboarding asking for a promotion then finally I want to spend some time talking about how do you fight for yourself how do you do skillful self- advocacy where you can actually think about what do I want to do next in my career how do I figure out the right company how do I ask for what I want that's a scale that I think a lot of Engineers are lacking in if you absorb and apply all the lessons in this video you're going to be far far ahead of of me at any point in my career and you're also going to be far ahead of almost everyone else coming up in the tech industry I hope it's helpful let's start off by talking about the foundation for any software engineer which is the ability to write code how do you learn to write effective code how you how do you write good code and the answer is very simple you learn to write code by writing a lot of it but the Nuance here is how you write the code and this is where a lot of people most people will screw up you've heard this expression called tutorial hell and it's hell because you're spending a lot of time and energy in tutorials and actually you don't get the outcome that you're looking for which is properly learning how to code so I'm going to plot out for you the relationship between writing code and tutorials and how they interplate with each other so on the y- axis we have time and then on the Y AIS we have the value of a tutorial so when you're starting off you know nothing about coding tutorials are actually incredibly helpful they give you a stepbystep guide on what you should do how you should do it and that handholding those training wheels are incredibly valuable so you start off with a ton of value but as you become more experienced they start to lose their value because you're not really learning much if you just copy paste whatever the instructor is doing and so it goes down value and what is ironic or what is really interesting is that as you become more senior the tutorials actually end up hurting you they poison your ability to be creative and take the training wheels off because now you've become so reliant on the tutorial and so it falls into negative and that is what I would describe as tutorial heal where you're so dependent on the tutorial that you lose the ability to write original software on your own and therefore you are no longer an effective engineer I would not want to hire someone who needs that level of handholding one of the beautiful things and also one of the challenging things about coding about the tech industry is that code is infinitely malleable so if I give you a problem I can promise you there are going to be thousands of ways infinite number of ways to tackle that problem and the issue with the tutorial is that it is showing you one way one reasonably good way of that problem but it's likely not going to be the way that you would have come up with your own solution and the learning happens in that exploration where you try out different solutions you figure out the pros and cons and you might come up with an equally good solution which just happened to be deviate from the tutorial and you rob yourself of that opportunity if you're so blindly focused on following the tutorial and this is also the reason why I'm not a big fan of books or certificates the same problem applies here where because you're so focused on reading a book or a passing a certificate you're not really giving your brain the opportunity to be creative and explore which is where the true learning how to code happens and so if you you know earlier in my career when I was learning Java for example I would go to the library and literally p a pull out a book about Java and spend half an hour every night reading a chapter and what a complete waste of time reading how to program is not the same as program pring and you're not going to really achieve much or learn much if you are reading and you don't have your hands on the keyboard one of the things that I feel like people get hung up on when I give them the advice is that they somehow have this mental block of messing up because they've gone through the school system where they're rewarded for having the correct answer and they're punished for having the wrong answer and again this is why I love software and this is why I love the tech industry there's very little or no cost to failure if you're following a tutorial or if you're trying to build your own project which is what I recommend you can screw up you can see the compilation error you can see why there was a crash and then you can go back and fix it and you can do that all within a few seconds and so if you work hard and you're okay to tolerate discomfort you're okay to tolerate not knowing what's happening and just fool around you can get really really far within a day within a week within a few months and that will allow you to learn the code at a much much deeper level compared to anyone else who is using the guard rails or the training wheels that come from a tutorial or a book or a certificate and finally one thing I want to share is from my own experience I got into Android while I started working at Pinterest and you know I kind of muddled my way through I was able to follow some tutorials I was able to copy the code in a certain way to make whatever change I wanted to make I never really truly understood how do I do Android and ironically the first time I felt conf confident in my ability to develop Android apps is when I started teaching Android so I got I signed up to teach for this boot camp and in the process of teaching I went through a tutorial literally four or five times I went through the exact same tutorial and then I started to extend it in a certain way and I made my own custom modification and that was where I had enough depth of understanding where I could tell you exactly what every line of code was doing why it was important and what would happen if I change it from this line to that line and that is what i' encourage you to do is go deep so even if you have a tutorial that's fine use it as a starting point but then I want you to break the tutorial I want you to extend it I want you to go much much deeper into it and teaching is actually an effective way of forcing yourself to do that where teach it to yourself or teach it to another person and that will force a level of clarity that is incredibly important for your maturation as a software engineer learning to code hopefully you have a good idea now of learning how to code and what you'll notice is that I didn't talk too much about the quality of the code making the code pristine and maintainable that comes next first you focus on Raw output just quantity of coding don't worry about messing up and now let's talk about how do you write code clean code quality code that is fit to be on a team any professional engineer you're going to be working with a team of people how do you make sure the code you write is a good fit for that environment and the same advice is applicable here as what I just told you the way you write clean high quality code is you write a bunch of bad code first so don't worry about the process to get there you have to go through the pain of bad code and then in that process you will get to the point of good code it's kind of like children who you might come across a child who's like I want to skip past being a child and being a teenager I'm going to go straight to adulthood and you can't really do that you have to go through the maturation the pain of growing up and then you become an adult so the same thing is true here you can't just blindly copy the code patterns or the templates used by senior engineers at Fang you have to understand the why Behind these different code constructs and again the pain is your friend here so when I talk about the pain of writing bad code I'm talking about that manifesting in three different ways first is you when you write bad code you're going to figure out that a week later or a month later you'll have no idea what you were talking about and it's going to take you a long long time to even ramp up on what does that variable name mean why did I extend the class in this way and that'll be a reminder to yourself that okay let me make sure I don't mess this up again second and this is I think even more valuable is if you have the privilege of working on a really solid team then you're going to have a lot of pain and feedback coming from your teammates in code review and that's going to be an amazing source of how to get better at the craft of engineering and writing good code and then finally inevitably you're going to have a lot of bugs in your code a lot of um anti patterns and that's going to cause issue for the end user and so you might have literally a million people who relying and running on your code and you screw something up it certainly happened to me it's happened to every engineer I talked to working at Pinterest or Facebook where they deployed something and it crashed for a lot of people that's a really quick way to learn let's not do that again and let's make sure that we have preventive measures to avoid that kind of mistake in the future so this goes back to what I said earlier you can't jump ahead you can't skip the messy part the journey the pain that you C from writing a lot of bad code is how you end up writing good code tactically if you are on a team and you have a code review process I would really encourage you to invest a lot of your time in looking at the feedback you got in your own code and also you can look at the feedback that other people have received on their code you don't just have to learn from your mistakes learn from the mistakes of other people and that's a really good way to accelerate the quality of code that you write we've talked about learning to code we've talked about writing good code I want to talk about another really core component of being an effective engineer which is debugging and this is actually I would say the hardest part reading code is harder than writing code and reading code is how you debug code the idea here is that you've deployed some system and of course things go wrong things always go wrong especially when you are working on a scale where you have millions or billions of users and so your ability to go in understand a system that you might not be very familiar with and then making a CH change that is such an important skill and such a valuable skill as an engineer before I go into some tactics to help you debug I want to share why is debugging so important so number one if you work in any kind of sophisticated code base you will always have bugs and as humans as far as long as humans are going to be programmers there will always be bugs therefore debugging is something which will always have value and that's in contrast to feature development so I worked at Facebook for a long time turns out that probably more than half of the features that Engineers work on end up not ever seeing the light of day or they might see the light of day briefly and they get killed a lot of features especially in big Tech don't actually make it to production They Don't Really um end up moving the needle and so you could spend all this time working on a feature only to not really see any benefit from it on the other hand debugging always has value if you are removing a crash or improving a feature that will always have value for you the company and the end user and finally like I said earlier debugging is quite challenging reading code means that you have a Mastery or at least a decent understanding of the endtoend flow of a software system and that becomes incredibly valuable especially in a large tech company where people have changed teams with a lot of turn and the complexity is enormous in fact one of the most senior Engineers I worked with he was like an E8 engineer at Facebook easily this person got paid more than a million a year one of the superpowers that they had was an ability to diagnose an issue and debug it put out a fix very quickly in a way that a lot of Engineers simply could not do or if they were able to do it it would take them 10x or 20x longer and so that's a good example of if you're able to Master the skill of debugging you can reap enormous rewards for yourself and it's a huge huge impact in a large enough company hopefully now you are convinced about the importance of debugging and in fact you could make your whole career built off the brand of being a master debugger um the person I talked about who made more than a million dollars a year they actually fit that archetype so there's a staff in your archetype called fixer and the whole idea is you're able to go into a system even if you're not familiar with it and figure out what went wrong and put out a fix so I want to share with you the Playbook on how you could become a debugger and this could actually be a really fun process because software for the most part is instructions to the computer and your goal is to have a really solid understanding of that endtoend flow what is what are you telling the computer to do and how does that line up or maybe not line up with what you are seeing in the output to cause a bug and so the way you can illustrate this is you have a bug here somewhere and now your objective is to figure out where it came from so it's actually not that difficult and it could be fun to play detective so you have this deterministic set of things that are happening for example let's say there's a rendering issue when you go to a particular screen on mobile figure out what happens when you go from one screen to another and where is that API call happening the Json paring happening really be concrete about everything that you are instructing the computer to do and you go through each step you figure out where that mismatch is happening let's say it's happening at the Json paring step now you know that the bug is introduced somewhere in those 2550 lines of code that are doing the Json parsing for your app so this really just boils down to being really logical and writing things down in an organized way so you can in on where that bug is likely to be introduced so a big part of this actually is about knowing your toolkit so for example at meta it's such a big and complicated company that you actually have a lot of custom tools internally to figure out when did a certain mobile app get released how do you do the custom parsing that Json is doing that meta is doing how do you know uh at what stage your roll out is happening there's a lot of different things that you could investigate so a big part of debugging actually is understanding your toolkit figure out the internals of different programs or Android Studio or different um ways to diagnose API calls and if you have a really solid understanding of that you can get really Adept at quickly figuring out bugs and be the hero for your team some of you watching might be in school or perhaps you're working but you are thinking about going back to school for a master's or a PhD I want to share with you a couple of my own Reflections and realizations about the academic Journey have having been out of school for so long now the number one thing I'll tell you is that school does not adequately prepare you for a job your grades are actually not that important by far the more important thing that you get from school is the network that you develop the students that you come across the faculty that you're able to interact with and I think there's a huge misconception here where when I think about what people perceive as the amount of skill on the y- AIS like here's what you need as a junior in that's the amount of skill that you need in order to thrive and do well as a junior engineer in the industry and people think that okay if I go to school I'll be well prepared I'm going to hit that skill bar turns out the amount of skill that school will give you is a small fraction of what you actually need and I'm not saying that school has no value I'll talk about some of the reasons why it has a huge amount of value but in terms of the practical application of what you need in order to do Version Control and collaborate with a team and learn modern programming languages an academic Institute will not prepare you for that and so there's this huge Delta that you now need to make up and how do you do that that is where the other parts of school become uh really really valuable for you so when you think about school only one one part of the value is academic like the actual knowledge that you gain I would say that the majority of the things I learned at Stanford are not really that applicable to me second is the network and third are life skills right and I think a lot of people neglect two and three but way like learning how to do your laundry and cook and be independent that's actually quite valuable and I would say the most important thing by far is that you're surrounded by people who are like-minded ambitious and smart and so the network is an amazing asset that you get and they're the ones the people you work with are the ones who are going to teach you how to do practical coding they'll often refer you to internships or jobs professors are actually hugely valuable because these are people who at the top of their field and they're really well connected in fact my first job out of college at a startup called kose it came because a professor of mine at Stanford decided to do his own company and I worked with him and he said hey ra it seems like you kind of know what you're doing do you want to join me in the startup and I said sure I'll do that I literally got a full-time job just because I had a pretty good relationship with a faculty member at Stanford one thing I think I really overdid when it came to my college experience was the emphasis on grades one of the nice things about the tech industry and being a software engineer in particular is that the best way to Showcase what you've done is just build things and doing a theoretical class in an academic environment yeah I mean it helps helps to have good grades but it's certainly not the most representative of your skills and so if I could do it over I honestly would have spent less time on academics and I would have spent way more time building side projects with really interesting people at Stanford for example I one of the most difficult classes I took at Stanford was compilers and they had this really Draconian policy the professor had where every hour after midnight that you would submit the assignment you would automatically get your grade reduced by a certain percent and so if you didn't finish the assignment on time you had this really difficult decision on okay should I stay up late and lose sleep and lose a valuable time in order to try and get more of the assignment done while also combating the reduction and grade that's going to happen and just led to a really bad situation where I felt like I wasted time for a marginal increase in my grade and I was really stressed out and if I could have done it over I would would have submitted what I had cut my losses and taken perhaps a lower grade but I would have been able to allocate more time toward the other things that I think are equally or more important when you are in school the next big topic I want to talk about is networking how do you build up a cohort of people who you can know really well you can help them and they can help you and if you look at any highlevel engineer any executive level person the way they they succeed is almost entirely based off of the people they know and the people they know allow them to have the impact required to succeed at that higher level a very common misconception here especially among Engineers is that they think the corporate world is a dark place with a lot of political players a lot of Machiavellian tactics to try and get ahead and you put people down and it's all politics and that people assume Network politics are intertwined and politics is this negative dark thing that they don't want to engage in and I'm not denying that there are people who are like that where they're really just selfish and trying to take advantage of other people around them but I will also say that unless you engage with people and you do it in a productive way you will not get ahead in your career there's a phrase I like to I like a lot called your network is your net worth so your ability to cultivate relationships and not just get help but also provide value to people that is how you are going to become wealthy that's how you increase your net worth just to make it really simple my number one rule with networking is give more than you take lead with kindness so when you are talking to the new person on the team or maybe you are the new person on the team your first question when you interact with someone in a one-on-one or a team meeting is what value can I offer how can I help this person and you should should not expect that they're going to immediately repay the favor or be able to help you in return the idea should be let me plant a bunch of seeds let me try and help as many people as possible and then maybe either tomorrow or a week from now or a year from now years from now some of them might come back and be able to uh help me out as well the world Works in a really random way sometimes and so when you are trying to help people genuinely they'll remember that and that will benefit you in your career later on a lot of the jobs I've gotten have actually come through my network we'll talk about this later on in the video but referrals and someone advocating for you is probably the best way for you to build up a career and get into jobs that you probably wouldn't have had access to otherwise one really concrete story which has had a huge profound impact on my life is when I joined meta so right now I'm working on a company called Taro my co-founder is Alex we first overlapped we first met each other while working at Facebook on a team called portal which is a really chaotic organization and I joined portal about four or five months after him he was still relatively new but he knew certainly more than what I knew and so as I was trying to navigate the chaos and confusion that came in with being new into big Tech and also being new into this pretty messy org he actually created his own onboarding DOC for me and he had no incentive to do so it was purely an act of kindness that hey I'm lost but I'm a little bit less lost than you maybe I could help you out and that dock ended up being really valuable for me we ended up striking up a friendship on that team and we maintain that relationship even after Alex moved to Instagram away from Portal and eventually that relationship turned into starting a company together so I'm not going to promise that you're going to find a co-founder magically by by networking but that's an example of the way you get lucky the way you're able to find people and opportunities that other people are not able to get is through this idea of leading with kindness and that is how you build up your network that's how you're able to get a huge outcome all right so one of the things that naturally comes up when we talk about networking is I'm new and everyone around me just seems so much more put together so much smarter than me and we call this imposer syndrome and everyone I've talked to whether they're extremely smart or not so much they're kind of average like me they will feel imposter syndrome and so it's worth spending a couple minutes talking about about that the first thing to mention is that we are so lucky to be in an industry where we have incredibly smart people that we feel imposter syndrome so the first thing I'll say is reframe the fear or the anxiety that comes with imposter syndrome and view it instead as an opportunity that we now have so many people around us to be able to learn from so I'm going to try and illustrate how imposter syndrome will manifest usually and then I'll talk about a couple ways to combat it so a very common time when you might feel imposter syndrome if you just got promoted to a new level or you're new to a company and so you know you're down here this is you and then you know you might feel okay everyone else they know so much more about a topic they're already at a much higher level they've been at the company for so much longer so all the people up here are way more knowledgeable than me and there's a a huge gap there's a Delta between what you know and what they know and that can be scary it's like I might say something stupid or I might screw up or I don't deserve to have this promotion or this job so a couple things I would say first instead of viewing everyone up here as this Big Blob of uh people who are all so much smarter than you it really helps to decompose that build up an individual relationship with certain people in that blob and that's where you can start to figure out hey there's a particular person over here who yeah they for sure know way more about this topic but actually I might know a little bit more about this other topic and when you start to figure out that everyone has strengths and weaknesses you can figure out how you can have unique value on the team the second thing is going back to what I said earlier let's reframe imposter syndrome as an opportunity for us to learn and incredible amount from people who are a little bit further ahead than us in a particular domain so think about how each person here is effectively going to give you a ladder that now you can get to the level that they are at and you have the opportunity to learn from them and become so much better and the last thing I'd say is that feedback is a gift and we'll talk a lot more about this in a later section but a lot of the Imposter syndrome a lot of the anxiety will come from ambiguity on how are you doing you're new to a company and you're not really sure how are you doing relative to the expectation at that level and so just ask a bunch of questions obviously to your manager but also to the people who you think are you're putting on that pedestal ask them and say hey how am I doing I have a question about this particular topic or I've been on the team for X number of weeks and I'm not really sure if I'm ramping up quickly enough would you be able to share some Frank feedback with me and when you get that feedback you can not only improve but also you might find out that hey you're actually doing totally fine at this point in the job or at this point in the promotion people are not expecting you to magically know everything and having that really concrete discussion can help to alleviate a lot of the stress that comes from imposter syndrome the next big section I want to talk about is interviewing which is a necessary evil when it comes to thriving in Tech you need to get a job right so I want to start off by talking about what are proven techniques to help you find a job if I had known this earlier I would have gotten much further I would not have had to deal with literally hundreds of rejections earlier in my career so the first thing I want to call out is that you should not expect that finding a job is a completely Fair transparent process it's not how the world works unfortunately so consider for example a normal job application a job description so normally what'll happen is you're going to have when this job posting goes up on LinkedIn or indeed you might have I've heard thousands of applications coming in within a day and so you are one of hundreds or thousands of people competing it's really hard to distinguish yourself and be able to get an interview forget about even getting a job and so one of the lenses through which you should think about your interview process and finding a job is I want you to find jobs where instead of a thousand people you might only only be one of maybe three people who are applying for the job and how do you put yourself in a position where you can be one of three people or one of 10 people instead of one of a thousand people that is the question you should ask yourself and the answer to that is you need to figure out where do you have unfair advantages where do you have unfair access to jobs so a good one for me was I went to Stanford Stanford has tons and tons of companies that want to recruit from Stanford and so when I went to the career fair that was a huge advantage that I was able to land interviews and eventually get internships and jobs because I was at the top of the list through the Stanford career affir you probably have a career fair as well if you're in University go to that that's a huge source for being able to get a job if you're not in college or if you don't have a really prestigious name on your resume you can still find Opportunities find ways to distinguish yourself so maybe you have made an open source contribution into some repository now you have an unfair advantage that you have credibility of expertise in a domain in a way that other people don't have maybe you have this deep deep passion for a particular industry like healthcare and you've worked in healthcare before and now you're transitioning okay now you have an unfair advantage to apply for tech jobs in the healthcare industry so figure out what is that for you where you can actually start to compete with a lot fewer people compared to you know a generic posting at Google where now you're on LinkedIn and you have literally thousands or tens of thousands of people competing with you the next thing to realize is that interviews are really random and frankly kind of broken so one thing that is worth thinking about is the empathy for the company if you are trying to hire a good engineer you probably will expect they'll be on your team for a couple years and yet you're trying to make a decision about can this person Be an Effective engineer an effective leader on my team probably within three or four or 5 hours it's a pretty hard job you should expect the company will expect and you should also expect that there's a lot of random things that will happen a lot of unknowns that you really can't account for and that could either help you in a positive way or more likely companies are really cautious to take taking a bet on people and it might hurt you and that's part of the process you should be okay with that and your mentality going into the job search is really really important here you know when I talked to so many people at this point and in my own career there kind of two approaches to a job interview right approach number one is you are extremely stressed out and you are coming in with a ton of anxiety and you feel like it's make or break either I perform well and I get the job or I'm screwed my life is ruined and there's another approach as well which is what I recommend which is hey this is an opportunity for me to meet someone really interesting I can learn from them I want to learn about the company and if this is a good fit I'd love to explore where it goes but you are not hinging your career or your life on this particular job or interview and when you have that mentality of hey YOLO I promise that you're going to end up doing much much better in the interview and in the actual job too where you come in with this positive Dynamic attitude that you can adapt and adjust based on how the interview is going so what I like to tell people is study a lot care a little obviously you should do all the preparation we'll talk about a lot of the tactics in a little bit but do all the elite code preparation talk do mock interviews work with your friends or um colleagues to do uh you know practice interviews once you've done all that work though and you're going to the interview go in with confidence go in with a clear head be dynamic be prepared for anything and don't be so hung up on oh that question was phrased in a different way or I'm not sure how to handle this come into it with the right attitude and your success rate is going to shoot up dramatically the last thing I want to mention on this topic of finding a job is that you should allocate enough time to it I think some people have this kind of Miracle mindset where it's oh this is a perfect job I'm going to apply for it everyone's going to love me I'm going to love the company it's going to work out it almost never works out you should come into it with plenty of backup options you should come into it with plenty of time allocated and really have a consistent schedule for preparing for interviews one of the things that does suck about the industry is that the preparation for a job and the actual job are very different and so just doing well on your current job is not actually going to prepare you adequately to interview effectively on that note one of the common issues that I've seen people have again and again and again is that they are not correctly taking into account how far along or there a lack thereof of how far along they are in the interview process there's two very distinct phases when it comes to um job searching first is do you have interviews lined up can you get interviews and the second phase which is actually very distinct from that is are you now passing the interview and the common mistake I see is is that people will jump to phase number two trying to pass the interview when they haven't actually done the work for phase number one so phase number two passing the interview is all about grinding out data structure algorithm problems looking at system design doing behavioral interviews and we'll talk about all of those in a bit but you can't jump prematurely to phase two when you haven't actually had interviews lined up and so if you're still on phase one you need to do things like networking you need to go to the career fair you need to figure out what is your unfair Advantage where you can actually distinguish yourself from hundreds of other applicants once you have the confidence that you have two three 10 different interviews lined up that you can get those on the calendar then you shift aggressively into phase two which is what we're going to talk about in the subsequent section so in the two phases of finding a job phase one is getting the interview phase two is passing the interview so a big part of phase one getting the interview is having a really good resume a highlight reel of of your professional achievements so that people can look at it and then decide whether to interview you or not so obviously the resume is critical it is probably the single most important document of your professional life I have a couple rules I want to share with you on how to make your resumé actually stand out and I'll tell you from looking at hundreds or probably at this point thousands of rums the majority of them are bad not just bad but they are flaming garbage I would never hire someone or never even interview someone with a lot of the resumés that I have seen a very common mistake I see is people who have resumés with a lot of Flowery language a really unique format they think hey I'm a unique person I have a unique personality my resume should be unique too I'm going to have a bunch of different colors and I'm going to have four columns and a lot of really cool pictures that is not how you succeed with the resume the resume should be laser focused on highlighting your professional accomplishments people don't spend very much time looking at it they within 10 seconds within 8 seconds they are going to make a judgment about whether they think you have what it takes to succeed at the company and whether they put you in the yes pile or the maybe or no pile and frankly maybe and no both turn into no at the end of the day one of the really easy ways for me as a hiring manager to get turned off on your resume is very simple length so a lot of people think that okay I have so many different things I done I've done three internships I followed five tutorials so therefore I have five projects I have all these clubs and activities and hobbies that I want to showcase and they have you know a resume which ends up being four or five pages long and if someone is spending eight or 10 seconds looking at at your resume the vast vast majority of that is going to be completely ignored and the information density the amount of information you communicate in that 8 or 10 seconds is a lot lower compared to if you have one really tight resume which just talks about the highlights of what you've accomplished and why you are good fit for that role and so my recommendation is follow a very clean standardized format one page one column no head shot and no summary section that's a really common mistake I've seen where people will spend four or five sentences maybe even one or two paragraphs at the top of their resume talking about hey I'm a hard worker I want this kind of job I lead teams effectively and that's a waste of space and you're not really communicating anything of value one of the core principles in having a good resume is show don't tell and inevitably when you have that four or five sentence paragraph at the top talking you about how you're a hard worker how you are ambitious and you want a really cool opportunity that is classic telling you're not really proving anything anyone anyone could make that claim so instead you should go directly into the substance of what you've accomplished in your internships or projects or your jobs and talk about what have you achieved what metrics have you moved what technology were you using and show me the numbers that prove what you are claiming a really good example of being ruthless with the size of your resume is my co-founder so I'll leave a link so you can dive deeper into the template that he followed but in his resume he has published literally more than 30 different Android apps he's one of the most prolific mobile developers and Android developers I know he has many apps that have gotten more than a 100,000 downloads and yet when you look at his resume he has picked the top two out of 30 different apps he has published and each of these two have more than 500,000 downloads and so that's a really good demonstration of how you need to really figure out what are the top few things that will fit that will clear the bar for a onepage resume brevity is your friend here and Alex doesn't have a 10-page resume even though he easily could he focused on the top two because that will capture all the value that he was able to create from the Lesser projects let focus on the The Pinnacle of what you've achieved okay now let's talk about what I'm sure is your favorite subject or perhaps your least favorite subject ever which is data structure and algorithm interviews this is a core part of how many many companies will evaluate a software engineer and I'll just be really honest it does suck because I mentioned this a little bit before the DSA interview is necessary for you to pass and for you to go deep on that subject in order to get the job but you'll find that when you are actually a professional software engineer you will almost never use the concepts that you've learned the classic joke is that you know how often are you gonna actually be um reversing a link list or doing some contrived thing with a binary tree on the job the answer is not not really ever and yet it still is the state of the industry that that is how you're going to be evaluated so we can complain about it or we can do something about it and actually just do the work to get better at it so let's talk about how you can get better at it it does suck but the DSA preparation is actually extremely high value in that it is one of the highest Roi things you can do a little bit of prep can land you a six figure job it can increase your income wildly so it's worth thinking about how can you actually prepare and it's a pretty big task to prepare for these leak code style DSA style questions um the first thing I want to call out is that uh you know as you are preparing it's going to feel initially for the first few weeks perhaps the first few months that you're just not making very much progress and so if we plot out on the x axis time how much time are you spending on Preparation on the y- axis you're understanding it's going to feel pretty slow like you're going to go like that and it's just going to feel like I'm not really getting that much better but I want you to trust the process for me it took me a really long time to start to get comfortable and then what you're going to find is after you've been doing this consistently you really won't know what's happening you're going to kind of feel sad and then all of a sudden you're going to find that things start to make sense and you're learning will increase exponentially because you've at this point observed tons and tons of patterns and then this is the point after you've gone through that barrier where you're going to start passing a ton more interviews so my advice is don't Focus so much on your past rate or your correctness rate initially just focus on hitting a certain number of problems every day or every week as per your schedule and believe that it will get easier and easier over time as long as you have that Faith DSA is a big topic there are literally thousands of questions that you could get asked by a company in the interview it's impossible for a human to memorize solutions for all of that and that's a common mistake I see was that people think that okay I have enough time or I'm going to brute force my way through and when I have this kind of problem I'll know what code to write that's a recipe for disaster you're not going to be dynamically prepared during the interview so instead of trying to memorize hundreds of different algorithms or Solutions what you should instead do is figure out what are the common patterns that you see again and again and again and it turns out there's only between 10 and 20 I mean a couple dozen maximum patterns that are going to be tested in the interview so figure out what those are and if you go to a website like Le code you'll actually find those different categorizations and so make sure you can understand the Core Concepts from each category and then that'll prep spare you for anything you might get asked instead of this narrow bucket of where you might memorize on that topic I really would encourage you go deep on Le code leod is this company which has created the preeminent preparation tool for data structure and algorithm interviews it's kind of like Xerox or Kleenex where the brand has become so famous that people now associate the whole category with that brand and that's for a good reason leak code is just so dominant in the space there is a free product for elite code and a premium product if you're preparing for Tech interviews and you know that the companies are asking DSA problems it feels like a no-brainer for me just get leak code premium it's you know a little bit of money but the outcome is that it could increase your income your compensation by literally thousands or tens of thousands of dollars so the ROI is is pretty obvious and finally one more tactical thing I want to share with you is that at the beginning we talked about learning how to code and I talked about this idea of you want to embrace the discomfort you want to be okay with not knowing how things are working and you struggle through it that is where you get a lot of learning the same exact concept applies here so a lot of people who I talk to when we they complain to me and say Hey you know I'm not making any progress I can't figure out leak code and I prod them a little bit say how are you actually studying and what they tell me is hey I try it for five minutes I sit down with the paper or maybe on my computer I try writing out a solution after 5 minutes I can't figure it out I go look at the solution and I try and make sense of it there's a binary switch that happens where they're either in problem solving mode or in solution mode and what I would encourage you to do is blur the line between problem solving and solution finding you're going to learn way deeper way more in that way and so here's what I'd recommend when you are working on a problem first of all 5 minutes is too short give yourself a 15 or 20 or 30 minute struggle like a real interview is going to be 45 minutes give yourself more time to think about it and struggle then when you feel like you really cannot make any more progress then instead of going fully into reading the solution reveal it to yourself peace meal so look at one line of the solution or if you're watching an explainer video maybe go 30 seconds or 1 minute into the video and when you feel like you've got a bit of a hint stop and go back and struggle for 10 or 15 minutes minutes more again the idea is that you want to embrace the discomfort embrace the idea that you don't know what's happening and when you reveal to yourself the solution a little bit at a time your depth of understanding is going to be so much better and you're going to be able to tackle the next problem and every other problem after that in a much more methodical and deeper way almost inevitably you have heard about and thought about and worried about the DSA interview data structure algorithm interview every software engineer talks about it and we make jokes about it and yet I would argue that there's another type of interview the behavioral interview which is more important than DSA so obviously DSA is important it's like a check box you have to pass it and that's how you get the offer but especially as you become more senior I was a staff engineer at meta what I learned is that the behavioral interview is a much more important input to figure out how will this be engineer operate in the company and it's used to figure out are you a mid-level senior or staff engineer or even higher and so if you ignore the behavioral and you don't properly prepare for it you might get down leveled you might not get the offer because it's such a core part of how big tech companies and really any company that cares about culture it's such a huge part of how they will evaluate you a lot of Engineers neglect the behavioral interview because they think that it's something they can easily just wing and they walk in they spout some story about a project or a teammate they had had issue with how they overcame it and they'll pass this could not be further from the truth the best Engineers I know are really targeted about what are they communicating and what does that story reveal about how they operate so I would encourage you spend a lot of time thinking about every sentence every story you say in the behavioral interview should be lining up to one of three different buckets of what you're trying to communicate so you have a behavioral interview and there are three things that you are trying to communicate and so when you think about the stories it's either number one you're going to be talking about how much you care about software engineering the craft of writing code and building systems that are maintainable and the intellectual pursuit of engineering so either you're talking about that or number two you are talking about the company there are countless companies out there that could use software and yet you're choosing to interview at this one why and getting paid a bunch of money is not a good answer you want to talk about hey this industry is really interesting to me the problem space is interesting the The Innovation at this company is exciting like figure out how you can say something unique about the company in your behavioral answer in whatever story you're talking about and then finally third is the team software engineering is not a Sol Endeavor hopefully you know that by now anything interesting will get built up on a team you're going to be working with smart people and figuring out how to create something bigger and more maintainable than what you could have done alone and so any story you uh the third option for the behavioral interview is talking about how you had a particular runin or a problem or or like a a good incident uh a good story with collaboration and teamwork so when you think about uh interview it really should be talking about either the craft of engineering why you care about the company the passion for the company or third your ability to interact and lead a team and if you have that framework in mind then you can be a lot more clear and a lot more concise with the answers that you're sharing in a behavioral interview so I talked about the content of what you should be saying in a behavior interview there's also another whole discussion we could go into about how you say it and this is really important I'm not going to get too much into it here but there's a acronym called star which is a good starting point star stands for situation task action and result and so as you talk about a particular story in the behavioral interview you want to make sure you hit these four different bullet points as a way to logically explain to the interviewer what happened what you did about it what was the result and what was what were the takeaways and so if you have that framework thinking in mind it'll help keep you on track with uh with the interview the third and final type of interview I want to talk about is system design and the idea here is that you're given an open-ended prompt from the interviewer for example design Twitter or design a link shortener and then your job in the interview is to decompose the problem into something that you can actually talk about and think about the trade-offs of how would you high level design a system draw boxes draw arrows and figure out the relationship between the different components right off the bat what you can tell from the description I just said is you are not coding this is not a DSA data structure algorithm problem where you're writing a block of code and running it in the in the browser or in a compiler if you're coding then you are failing so the idea of system design is to deliberately keep at high level and talk about the tradeoffs of different approaches and not to actually Implement anything another really common failure mode I see here is that people will read about oh you know this big company is using CFA or they're using uh you know this data infrastructure or here is how they adopted this new open source technology to solve a problem the system design interview is not about throwing out these hot new technologies or Frameworks or open source tools it's about how are you communicating the different options available to you what are the assumptions that you're making about where the system might scale scale or break and defending the decisions you're making so don't try and memorize the hot new Frameworks that are coming out instead focus on the actual problem being asked and think about what are the interesting design decisions on how this system might be built at a larger company and I will say this is a pretty hard problem because when you think about um preparation most people especially earlier in their career have a really hard time preparing you don't really do system design in school you're not building large scale systems as a college student if you're building a side project again you're usually not thinking about a 100,000 a million or 10 million users you're usually doing something kind of in a sandbox environment and and third even if you are on a job at a big tech company if you're more Junior you're usually operating at the task level okay here is a particular feature write some code and implement it and you don't really have the autonomy or authority to design a large scale system for example at the scale of Twitter or Facebook and so how do you prepare my number one piece of advice here is figure out really smart people who you can work with and figure out how are they designing systems so you might not have firsthand experience but you can at least observe how people are doing it I have a funny story here when I was working at Pinterest much earlier in my career there was someone who we called him Dr way Dr way was very quite senior and it was such a privilege to be able to work with him because he was the one actually architecting these systems for Pinterest scale 100 million 200 million users going through the system and that was where I feel like I learned a lot about properly thinking about trade-offs and um you know drawing boxes on a whiteboard which I had never really done before so my advice to you is that if you have someone like doctor way who you can interact with work really hard to be in the room where you can see how they're designing systems and eventually if you're doing good at your job you will have earned the trust to build your own system and that's where you can start to understand system design at a deeper level and illustrate that in the interview but now we've talked a lot about interviewing and the different ways you'll get evaluated and now you have a job hopefully I want to spend the next few sections talking about how do you succeed on the job and there's one really core idea I want to begin with which is what I would consider the secret to growing quickly it's very simple be a feedback vacuum I want you to suck up all the feedback you can possibly get and act on it that is the number one trait I've observed from people who are able to grow their career very quickly in fact when I was at Facebook there was a saying which is that feedback is a gift you should treat feed feedback and invite it with open arms because that is how you're able to figure out where you could improve and there's no such thing as like a step-by-step guide on becoming the best engineer there is going to be a lot of dynamic change and adaptation to the environment you're in and so figuring out what the people around you are saying is a core part of growth and you might hear that and say yeah of course feedback is a gift I love feedback I'm I I always invite it but I would actually push you a little bit to really think about how how open are you to hearing it and also to act on it so what'll often happen is a manager or a tech lead or someone will give you feedback and they'll say you know you suck and you know hopefully they'll say in a better way in a more scope down say hey for this particular thing you could probably have done this better but you know they'll give you some feedback whether delivered well or not and you know a lot of people if you're over here receiving the feedback uh you might say initially okay I know I'm going to I got this feedback I know I suck and some people will just end it right there and they say okay well let me try and figure out what I can do or even worse what people will do instead is they will start to become defensive and they'll say I dis agree and now you're pushing back on this person who gave you a gift and if I gave you feedback and I felt like you were now attacking me or you were disagreeing with me guess what I probably will never give you feedback again because it were just a poor experience I tried to do something which might be helpful and even if I didn't deliver in the most effective way I'm um now being punished for it and so either you close down and don't really engage with feedback or even worse you are defensive both these are really bad outcomes for um dealing with feedback instead what you should do is ask a followup and say what can I do what can I do differently what can I do better and engage with them more and hey that's really interesting to hear that can you give me an example of where I screwed that up or what do you think I could do differently going forward and if you show that you're appreciative and you say thank you for the feedback and then you ask really thoughtful follow-ups and then a couple weeks later you might even follow up and say Hey you know you told me a month ago that I could improve how much I participate in meetings I've been trying to do that more recently what do you think and if you are able to do that not only are you able to improve much more quickly but you're also able to build up a really positive trusted relationship with the people who are giving you feedback and now they're going to become advocate for you they'll think about you for promotion or a new project or generally for career advancement one more really important point that I've seen again and again here is people who are questioning the validity of the feedback and they might have a really legitimate claim to say hey you know what I actually really that's factually not correct or that feedback is simply not applicable to me but here's the question I want you to ask the person who's giving you the feedback do they have good intention do they actually want you or the team to succeed and if the answer is yes you should still be very happy and inviting for that feedback even if it's wrong so what what will often happen is if you're a junior engineer or you're a mid-level engineer the person giving you feedback might probably will be more busy than you more senior than you and because they're a lot more busy and they only have a small window of time to evaluate you or really make a judgment about you they might very well come to the wrong conclusion and despite that the challenge for you is to treat the feedback as a gift regardless of whether it is applicable to you or not one last thing I want to mention on this topic is there's an art to being able to get feedback effectively so a lot of people will you know go out to their manager or people on the team and say hey do you have any feedback for me or is everything going okay like you're giving people an out you're giving them an opportunity to say oh you know what everything's fine don't worry about it instead you should make it really easy for people to give you constructive feedback back so an example of that might be hey you know what in the project that we worked on together last month I felt like I wasn't really in control of it and I was being talked over and I wasn't in command of the project what do you think how could I have done that better so now you're making it really easy for people to say yeah actually I think you're right what I could have done differently or what you probably should have done is X Y and Z so making it really deliberate and thoughtful about wanting feedback and opening the door for them is important one more tactic here is to plant the seed ahead of time so I haven't really worked with you that much and you spring upon me hey do you have any feedback for me it's unlikely I'll have anything thoughtful to say to you but if you give me a couple days and say Hey rul you know on Friday when we meet up I would love to get from you any feedback and now you gave me three or 4 days to be able to think of feedback I'll be able to come into that conversation with something much more concrete and actionable so try that out these are ways for for you to not only react to feedback you get but also make sure you get the feedback in the first place and make it easy for people around you and if you do that consistently with a lot of people on your team I promise you you're going to grow a lot faster in your career your career is made up of a bunch of stints at many jobs and so it's really important that you're deliberate about what job are you picking next how do you decide on the right company so I'm going to share a couple hero sticks that will be really valuable the first thing I want to mention is that you have to be deliberate I can tell you pick company a or Company B but at the end of the day it's going to be your priori prioritization on what matters to you and I think too many people are handwavy and ambiguous about this in their head I want you to write down what exactly is important to you and realize that this is going to change and it's totally fine for your priorities to change in your 20s or 30s or when you have kids or have a house all that will evolve and that's okay but think about things like compensation or learning or technology choice or work life balance there's probably 10 or 15 things that most people will consider make your list of what you really care about for now and change it every six months or every year so that's what I would say is uh the framework of like make that list and then figure out out of the opportunities available to you which of these lines up with your internal Compass of what you care about that's like a very theoretical answer if I had to give you a bit more more practical advice what I would say is having that stamp of credibility from a big tech company I'm talking mostly about Fang here Facebook Apple Amazon Netflix Google Microsoft Etc that will unlock a ton of doors and so unless you have a really wellknown Institute or academic like University that you've been to I encourage everyone when they're starting out in their career to go into big Tech and there's a couple benefits of that number one it gives you credibility which is going to help you later on number two it will give you a really solid foundation because you will inevitably be put into contact with really well- defined processes and really smart people that will help you level up and third it'll give you a financial cushion you are going to be paid well if you are in Fang and that money is a tool which you can now leverage for optionality and future choice but be careful that you don't end up sticking around at the first company that you're at Forever on autopilot the tech industry moves rapidly so a hot company today may not be a hot company tomorrow or if you for example join Google or Amazon these companies are are already enormous they're trillion plus dollar companies you will not see a five or 10x increase in the way that you would have if you had joined Google or Amazon or meta in the 2000s so just be realistic about that and realize that you have a lot more flexibility earlier on in your career where if you've been working for 20 years at that point you probably have accumulated some amount of responsibility a mortgage kids and you'll probably have to think twice about joining a much earlier stage startup which won't have the liquidity and so high level my prescription would be early on in your career go to a bigname company spend a couple years there and then once you have that Foundation then you move on to your own company join a startup do something that you are more interested in the main thing to keep in mind is don't put your career or put your job on autopilot just make a deliberate choice about what is important to you at this moment in your career and is your company serving you appropriately hopefully you've done a lot of thinking about what is the correct company for the next chapter of your career and now you are starting at this new company congratulations I want to talk now about onboarding how do you make sure that you succeed as the new engineer in the company the first thing that's worth calling out is that I want you to view the onboarding period as a magical power that you now have so I don't know if you've played Mario Kart before but if you play Mario Kart you have this star that you can um absorb or eat and then that gives you invincibility powers where once you have that star nothing can hurt you that is effectively you as the noob on the team so you are this new person when you're brand new you have this magical star which allows you to ask any number of questions and people will not get upset with you it's expected it's totally normal for you to interrupt people have one-on ones with them figure out what they're doing and you can just ask for help in a more aggressive way compared to maybe if you've been at the company for a year it might not be as appropriate and the reason I say that you should act with urgency you should view this as a really sacred time the first 1 month or 3 months or 6 months of the company is because the power of that Mario star that you just ate is going to degrade over time and the willingness of people to help you or pay a program or do all these oneoff things is going to be harder and harder over time so as you're ramping up talking to people asking for resources getting help a really core part of showing that you're properly ramping up is you need to bias toward action you need to get things done so a very common failure mode is that people come in and they are really relaxed lacad isical about the onboarding where okay I'm going to spend a bunch of time reading the documentation reading the code and there's no tangible output and so I really would encourage you figure out how you can create create an artifact of your work often times the most obvious artifact for a software engineer is going to be code did you manufacture did you produce code a PO request that people can then review it also the benefit of code is that it also forces a level level interaction because usually people are going to have to review your code another common artifact could be documentation like put together a Wiki improve the onboarding guide have something that you are putting out into the world hands on keyboard that people could give you feedback on that is a really powerful indicator that you're ramping up appropriately if you are creating something as quickly as possible the other big thing about the onboarding is that it's a time for you to build up relationship ships you're going to be obviously interacting with your manager Tech lead other people on the team because you have this Mario golden star to be able to request help and interact with them I want you to view all of these interactions as your goal is to have a really deep relationship where people come away from the interaction saying wow that person that new person on the team is really friendly really easy to work with I want to spend more time with them you want to be very likable and that means means making figuring out what they care about trying to help if you can even in the early days buy them A coffee do whatever you can to create that relationship built on trust that will then serve you for however long you are at the company I did a really poor job of this actually when I joined Pinterest so I came in through this Aqua hire scenario and I was transitioning from a machine learning role at the startup and then I made a decision that at Pinterest I would do more mobile development I wanted to do Android and as a combination of that along with just frankly being kind of lazy I didn't really engage as much as I should have with the team or with the new Tex stack in Android and the result was pretty awful I got rejected for the promotion from L3 to L4 not once but twice and it was really disheartening and I attribute a lot of my slow progression and my failure to just not having that proper sense of urgency when it comes to onboarding so don't be like me make sure you come in build up a ton of relationships ask a lot of questions and bias toward action when you're new when it comes to your professional growth the single most important person is going to be your manager without your manager's approval without a good relationship with your manager you will not succeed in your career you can kiss your promotion goodbye it's not going to happen unless you're manager and you are on the same page so I want to spend a couple minutes talking about how to make that manager relationship healthy and productive here's what a lot of people think especially when they're new in the industry or new to a company here's what they think the manager relationship is like I have my em my ede manager and then you are down here and they think that the manager is this authority figure above them and they're going to be sending commands down this pipe do this do that report back to me about this particular problem and then your job is okay let me kn along and basically do what they say and don't get me wrong your manager is your boss they control your compensation perhaps they probably will give you feedback about what you should do but this is not the correct way to view that relationship Let's cross that out this is not how you should be interacting with your manager instead a healthier way of thinking about the manager relationship is to be more of a peer to peer relationship so if I draw it like this now it should be more of your on somewhat more of equal footing where of course your manager will be giving you continuous feedback about what you should be doing or what you shouldn't be doing but you should also feel empowered to communicate back and it could just be as simple as hey here's what would help me could you maybe give me more feedback in this area or that area or you can even take a step further and say hey here's what I think you should do to help the team here's what you could be doing differently or better when you have this B directional relationship with your manager not only do you feel more empowered to take action and do things that you think are important but also critically as a manager I will trust you way more when it feels like you're in control and you're giving me feedback I'm not just talking to um a passive participant it's someone who actually cares when it comes to building up that relationship with the manager the most important tool in your toolkit is going to be the one-on-one so ideally you're going to have some sort of recurring meeting half an hour 45 minutes every week or two with your manager where you talk about how things are going not just about how are you doing how is the team doing talk about what could be going better or what's going well and so a core part of the one-on-one is having a one-on-one document where you write down what exactly it is that you want to talk about and what you talked about in the past and so I really would encourage you everyone should have a one-on-one doc where you have the date and you talk about on that particular date what is the agenda and this goes back to this idea of a bidirectional relationship it should not just be your manager filling out this document I want you to be proactive enough that ahead of the meeting you write down here's what's top of mind for me and the byproduct of having this document is number one it shows that you care and often times what you'll find in in your career or in in life in general when you care other people care and so that's why the one-on-one dock is so important the second big thing is that it also makes it super easy for both you and your manager to remember what it is that you've done or what it is that you've talked about your manager likely is going to be busier than you they might have five or 10 people reporting to them they have a lot going on in their head you want to make it really easy for your manager manager to remember what impact you've had and how you've been working with them so they can advocate for you appropriately when it comes time for performance review so make sure you think about the relationship in a bidirectional way come prepared to the meetings with a one-on-one document and have thoughts to share and that is how you set yourself up for a really healthy manager relationship all right so now you have found a company you've onboarded you have hopefully a good working relationship with your manager question is how do you now progress in your company and oftentimes the most tangible marker of career progression is going to be promotion promotion is a really broad topic I'm not going to do it just Justice here I want to share a couple tidbits a couple things that I've observed in my own career and from seeing so many people go through it a lot of people think that promotion is about doing more work and doing it faster this is not how you will actually get promoted it's not okay like you do five tasks per week and now I'm doing six tasks or seven tasks per week I'm going to get compensated more and get promoted this is a core unlock in your in my mindset as I was thinking about promotion promotion is about Behavior not output I'll say it again promotion is about Behavior not output it's not about how quickly can you turn through different tasks it's about how are you approaching the work in a way that allows you to tackle problems that you could not have tackled earlier in your career and then that comes not it might come from working harder but often times it's about changing the type of work that you're doing the relationship with other people on the team or in the company to unlock a higher level of impact one way to prove this is that if you look at the compensation for different levels of engineer if you're an entry-level engineer at Facebook then you might get paid let's say 150k a year and then it goes up to you know 80k a year as a L4 but then if you kind of forecast that out it's not like your compensation goes up linearly your compensation actually goes up geometrically where if you're the the senior most level like E8 or E9 you will get paid literally 10x more than the entry level engineer but we all have 24 hours in the day it's not like the E8 engineer the distinguished engineer or the principal engineer has 10 times more hours in the day and so what they're doing is they're able to tackle problems and they're able to handle a scope far far beyond what the entrylevel E3 engineer is able to handle so the question is how does that E7 E8 engineer do so much more and the answer comes from multiplicative impact so a lot of people when they start off their career which is totally A Fine Place to be is they write code and that code will get shipped to the end user and they get some amount of impact they're right about that in the performance review and everyone's happy when you get to a more senior level though when you get promoted then you start to actually have multiplicative impact and what that means is one way that might manifest is you are now influencing the code of every person on the team so now you're writing code or you're maybe mentoring people you're coaching people and your impact whatever positive impact you have on one person because of the code or the mentorship can be multiplied by five or 10 people on the team and all of their impact now you are able to get some credit for that and so what would have taken you much much longer if you had done the actual work on your own the codee or the people are able to scale that up in a way that would not have been possible earlier and that's how you're able to justify 10x more compensation or 10x more impact as you think about promotion as you think about the type of work that you're doing and hopefully it'll shift toward more multiplicative work you need to think about how does that actually line up to create a narrative around promotion how can you justify promotion promotions rarely just happen because you're doing good work there is some deliberate thinking and planning that goes into it so if you care about career growth if you care about promotion it needs to be a discussion with your manager but there is a right and a wrong way to have that conversation the wrong way would be hey I really want to get promoted I've been working so hard and I feel like I deserve it that kind of statement or that kind of interaction is very me focused a better way of having the promotion conversation is to frame the career growth your career growth as a benefit to the team to the manager and to the company and you talk about how if you're able to get promoted you're going to have even more impact more credibility more ability to help the team and the manager have even more impact so the way you have that conver conversation matters the timing of that conversation also matters where you need to make it aware you need to make your manager aware that you care about this promotion and get that feedback from them early enough that you can adapt or improve any upon any of the feedback that they might have for you I've gotten promoted a bunch in my career I've also gotten rejected for a promotion a bunch in my career I mentioned this earlier in the video but I actually got rejected for the same promotion twice at Pinterest and a large part of it was that I just expected my manager to advocate for me and help me out and I wasn't an active participant in that per otion process as as much as I could have been for example in the second time that I got rejected for the promo I had written in my promo promotion packet that I worked on a particular project for about 18 months I said I worked on this for 18 months turns out that the promo committee read that and made a judgment that I wasn't working fast enough or I wasn't prioritizing my time correctly for why this project should have taken me 18 months and that's the kind of thing that I easily could have caught earlier if I had shared my packet with my manager or with peers ahead of time don't leave the promotion up to chance be really buttoned up and thoughtful about who you're getting feedback from and anticipate how it might be perceived I want to spend a few minutes talking about negotiation which is in my opinion one of the highest leverage activities you can partake in to meaningfully change your life financially I'm going to share the anecdote from one of the most famous essays about negotiation I'll leave a link for it it's from patio 11 and he tells a story of what if I told you that you want you you have to recite 10 minutes of poetry standing on one leg to an empty room and if you do that I'm going to give you $50,000 you would be stupid not to do it it's a little bit of pressure a little bit of preparation you need to do and yet if you do it 10 minutes of time you say some poetry and then you're going to have a huge sum of money waiting for you that is the analog to negotiation if you're able to come in with a script a little bit of preparation it might be uncomfortable I'll acknowledge that but the outcome could be so beneficial for you if you're able to persist a lot of people I talk to they think that okay we're already so well paid in the tech industry for me and that was certainly true I had never seen that much money in my life when I was 22 years old I landed this job right so a lot of people think in Tech that if I negotiate I am ungrateful for what I have I'm already so handsomely paid but the rule of capitalism is that companies will pay you as little as they possibly can to get you to do the work for them and if you just ask in a polite way in a way that is framed as a win-win you could actually come to a offer a negotiation where you're able to have meaningfully more money and the company is also happy with with the outcome so I'm going to share a few tidbits of this of negotiation that have helped me negotiate more than $500,000 of a increase in a single offer and there's a lot more I could talk about I'll leave a link for the course in the description but I'll share three quick tidbits number one and this is something you've probably heard is don't share a number first um when you are revealing a number at the beginning of a negotiation you're effectively showing your hand and the company can then take advantage of you so wait until you have gotten confirmation that the company wants to give you an offer and then let them give an offer first that's rule number one rule number two is make the negotiation multi-dimensional this is where in the tech industry we have a huge Advantage where your compensation is not just your salary you probably will have a salary a annual bonus Equity you might have PTO like paid time off these are all opportunities for you to say I want more of this and less of that and if you figure out the right combination that is how you're able to create a win-win scenario and finally tip number three is I want you to negotiate over email or over writing rather than verbally over the phone or in a VC call there's a huge information asymmetry between the recruiter the company and you they probably have a 100 or 1,000x more data points about what is a reasonable compensation they probably have a lot better idea frankly of the psychology that you're going through when you have the offer and that information will be used to take advantage of you and so instead of negotiating over a phone call where where you might have a lot of pressure I want you to be really deliberate about the words you're using the phrasing that you're using and put that in a email to be able to ask for what you want and if you're able to do that and you have multiple offers you have leverage I am very confident you can see a meaningful change in your total compensation with negotiation one more tactical thing I'll share is what I call closing the deal and what that means is when you have an offer that you're comfortable taking you can tell the recruiter hey I am willing to sign on the dotted line if you're able to meet me at this number and you can you know be strategic about that number it could just be a signing bonus it could be a slightly higher salary but at that point the company is clearly committed to you they've given you an offer you might have already done a little bit of negotiation so they're vested in having you come join the company and so when you have this tactic of hey I'm prepared to sign I give you my word that I will join the company if you can meet me here you will often be able to get that little bit of extra compensation at the end okay we've covered a lot at this point we've talked about how should you actually learn how to code and debug and build up those fundamental skills how can you interview to get the job that you want and once you have the job onboarding working with your manager promotion how do you succeed on the job one topic that we haven't touched on too much is about how do you balance all the things that we talked about about career growth and progression with your actual life there's so many things that you could do outside of work and those are equally or more important than what you do at work I want to spend a couple minutes sharing what I've learned what I have observed in my time in as a software engineer a lot of people think that their work life balance is dictated by their company so for example Amazon and meta to a lesser degree but Amazon and meta have pretty bad work life balance and so talked to a ton of Engineers at Amazon and they throw their hands up and say Hey you know I work at Amazon my life sucks I should expect it to suck because I work at this hardworking company I'm not going to have too much time on week nights or weekends to hang out with my family or do things I like and that's just simply not true you shouldn't accept that just because your company has uh you know a harder work culture that that means that you have to give up your free time a lot of your ability to balance work in life is going to be dependent on number one your team and what are the mechanics of your team in terms of on call and workload and you can shape that by the way if you're senior enough you can actually share opinions and talk about how to um make it more tolerable and secondly it'll also be dictated by you what are you willing to do and you can make a choice that you really want to prioritize family or non-work life and that's totally fine you may not progress in your career as much as other people but that's totally a reasonable choice to make and if you broadcast that to your manager or to your team you can calibrate and set expectations appropriately one tactic I like to use which has been super effective for me is to have a hard stop so for me it might be pickle ball or soccer or you know I like to just run around after work so I'll pick a sport and I'll tell a friend hey at 5:30 or 600 p.m. we are going to go play pickle ball I'll meet you here here at this location and there's a magical thing that happens because not only does it obviously force me to stop working but I find that during the day because I'm excited about that event and I know there's a hard stop I actually become more productive I am forced to work hard and also prioritize what do I want to achieve before this deadline and that's the second thing I wanted to communicate about work life balance is that the people who are best at having time to themselves or to their family they are really really good at prioritization they're at a tech company where things are constantly growing and breaking and new people are joining people are leaving there's always an infinite number of things to do and so your job as an engineer and working with your manager working with your team your job is to figure out what are the top few things that will actually matter what will actually move the needle and then be really clear that you're not going to spend time on all the things that might feel like work that you might feel like okay someone's asking me but they're not really that important and if you have that Crystal Clear prioritization list you'll have a much easier time balancing how many hours you're spending on the day job and you know I'll be honest that I'm not that good at maintaining work life balance especially now that I'm working on Tara which is my own company for the past two years there is a sense of I just want to push through and get everything done reply to all the emails get all the work done so you know I I definitely can't claim to be an expert at this but I do think that's another element of work life balance that it will come in phases a certain chapter of your career you might really prioritize going hard at work another chapter you might not and it could also be at the micro level where hey on week days I'm just going to focus on work I'm okay spending until 8: or 9:00 p.m. but then weekends are your sacred time where you're not going to touch your computer you're going to go outside you're going to hang out with family just be clear be deliberate about what parts of your life you really want to protect from work and where you're okay to have it bleeding over and if you have that at least you won't have the resentment that a lot of people in Tech end up having okay if you have watched all the way through the video up until here thank you for sticking around I said it at the beginning of the video that 1 hour 2our video is not going to magically make you an amazing engineer that's still true so I want you to view this video as a starting point as a jumping off point to go a lot deeper into the tech industry and really superar Char your growth I have a startup called Taro join taro.com and we've actually made F length courses that dive deep into almost every single topic that I touched on in this video and by watching that I promise you you're going to be able to avoid so many of the mistakes that people make in the tech industry you're going to be able to supercharge your growth and your career in a way that I wish I could have done earlier on my goal with this Channel and with t is just to help people thrive in Tech so I really would appreciate any feedback you have leave a comment about problems you have or what other videos you want to see and I'll do my best to make them thank you so much for watching and I'll see you in the next one
