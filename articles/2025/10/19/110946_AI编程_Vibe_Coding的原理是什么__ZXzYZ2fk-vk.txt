Timestamp: 2025-10-19T11:09:46.699413
Title: AI编程 Vibe Coding的原理是什么？ ZXzYZ2fk-vk
URL: https://youtube.com/watch?v=ZXzYZ2fk-vk&si=liqju_5GGGwCZRux
Status: success
Duration: 10:48

Description:
好的，以下是根据您提供的文本内容提炼的核心思想摘要。

### **AI 编程工具演进与 “Web Coating” 解构**

#### **一、 核心框架：从聊天机器人到全能开发代理 (AI Agent) 的进化**

1.  **初始阶段：间接文件操作**
    *   **问题：** 大语言模型（LLM）本身无法直接读写本地文件，导致程序员需要手动复制粘贴代码，效率低下。
    *   **解决方案：** 引入一个在本地运行的中间层 **AI Agent**。Agent 预置了读写文件等函数，LLM 通过向 Agent 发出指令（调用哪个函数、传入什么参数）来间接操作代码。

2.  **效率与准确性优化：`Diff` 格式与上下文感知**
    *   **`Diff` 格式：** 为避免修改一个字符就重新生成整个文件的低效和高风险，AI Agent 让 LLM 以 `Diff` 格式返回修改内容。Agent 在应用修改前会校验 `Diff` 与本地文件的一致性，保证修改的准确。
    *   **上下文感知：** 为解决 AI“犯傻”的问题，Agent 会主动收集并提供更丰富的上下文信息给 LLM，包括：项目文件结构、当前打开的文件、IDE 的语法报错、命令行输出等。这让 AI 的决策更贴近真实开发场景。

3.  **能力扩展：通过 MCP 实现部署与运维**
    *   **问题：** 代码写完后，部署、配置数据库等上线工作，传统的 AI Agent 无法完成。
    *   **解决方案：** 引入 **MCP**（可理解为 AI Agent 的插件系统）。云平台提供 MCP 服务接口，AI Agent 通过调用这些接口，获得了操作云服务器、配置数据库、部署网站等原本不具备的“技能”。

#### **二、 实现闭环：云平台工程模板的角色**

*   **挑战：** AI 不知道如何为特定云平台编写专用代码，尤其是对新发布的云服务一无所知。
*   **解决方案：** 云平台提供**工程模板**，其中包含：
    1.  **预置依赖：** 适配该平台的库和配置文件。
    2.  **核心武器 - 系统提示词 (System Prompt)：** 模板内置了详细的提示词，精确指导 AI 如何为该平台生成代码、如何调用 API、如何部署等。这些提示词会自动与用户的需求合并，一同发送给 LLM。

#### **三、 “Web Coating” 完整工作流**

所谓的 “Web Coating” 指的是一个**从需求提出到云端部署的全自动化开发体验**。其流程如下：
1.  **启动：** 用户在云平台的工程模板中，向编程机器人（AI Agent）提出需求（如“帮我写一个个人网站”）。
2.  **编码：** 机器人收集 IDE 上下文、结合模板自带的系统提示词和用户需求，打包发送给 LLM。
3.  **生成：** LLM 根据丰富的上下文，生成适配该云平台的代码，并以 `Diff` 格式返回。
4.  **应用：** 机器人验证并应用 `Diff` 修改，循环此过程直到本地开发完成。
5.  **部署：** 用户发出上线指令，机器人利用 MCP 插件系统的能力，请求 LLM 生成操作指令，并调用云服务接口，自动完成数据库创建、代码部署、域名配置等上线工作。

---

### **核心观点 (Core Point)**

AI 编程工具的终极目标并非取代程序员，而是将程序员从重复的编码和部署工作中解放出来，让他们能更专注于创造性的思考和产品构想的起点。

### **总体框架 (Overarching Framework)**

本文描述了 AI 编程工具通过**“AI Agent”**为核心，不断叠加新能力模块的演进框架。它从**基础的文件操作能力**开始，通过集成**IDE 上下文**获得了**环境感知能力**，再借助 **MCP 插件系统**扩展出**与外部系统（云平台）的交互能力**，最后利用**工程模板与系统提示词**解决了**平台适配性**问题，最终形成了一个从本地编码到云端部署的、一气呵成的自动化开发闭环。

### **概念关系图 (Mermaid Conceptual Map)**

<Mermaid_Diagram>
graph TD
    subgraph "用户与AI交互层"
        A["用户需求\n(例如: '帮我写个网站')"] --> B["编程机器人 (AI Agent)"];
    end

    subgraph "AI Agent 核心能力演进"
        style C fill:#FFE4B5,stroke:#333,stroke-width:2px
        style D fill:#B0E0E6,stroke:#333,stroke-width:2px
        style E fill:#98FB98,stroke:#333,stroke-width:2px
        
        B -- "打包请求" --> F{"大语言模型 (LLM)\n[决策大脑]"};
        
        subgraph "第一层: 文件操作"
            C["读写文件函数\n(read_file, write_file)"];
        end
        
        subgraph "第二层: 上下文感知"
            D["IDE环境信息\n(文件结构, 报错, 命令行)"];
        end

        subgraph "第三层: 外部交互"
            E["MCP插件系统\n(云服务操作技能)"];
        end
    end

    subgraph "云平台集成层"
        style G fill:#FFDAB9,stroke:#333,stroke-width:1px
        G["云平台工程模板"] -- "提供" --> H["系统提示词\n(平台规则与API用法)"];
        G -- "提供" --> I["预置库与配置"];
        J["云服务 (数据库, 服务器等)"] -- "通过MCP暴露接口" --> E;
    end

    subgraph "完整工作流"
        C -- "能力" --> B;
        D -- "信息" --> B;
        E -- "能力" --> B;
        H -- "注入" --> B;
        
        F -- "返回 Diff 格式代码" --> B;
        B -- "应用修改" --> K["本地代码文件"];
        
        F -- "返回 MCP 操作指令" --> B;
        B -- "执行部署" --> J;
        J -- "最终产出" --> L["成功上线的网站"];
    end

    subgraph "核心结论"
        style M fill:#F0F8FF,stroke:#00008B,stroke-width:2px
        M["AI取代的是'敲键盘的手'<br/>而不是'写下想法的心'"];
        L --> M;
    end

    style A fill:#D2B4DE,stroke:#333,stroke-width:2px
    style B fill:#F5DEB3,stroke:#333,stroke-width:2px
    style F fill:#ADD8E6,stroke:#333,stroke-width:2px
    style K fill:#FFFACD,stroke:#333,stroke-width:1px
    style L fill:#90EE90,stroke:#333,stroke-width:2px
</Mermaid_Diagram>

Content:
你是一个程序员今天你又又又又刷到一个视频说程序员很快就要被AI取代了这次的理由是Web Coating要来了好气啊我堂堂一个打了8年工的劳马农帮了前后三个老板实现财富自由你发明个名词就能比我更回拉摸不对更会写代码了今天咱们就来看看AI到底是怎么写程序的Web Coating又到底是什么说到底不管多厉害的大羽毛形本质上也就是一个聊天机器人他除了能回复我们发过去的消息其实什么也做不了一开始为了让他帮忙写程序程序员们就把代码复制进聊天框等AI回去再把他的回复粘贴回来调试就这样来来回回的复制粘贴显然非常的麻烦而这种限制的本质是大羽毛形只能回复消息他自己根本没有办法直接读取我们本地的文件于是程序员们意识到可以在AI模型和代码之间增加一个中间层AI agentAI agent是运行在本地的一个小程序为了让AI agent可以写程序程序员们会提前给他写好一些韩数比如read file,read file,list file这类用来读写文件操作的韩数然后AI agent会把这些韩数的名字和用法连同用户的提示词打包一起发给大羽毛形模型看完之后就能回复一条消息告诉Agent你来帮我调用这个韩数传这个参数这么一来他就能间接的完成修改文件的动作了在VS code中AI变成插件就相当于一个AI agent他们会通过VS提供的接口接入读写代码的能力有些AI变成插件默认不仅能读写本地文件而且还能留来网页只相中端命令等等等等有了这些文件的操作能力AI才算真正能动手改代码那他到底是怎么改的呢最直接的做法就是让AI直接收成一份改完以后的完整代码但问题也很明显那怕我们只改动了一个字服AI也得把整份文件从头到尾都生长一遍不仅效率低浪费偷肯而更要命的是一旦文件太长了它就很难百分之百还原那些没有动过的地方一不小心就引入了Bug所以绝大多数AI变成工具都会让大模型以Diff的格式来回复修改的内容简单来说Diff格式就是在描述哪个文件的地几行需要被替换成什么新的内容这种格式其实已经非常古老了像Geat,SVN这些版本控制工具早就一直在用了所以对应了算法也已经非常的成熟而大语言本身在训练的时候未进去是整个互联网的文本也就包括了大量的Diff格式内容所以生成的回复也就更加的靠谱当然了大语言模型再聪明它的回复内容也不是百分之百准确的所以AI agent在接收到了Diff之后会先检查一下Diff里面引用了原始代码跟当前文件是不是一致的如果不一致说明模型理解错了商下文那就重视一次这样一来我们就可以尽可能的保证模型修改的对象确实是我们正在编辑的大方文件于是我们就得到了一个相对稳定靠谱的AI变成工具但人们很快就发现AI其实挺笨的经常会犯一些非常明显的错误比如说VsCo的明明已经高量了与法错误AI还要改来改去好几回才能改对又或者它想改的文件其实根本就不存在于是聪明的程序员再一次意识到那我们干脆就把ID一离那些信息也疑病发给大模型不就行了吗所以说现在大多数AI变成工具除了能读写文件之外还会主动收集很多上下文信息比如说当前项目的文件结构用户正在查看的文件名打开了哪些文件命令行输出的内容甚至连当前的时间也带上了总之只要信息不是太长不是太敏感就尽量的C给大员模型这样以来AI模型就能更好的理解现场它看到的东西跟用户几乎一模一整个变成过程自然也就流畅多了到了这一步程序员们终于成功造出了一个能自己写程序的AI工具不会写代码的普通人也只要输入提示词就能让AI坑持坑诗的把程序搭出来听起来是不是快要被取代了当然事情没有这么简单程序写完了在本地跑得挺好那么要怎么上线呢不属前端配置后台服务建立数据库等等等等哪一项不是麻烦事而这些事情AI变成机器人其实都干不了于是为了实现彻底被取代的梦想聪明的程序员又开始想办法了那就让AI变成机器人也能支持MCP吧你可以把MCP理解成变成机器人的插件系统就像给榴栏器安装的扩展程序一样MCP让AI变成机器人也能安装新的技能包去操作那些它原本不懂的东西比如说操作云服务器不属网站配置数据库之类的操作如果你想了解MCP的技术细节可以看看我做的这期视频十分钟带你了解AZENTA和MCP的方方面面现在越来越多的云平台都推出了自己的MCP server用来接入变成机器人帮它完成这最后的一部部署比如说管理数据库上船进太往业创建云含书配置域名等等等等都可以通过MCP来完成我们只需要像写程序一样用提示词告诉变成机器人帮我把这个网站部署一下它就能自动使用MCP中提供的含书完成部署听上去很完美对不对但其实还有一个关键点很多人都忽略了就是我们刚刚让AI帮我们部署网站比如说创建数据库这相当于是管理员全线完成的操作可是上线之后网站本身也需要访问这些资源比如要自己读写数据库而这个时候AI助手已经不在场了所有的操作都必须靠网站自己的代码来实现那么问题来了每个云平台的API都不一样AI不可能写出一个在所有的云平台都通用的代码所以我们在最开始提示AI写代码的时候就必须明确地告诉他这个程序会部署在哪个平台上所以请用对应的接口来写而更麻烦的是有些云服务是在AI模型训练完之后才发布的那些AI其实根本不知道这些服务的存在这个时候我们就得手动地告诉他这个平台有哪些服务应该怎么调用用什么库有什么依赖非常非常的麻烦所以说为了省市除了MCP Server云平台通常还会提供一套完整的工程模板这个模板一般会把访问云服务利用到的库都倒入进来配置好必要的配置文件而其中最最重要的是它给AI编成机器人配好了提示词提示词里面会轻轻处处地写着代码应该长什么样子怎么访问数据怎么部署甚至怎么去读线上的文档这些提示词会在你写代码的过程中自动和用户的promp在一起发给AI模型这样AI就自动知道应该怎么生成一段适配云服务的代码吗最后我们把这一整套服务串联起来看一眼你打开了一个云服务的工程模板对编程机器人说帮我写一个个人网站于是编程机器人就开始工作了他会自动收集ID一里面的各种信息比如说文件读写的接口当前的报错已经打开的文件命令行的内容等等等等同时他还会读取工程模板中自带的提示词用户需求模板提示词环境信息被一起打包发送给AI模型模型根据这些提示词知道这个程序会最终部署在某个云服务上面于是就选用了对应的接口来写代码写好了代码会以地负的格式反回给编程机器人编程机器人会先验证这些地负修改是否和本地的文件匹配如果不匹配就重视如果匹配了就通过内置的文件读写韩束应用这些修改这个过程可能会来来回回好级轮直到整个网站可以在本地运行接下来用户让编程机器人上线已经写好了网站因为我们在一开始就配置好了云服务的MCP所以这个时候编程机器人就会把MCP提供的韩束也疑病发给AI模型AI模型通过返回特定格式的消息引导编程机器人调用MCP服务MCP服务再去操作云服务完成部署建库配置域名这些最后的上线工作于是一个完整的从编码到部署的开发流程就这么自动地跑完了至少对一些简单的项目来说真正是下了零基础写代码零基础上线认为这种让AI心领神会一气合成的体验或许就是大家所说的外部口顶吧于是程序员们不仅成功地把自己取代掉了还学会了外部口顶这个新名词真是可惜可恶可惜可恶程序员真的被取代了吗我不这么认为我们花了这么久的时间终于打造出了一个足够聪明的工具我们拆开自己的技能打包成了提示词甚至连部署的流程都交会了AI好像自己不需要现在每一个EF-L里面反复的征寨如果说程序是人意志的延伸那么今天的AI编程不是让人退出这个过程而是把人送回他真正的起点回到那个有想法愿意创造的自己就像那个某天零光一闪第一次想到让AI通过AZN的自己写程序的程序员一样程序员真的被取代了吗也许吧但是他取代的是我们敲键盘的手而不是写下第一个想法的心这里是程序罗网我们下期再见
