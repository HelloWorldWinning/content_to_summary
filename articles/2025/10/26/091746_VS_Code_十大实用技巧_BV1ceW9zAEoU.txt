Timestamp: 2025-10-26T09:17:46.393927
Title: VS Code 十大实用技巧 BV1ceW9zAEoU
URL: https://b23.tv/jQrxc3J
Status: success
Duration: 10:22

Description:
好的，这是根据您提供的文本内容提炼的核心思想摘要。

### **VS Code 十大实用技巧摘要**

1.  **时间线 (Timeline) 功能**: 无需依赖 Git，即可查看并回溯文件的每一次保存历史，轻松找回未提交的修改。
2.  **智能单词/代码块选择**: 使用 `Shift+Alt+方向键` (Windows) 或 `Ctrl+Shift+方向键` (Mac) 按词或代码块进行快速选择，比逐字选择更高效。
3.  **条件断点 (Conditional Breakpoints)**: 在调试时设置一个只有在满足特定条件（表达式为真）时才会触发的断点，从而实现更精准的 Bug 定位。
4.  **利用正则表达式进行查找替换**: 在“查找与替换”功能中启用正则表达式，并通过捕获组（如 `$1`, `$2`）对文本进行复杂的批量转换和重构。
5.  **管理捆绑的 Copilot 扩展**: 对于不希望使用默认捆绑的 Copilot 功能的用户，可以直接在扩展视图中将其禁用或隐藏。（注：文本提到此方式可能在未来版本中改变）。
6.  **跳转到最后编辑位置**: 使用快捷键 `Ctrl+K Ctrl+T` (Windows) 或 `Command+K Command+T` (Mac) 可以快速将光标定位到最近一次修改代码的位置。
7.  **粘性滚动 (Sticky Scroll)**: 启用该功能后，在滚动长文件时，当前代码所在的类或函数定义会固定在编辑器顶部，帮助开发者始终明确代码上下文。
8.  **在资源管理器中快速搜索文件**: 无需使用全局搜索，直接在文件资源管理器面板中输入字符即可快速筛选和定位文件。
9.  **浮动编辑器窗口**: 将任意编辑器标签页拖出主窗口，使其成为一个独立的、可同步编辑的新窗口，极大地方便了多显示器用户的工作流。
10. **自定义代码片段 (Code Snippets)**: 通过创建全局或项目级的代码片段，可以用简单的几个字符快速生成常用的代码模板（如一个完整的控制器结构），大幅提升编码效率。

---

### **核心要点**

掌握 VS Code 中这些实用但可能被忽视的技巧，可以极大地提升开发者的编码与调试效率。

### **内容总体框架**

本文通过“十大技巧”列表的形式，系统性地从**代码导航与编辑**、**高级调试与文本处理**、**工作区与视图管理**以及**自动化效率工具**四个维度，全面展示了如何深度利用 VS Code 的内置功能来优化开发工作流。

### **核心概念图**

<Mermaid_Diagram>
graph TD
    A["VS Code 十大高效技巧"]

    subgraph "编辑与导航"
        B["2. 智能选择"]
        F["6. 跳转到最后编辑位置"]
        G["7. 粘性滚动"]
    end

    subgraph "调试与处理"
        C["3. 条件断点"]
        D["4. 正则表达式替换"]
    end

    subgraph "视图与管理"
        A1["1. 时间线 (本地历史)"]
        H["8. 资源管理器内搜索"]
        I["9. 浮动编辑器窗口"]
    end

    subgraph "工具与自动化"
        J["10. 代码片段"]
        E["5. 管理Copilot (扩展管理)"]
    end

    A -- "提升编码效率" --> B
    A -- "提升编码效率" --> F
    A -- "提升阅读效率" --> G
    A -- "精准调试" --> C
    A -- "数据处理" --> D
    A -- "代码回溯" --> A1
    A -- "快速定位" --> H
    A -- "多屏协作" --> I
    A -- "代码复用" --> J
    A -- "环境配置" --> E

    style A fill:#4CAF50,color:#fff,stroke:#333,stroke-width:2px
    style B fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style C fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style D fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style E fill:#FFEBEE,stroke:#D32F2F,stroke-width:1px
    style F fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style G fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style H fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style I fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style J fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
    style A1 fill:#E3F2FD,stroke:#1976D2,stroke-width:1px
</Mermaid_Diagram>

Content:
VS Code 简直爱不是手今天为了庆祝时代VS Code技巧这个特别时刻我甚至特地穿上了纪念剃序第五个功能绝对是我的最爱虽然他们即将取消这个特性所以趁现在好好利用它吧让我们开始吧第一项假设你正在添加类似以下代码当view model is subscribed为初10点击保存按钮但在某个疯狂的瞬间你决定将is subscribed状态改为false并再次点击了保存按钮如果是较大规模的改动你可能需要依赖get提交记录来辅助开发但如果你已经保存了代码却尚未提交此刻可能正义获我该怎么办VS Code有个非常实用的小功能若要打开命令面板只需进入view找到贪婪功能即可操作如下您可以看到所有文件保存事件都会显示在此处您甚至可以在未实际打开提交记录的情况下点击返回查看完整历史记录您也可以在资源管理器试图底部打开时间轴首要呈现的是时间轴试图接下来是第二项假设现在你需要选中某些文本通常情况下您会像这样使用Shift键 加右键头键这种方式会将选择范围限制为每次一个字符有更巧妙的处理方法在Mac上需要按Control加Shift组合键而在Windows电脑上则使用Shift加Out组合键但如果按住Control加Shift在按右键头键就能选中项目中的大段代码快就像这样您可以持续向右移动也可以持续向左移动这时的选择内容变得更加轻松变结这是一种与一选择注意别按上下键否则会不小心重复你的代码型从技术角度看这倒也是个实用小技巧对吧第二项是智能选择接下来是第三项让我为你展示一个非常实用的调适功能而我准备用C-Sharp开发套件来干这事毕竟我是个喜欢自逃苦吃的受虐狂我正在进行的是设置一个新的条件断点我们可以随心所欲的点写任何代码因此我们将在Ease of Scrubed为Foss处设置条件断点因为我们不希望这种情况发生对吧按下回车键后现在我们已经设置了一个小型条件断点我来演示一下具体如何实现我们这样运行应用程序程序就会启动当我们点击杀心时由于Ease of Scrubed标志为为处断点就不会被触发让我们先停止应用程序如果我们像这样将其改为Foss再次运行应用时由于该用户为订阅我们将会在这行命中有条件断点第三项是条件断点接下来是第四项现在假设你在这里的内中复制沾贴了一些势力罪算数据这可不妙但你可以在查找命令中打开替换功能进行操作现在这里显示没有结果这是一个可供使用的证则表达式势力并将他们替换为证则表达式中实际匹配到的分组内容如果启用证则表达式这里会显示找到两个匹配项中的一个我们可以像这样进行替换操作现在我们有一些属性看看这个在查找替换功能中您可以通过证则表达式分组实现数据转换处理第四项设计证则表达式纹本处理接下来是第五项他们正打算从VS Code中移除这个功能设想你不想在VS Code版本中使用这个Copilot功能因为它被默认 魂保安装了您只需前往扩展功能见面找到Gigab Copilot并点击现在即可但你会发现即使已经卸在了扩展程序它的残留痕迹依然存在你这是被强制绑定了Copilot功能我觉得隐藏Copilot可能会让它消失好的隐藏Copilot终于能轻敬一会儿了然而在后续版本中他们移除了彻底关闭Copilot功能的选项最好的办法就是从这里彻底关闭它第五项是现在Copilot我这么说 肯定要被封号了接下来是第六项设想你粗略的编辑一个文件时是这样的场景Public BoLight VideoGigab Set准备就绪现在我在应用里这样四处点击却记不清刚才操作了哪些步骤我上次编辑的内容在哪里如果我按Command K在按Command Tew就会跳转到我最近一次修改的位置这比到处点击摸索要方便的多在Windows系统中相应的快捷键是Ctrl加K然后按Ctrl加Tew第六项是跳转到最后一次变成编辑的命令接下来是第七项现在这个功能特别实用尤其对于像我这样使用小屏幕设备的用户来说前往设置其用年性滚动功能操作如下SossoStixCrow选项默认情况下此功能处于激用状态点击Go号现在如果你在VS Code中打开一个大文件并滚动流览编辑器会让内容保持在屏幕顶部不动在Honkontroller中定义控制器类极其方法这种模式将持续循环运行这相当使用始终清晰掌握文件中的当前位置其用年性滚动第七项是年性滚动效果接下来我们来看第八项假设你想在VS Code中查找文件但只记得部分文件名在Match上可以使用Kenture加Shift加F组合件Windows上则按Kenture加Out加F就能直接在左侧搜索矿中输入文件名进行查找你可以直接这样操作回到Kentroller通过Type-C 切换就能用键盘快速定位文件和应用中的特定模块位置看这个相当酷炫现在我们来看看Match Controller部分看这个无需触碰鼠标我们即可自如流览各项内容第八项功能是资源管理器试图搜索非常使用接下来是第九项在VS Code中多数用户以为它只是个单窗口程序但是实并非如此你可以又建点即任意元素将其谈出拖缀到新窗口就像这样操作这会生成一个全新的独立的VS Code实力窗口你完全可以将它放在另一块屏幕上使用现在如果你又建点即选择复制到新窗口并将第二个窗口拖到此处你会发现这两个窗口实际上是保持同步的当你进行修改时First Name 保锡维持时显示在这里就像模法一样你打字的同时就能看到效果你可以NAS1同时还能在两个窗口中定型输入这操作相当酷选第九项是浮动编辑器窗口多显示器用户的符音接下来是第十项让我们来聊聊一个非常使用的功能代码片段打开命令面板执行代码片段操作配置代码片段新建全局代码片段文件然后你会得到一个这样的文件这是我之前准备好的一个势力我们可以删除所有这些配置然后沾贴到这里我们提供的是一段点Net MVC控制器的代码片段这些工具非常使用能帮您节省大量时间还能在团队中共享使用例如如果我们要在这里新建一个控制器Test Controller CS只需要输入Controller Recycle就能快速生成控制器搅手架于是我们得到了一个完整的控制器搅手架就像西日经典的点Net MVC搅手架那样第十个功能是代码片段别小看这些感谢您的观看VS Code时大使用技巧我的咖啡快喝完了希望他们别把VS Code搞砸了毕竟我真的很喜欢用VS Code别忘了订阅频道或许更多开发者干货内容这才是我们真正想要的感谢收看
