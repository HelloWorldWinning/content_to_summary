Timestamp: 2025-10-12T08:35:34.461273
Title: RAG已死？Claude Code核心开发者抛弃RAG BV1iC4LzpE7p
URL: https://b23.tv/vwzfRki
Status: success
Duration: 4:14

Description:
以下是对文本内容的总结和提炼：

### 核心思想总结与大纲

#### I. 传统AI知识检索方法 (RAG) 的局限性
1.  **挑战**: 处理海量文档，要求AI快速准确回答。
2.  **主流方案**: 检索增强生成 (RAG) 技术。
    *   **流程**: 文档切分 → 嵌入 (向量化) → 存储于向量数据库。
    *   **检索**: 用户问题 → 向量化 → 向量数据库匹配 → 提取相关段落 → AI生成答案。
    *   **核心信念**: AI必须被喂食完美的结构化信息才能高效工作。
    *   **本质**: 构建复杂的外部信息结构。

#### II. 顶级AI开发者Boris提出的反直觉新范式
1.  **观察**: 最顶尖的AI开发者正在抛弃复杂的RAG玩法。
2.  **Boris (Cloud核心开发者) 的方法**: “智能体式检索”。
    *   **核心**: **完全不做任何索引** (不使用向量数据库，不搞复杂RAG)。
    *   **理念**: 相信AI自身的智能。
    *   **实践**:
        *   提供最基础、最朴素的文件操作工具 (如几十年前的 `grep` 命令)。
        *   提供一份“地图”或“目录”文件 (文中称 LMTX 文件)。
            *   内容: 仅包含文档链接地址和精心编写的**内容描述**，不含原文。
            *   关键: 描述需足够好，让AI准确判断。

#### III. “智能体式检索”的工作原理
1.  AI收到问题后，首先阅读“地图”文件。
2.  根据文件描述，AI自主判断并选择可能包含答案的文件。
3.  AI调用基础文件抓取工具，将选定文件捞出。
4.  如信息不足，AI会像人一样在文件内部使用关键词搜索 (如 `grep` 工具)。
5.  **类比**: 就像一个真人在电脑上自行查找资料。

#### IV. 基准测试结果与验证
1.  **测试者**: NASMODY (NASGraph 开发者)。
2.  **测试方法**:
    *   **传统RAG**: 将所有文档索引到向量数据库。
    *   **智能体式检索**: 仅提供描述性 LMTX 文件和简单抓取工具。
    *   **暴力灌输**: 将300万个token文档直接塞给大模型。
3.  **结果**: 智能体式检索 (第二种方法) **效果最佳**，且构建和维护成本远低于传统RAG。
4.  **结论**: “地图”中的**高质量描述**是成功的关键。

#### V. 思维模式的深刻转变
1.  **过去观点**: AI不够聪明，工程师必须耗费大量精力为AI构建笨重的外部结构化信息系统。
2.  **现在观点 (随着大模型智能化提升)**: 与其耗费力气搭建外部笨重系统，不如将精力投入到如何更好地**赋能AI自身的智能**上。
3.  **核心理念**: 提供好的工具和线索，信任AI，让它自己探索、思考、发现。
4.  **类比**: 教孩子如何使用图书馆 (赋能其探索)，而非强迫其背诵所有知识卡片 (外部结构化喂食)。

### 核心结论 (一句话)

顶级AI开发者正从为AI构建复杂外部结构化的传统路线转向，通过提供精良工具、高质量线索并信任AI自身智能，以实现更高效、更自主的知识探索与检索。

### 核心框架

AI知识检索的范式转变：从外部结构化到内部智能驱动 (Intelligence-First, Structure-Supportive)

### Mermaid 概念图
<Mermaid_Diagram>
graph LR
    subgraph "传统AI知识检索范式 (RAG)"
        A["挑战: 大量文档高效查询"] --> B("检索增强生成 (RAG) 标准方案");
        B --> C("文档切分");
        C --> D("嵌入 (文本向量化)");
        D --> E("向量数据库");
        E -- "信息索引与存储" --> F("构建复杂外部结构化系统");
        F -- "核心信念" --> G("AI需完美结构化信息才能工作");
    end

    subgraph "新AI知识检索范式 (Boris)"
        H["顶级AI开发者的反直觉观察"] --> I("智能体式检索 (Agent-based Retrieval)");
        I -- "颠覆性策略" --> J("完全不做任何索引");
        I -- "核心理念" --> K("信任AI自身的智能");
        I -- "赋能工具" --> L("提供基础文件操作工具 (e.g., grep)");
        I -- "赋能线索" --> M("提供内容地图文件 (LMTX)");
        M -- "关键要素" --> N("高质量文档描述");
        N -- "引导" --> O("AI自主判断相关文件");
        O -- "执行" --> P("AI调用工具抓取文件");
        P -- "深入探索" --> Q("AI内部关键词搜索");
    end

    subgraph "基准测试与验证 (NASMODY)"
        R["基准测试: NASGraph产品问题"] --> S("方法1: 传统RAG (完整索引)");
        R --> T("方法2: 智能体式检索 (LMTX + 工具)");
        R --> U("方法3: 暴力灌输 (全部文档给大模型)");
        S -- "效果" --> V("不如预期 (复杂且维护难)");
        U -- "效果" --> W("效果平平");
        T -- "效果最佳" --> X("最优方案");
        X --> Y("确认: 高质量地图描述是关键");
    end

    subgraph "思维模式转变与未来趋势"
        G -- "旧有信念" --> Z("过去: AI笨拙，工程师需重构外部结构");
        K -- "新的认知" --> AA("现在: AI自身智能，工程师需赋能其探索");
        Z -- "对比" --> AA;
        AA -- "预示未来" --> BB("AI工程方向: 智能优先，结构为辅");
    end

    style A fill:#D6EAF8,stroke:#3498DB,stroke-width:2px;
    style B fill:#AED6F1,stroke:#3498DB;
    style C fill:#D6EAF8,stroke:#3498DB;
    style D fill:#D6EAF8,stroke:#3498DB;
    style E fill:#D6EAF8,stroke:#3498DB;
    style F fill:#85C1E9,stroke:#3498DB,stroke-width:2px;
    style G fill:#EBF5FB,stroke:#3498DB,stroke-dasharray: 5 5;

    style H fill:#D1F2EB,stroke:#2ECC71,stroke-width:2px;
    style I fill:#A3E4D7,stroke:#2ECC71,stroke-width:2px;
    style J fill:#FADBD8,stroke:#E74C3C,stroke-width:1px;
    style K fill:#D4EFDF,stroke:#2ECC71;
    style L fill:#D1F2EB,stroke:#2ECC71;
    style M fill:#D1F2EB,stroke:#2ECC71;
    style N fill:#82E0AA,stroke:#2ECC71,stroke-width:2px;
    style O fill:#D1F2EB,stroke:#2ECC71;
    style P fill:#D1F2EB,stroke:#2ECC71;
    style Q fill:#D1F2EB,stroke:#2ECC71;

    style R fill:#FBE7D6,stroke:#F39C12,stroke-width:2px;
    style S fill:#FDEBD0,stroke:#F39C12;
    style T fill:#E8F8F5,stroke:#2ECC71,stroke-width:2px;
    style U fill:#FDEBD0,stroke:#F39C12;
    style V fill:#FFB6C1,stroke:#E74C3C;
    style W fill:#FFB6C1,stroke:#E74C3C;
    style X fill:#82E0AA,stroke:#2ECC71,stroke-width:2px;
    style Y fill:#D4EFDF,stroke:#2ECC71,stroke-width:1px;

    style Z fill:#FADBD8,stroke:#E74C3C,stroke-dasharray: 5 5;
    style AA fill:#D4EFDF,stroke:#2ECC71,stroke-dasharray: 5 5;
    style BB fill:#A9DFBF,stroke:#2ECC71,stroke-width:2px,color:#333;

    linkStyle 0 stroke:#3498DB,stroke-width:1px;
    linkStyle 1 stroke:#3498DB,stroke-width:1px;
    linkStyle 2 stroke:#3498DB,stroke-width:1px;
    linkStyle 3 stroke:#3498DB,stroke-width:1px;
    linkStyle 4 stroke:#3498DB,stroke-width:1px;
    linkStyle 5 stroke:#3498DB,stroke-width:1px;
    linkStyle 6 stroke:#2ECC71,stroke-width:1px;
    linkStyle 7 stroke:#2ECC71,stroke-width:1px;
    linkStyle 8 stroke:#E74C3C,stroke-width:1px;
    linkStyle 9 stroke:#2ECC71,stroke-width:1px;
    linkStyle 10 stroke:#2ECC71,stroke-width:1px;
    linkStyle 11 stroke:#2ECC71,stroke-width:1px;
    linkStyle 12 stroke:#2ECC71,stroke-width:1px;
    linkStyle 13 stroke:#2ECC71,stroke-width:1px;
    linkStyle 14 stroke:#2ECC71,stroke-width:1px;
    linkStyle 15 stroke:#F39C12,stroke-width:1px;
    linkStyle 16 stroke:#F39C12,stroke-width:1px;
    linkStyle 17 stroke:#2ECC71,stroke-width:2px;
    linkStyle 18 stroke:#F39C12,stroke-width:1px;
    linkStyle 19 stroke:#E74C3C,stroke-width:1px;
    linkStyle 20 stroke:#E74C3C,stroke-width:1px;
    linkStyle 21 stroke:#2ECC71,stroke-width:2px;
    linkStyle 22 stroke:#2ECC71,stroke-width:1px;
    linkStyle 23 stroke:#2ECC71,stroke-width:1px;
    linkStyle 24 stroke:#2ECC71,stroke-width:1px;
    linkStyle 25 stroke:#2ECC71,stroke-width:1px;
    linkStyle 26 stroke:#2ECC71,stroke-width:1px;
</Mermaid_Diagram>

Content:
归谷顶级AI变成工具Cloud 扣着的核心开发者Boris提出了一个非常反直的减手方式完全不做任何所以而是采取更原始的方法这个方法彻底并记了所谓的软格路线这个视频我画三分钟给大家想一讯介绍一下首先我们来做一个思想实验想想想前面有几百万页的技术文档相当于一个小型突如管现在你要让一个AI整体能快速转确的回答关于这些文档的任何问题你会怎么做我想大部分人的第一反应肯定是得先整理这些资料就像我们整理突如管一样在AI的世界里面这些整理的流程通常就叫做软格也就是减所增强深沉寂数具体怎么做就是先把这几百万页的文档切成一个个小段落然后每个段落都用算法翻译成一串特殊的数字这个过程叫做欠入最后把所有这些数字都放进一个叫像亮数据库的东西里面当用户提问时AI就把问题也变成一串线数字然后去数据库里面找纳仙和它最像的数字把对应的原文断乱捞出来再结合这些资料来回答你这一套流程就是目前AI减所领域的标准答案它背后是一种信念我们必须为AI各简直完美的结构化了信息系统它才能好好地工作但是种种既向来看现在最顶尖的一批AI开发者正在抛弃这种复杂的玩法当串的核心开发者Less Martin在最近的一次深度访谈里面就分享了一个惊人的观察它发现像Sopebian公司开发Cloud Code的大神Boris他们做代码减所的时候采取了一种截然不同的方法就是完全不做任何所以你没有听说他们不搞什么相量数据库不搞复杂的软格流程他们用的是一种更简单甚至可以说是更原始的方法叫做智能体视减所这什么意思呢说白了就是他们不再废进新司的去为AI搭建一个精美的预处理好的知识供电参加相反他们选择相信AI本身的智商他们做的事情非常简单低他们不见所引苦而是给AI提供最基础最普速的文件操作工具原文里面提到一个词的Grant这其实就是陈续元在几十年前就在用了一个超简单的文本搜索命令第二他们会激行准备一份地图或者说木路在访谈里面这个被成为LMTX的文件这个文件里面没有原文案只有每个文党的链接地址和一段写的特别好的内容描述然后就没有然后工作去开始了AI拿到一个问题它不会去一个现成的数据库里面搜索它会先去读那个地图根据文件描述自动动脑子判断嗯这个问题呢答案可能藏在ACF这三个文件里然后它会自己调用那个简单的文件抓取工具把这几个文件捞过来看如果信息不够呢在有Graph这样的工具在文件内部进行关键词的搜索就像一个真正的人在电脑上去找资料一样NASMODY自己也特别好奇啊这两种方法到底哪一种更好呢于是它做了个基准测试用了三种方法去回答关于自家产品NASGraph的问题首先是传统方法就是把所有的文档都所引到相量数据库里面搞一套完整的软的第二就是智人体方法就是刚才说的只给一个在描述的LLMTEC文件和一个简单的抓取工具第三是暴力方法干脆把全部300万个头盆的文档直接塞给大模型结果呢你三种的效果出其好的是第二种那个最简单的智人体是搜索它的效果不仅好而且各件和维护起来比第一种方法简单太多太多了关键就在于那份地图里的描述要写的足够好让AI能够准确的判断所以你看这一背后其实是一种深刻的思维的变化过去我们认为AI不够聪明所以这些工程师必须把所有东西都结构化了味道它嘴边工作重新是构建外部的结构而现在随着大模型本身越来越智伦了顶级玩家的思路变成了与其花那么多力气去搭建一个笨重的外部系统不如把力气的花在如何更好的复轮AI自身的智伦上我们只需要给它足够好的工具和线索然后相信它让它自己去探索去思考去发现这就像教孩子学习一种是把所有支点都做成卡片让它一个一个去背另外一种的是教它如何使用突出馆然后放手让它自己去熬油这个智伦是与结构的理念显然已经预示了未来AI工程的一个重要方向
