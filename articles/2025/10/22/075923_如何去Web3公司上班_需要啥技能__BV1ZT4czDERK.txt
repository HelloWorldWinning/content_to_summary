Timestamp: 2025-10-22T07:59:23.884917
Title: 如何去Web3公司上班，需要啥技能？ BV1ZT4czDERK
URL: https://b23.tv/Yx748Um
Status: success
Duration: 12:12

Description:
好的，这是根据您提供的文本内容提炼的核心思想摘要。

### **Web3求职转型核心指南**

#### **一、 Web3行业现状与机遇**

*   **市场规模**: 全球有超过14,000家Web3企业，提供数万个开发岗位，从业者已超2000万。
*   **地区分布**: 美国（31%）和欧洲（20%）是主要市场，中国仅占3%。
*   **薪资水平**: 亚洲Web3开发者平均月薪约为4.8万人民币（2024年数据）。
    *   前端：2.2万 - 4万
    *   后端：3.5万 - 6万
*   **技术生态**: **优先学习以太坊生态**，其岗位需求占比超70%，技能可复用于Polygon、Avalanche等兼容链。

#### **二、 核心岗位转型技能栈**

1.  **智能合约开发 (新人首选)**
    *   **核心技能**:
        *   **Solidity语言**: 精通 `mapping` (及其遍历实现)、`struct`、`modifier` (权限控制)、`event`。
        *   **ERC标准**: 深入理解 `ERC20` (如 `transferFrom` 逻辑) 和 `ERC721` (如 `mint` 和元数据绑定)，了解 `ERC1155` 是加分项。
        *   **开发工具**: 掌握 `Hardhat` (推荐) 或 `Truffle`，熟练进行编译、部署（到测试网）、测试（写脚本）和Debug。
    *   **软技能 (关键)**:
        *   **源码阅读**: 能读懂主流项目（如Uniswap）的核心合约，理解其设计思路。
        *   **Gas优化**: 掌握基础优化技巧，如使用 `calldata`、打包状态变量、选择合适的变量类型等。

2.  **前端开发转型**
    *   **核心技能**: 在Web2基础上，补充学习3个Web3特有技能：
        *   **钱包交互**: 掌握 `MetaMask` 等主流钱包的API，实现用户连接、授权、地址获取、调用合约函数和处理链ID切换。
        *   **Web3库**: 掌握 `Ethers.js` (推荐) 或 `Web3.js`，实现合约实例化、调用读/写函数、处理交易哈希和状态。
        *   **DApp部署**: 掌握使用 `Pinata` 等工具将前端应用部署到 `IPFS`，实现去中心化。

3.  **后端开发转型**
    *   **核心技能**: 利用Web2后端优势，补充学习2个关键技能：
        *   **链上数据抓取**: 使用 `Alchemy` 或 `Infura` 等节点服务API，抓取区块、交易、事件等数据并存入数据库（如PostgreSQL），并掌握实时事件监听。
        *   **Web3 API开发**: 封装自有API，为前端提供安全、可控的数据服务（如获取用户NFT列表），而非让前端直接调用节点服务。

#### **三、 求职材料与简历包装**

*   **核心原则**: **项目经验为王**。Web3公司极其看重实际项目经验，而不是Web2的背景。
*   **项目准备**:
    *   **从小处着手**: 制作小而实用的项目（如简易代币兑换合约），确保能跑通核心功能。
    *   **落地证明**: 将合约部署到Goerli等测试网，保留合约地址和交易哈希作为证据。
    *   **展示代码**: 将项目代码、部署地址和交易记录上传至GitHub，并写好README。
*   **简历包装技巧**:
    *   **量化成果**: 用数据说话。例如，“优化合约，降低了10%的Gas成本”，而不是“开发了XX合约”。
    *   **技能标注**: 详细说明技能熟练度及能完成的任务。例如，“熟练使用Hardhat，能独立完成合约的测试网部署与测试脚本编写”。
    *   **附加材料**: 重点突出你的 **GitHub** 和 **技术博客**，这是Web3领域的硬通货。

---

**核心结论 (Core Point):**

**成功转型Web3的关键在于通过可验证的、已部署的实战项目来证明你的动手能力，而非仅仅罗列技术或过往的Web2经验。**

---

**内容框架 (Overarching Framework):**

该内容为Web2开发者提供了一个完整的 **“Web3职业转型路线图”**，它以市场洞察为起点，详细阐述了智能合约、前端和后端三个方向所需的核心技能栈，并最终落脚于如何通过项目驱动的方式包装简历和准备面试，形成了一个从“认知”到“学习”再到“实践”的闭环行动指南。

---

<Mermaid_Diagram>
graph TD
    A["成功转型Web3开发"] --> B{"市场认知 (Why)"};
    A --> C{"技能栈构建 (What)"};
    A --> D{"求职材料准备 (How)"};
    A --> E["求职渠道 (Where)"];

    subgraph "市场认知"
        B1["全球市场概况"]
        B2["岗位需求分布"]
        B3["薪资水平"]
        B4["主攻以太坊生态"]
    end
    
    B --> B1 & B2 & B3 & B4;
    B4 -- "决策依据" --> C;

    subgraph "技能栈构建"
        C1["智能合约 (新人首选)"]
        C2["前端开发"]
        C3["后端开发"]
    end
    
    C --> C1 & C2 & C3;
    
    subgraph "智能合约技能"
        C1_1["Solidity核心"]
        C1_2["ERC标准"]
        C1_3["开发工具 (Hardhat)"]
        C1_4["Gas优化"]
        C1_5["开源合约阅读"]
    end

    C1 --> C1_1 & C1_2 & C1_3 & C1_4 & C1_5;
    
    subgraph "前端转型技能"
        C2_1["钱包交互 (MetaMask API)"]
        C2_2["Web3库 (Ethers.js)"]
        C2_3["DApp部署 (IPFS)"]
    end

    C2 --> C2_1 & C2_2 & C2_3;

    subgraph "后端转型技能"
        C3_1["链上数据抓取 (Alchemy/Infura)"]
        C3_2["自定义Web3 API开发"]
    end
    
    C3 --> C3_1 & C3_2;

    subgraph "求职材料准备"
        D1["核心原则: 项目经验为王"]
        D2["项目准备策略"]
        D3["简历包装技巧"]
    end
    
    D1 -- "指导" --> D2 & D3;

    subgraph "项目策略"
        D2_1["制作小型落地项目"]
        D2_2["部署到测试网"]
        D2_3["保留交易哈希作为证据"]
    end
    
    D2 --> D2_1 & D2_2 & D2_3;
    
    subgraph "简历技巧"
        D3_1["量化成果"]
        D3_2["详细技能标注"]
        D3_3["附加材料 (GitHub/博客)"]
    end

    D3 --> D3_1 & D3_2 & D3_3;

    C -- "产出" --> D;
    D -- "用于" --> E;
    
    style A fill:#4CAF50,stroke:#333,stroke-width:2px,color:#fff
    style B fill:#2196F3,stroke:#333,stroke-width:1px,color:#fff
    style C fill:#FFC107,stroke:#333,stroke-width:1px,color:#333
    style D fill:#F44336,stroke:#333,stroke-width:1px,color:#fff
    style E fill:#9C27B0,stroke:#333,stroke-width:1px,color:#fff
    
    style B1 fill:#E3F2FD,stroke:#333,stroke-width:1px,color:#333
    style B2 fill:#E3F2FD,stroke:#333,stroke-width:1px,color:#333
    style B3 fill:#E3F2FD,stroke:#333,stroke-width:1px,color:#333
    style B4 fill:#BBDEFB,stroke:#333,stroke-width:1px,color:#333

    style C1 fill:#FFF9C4,stroke:#333,stroke-width:1px,color:#333
    style C2 fill:#FFF9C4,stroke:#333,stroke-width:1px,color:#333
    style C3 fill:#FFF9C4,stroke:#333,stroke-width:1px,color:#333

    style D1 fill:#FFCDD2,stroke:#333,stroke-width:1px,color:#333
    style D2 fill:#FFEBEE,stroke:#333,stroke-width:1px,color:#333
    style D3 fill:#FFEBEE,stroke:#333,stroke-width:1px,color:#333
</Mermaid_Diagram>

Content:
先问你一个问题,你知道WIF3赶为需求有多少吗?竞争情况怎样?找工作的路径是啥样的?其实现在WIF3的情况和前几年不一样了目前全球做WIF3的企业数量在1万4000家以上我找了WIF3的招聘平台的数据低榨平台有1200多家公司发布了赶为超5000个RAMO3平台再找赶为数量达6000多个WIF3可有7000多个项目对应赶为超5万个全球的区块链从业者数量已突破2000万注意,这里是从业者咱们做开发的只占一小部分占比最大的是做运营的、做推广的、做金融的当然也有做社区之类的从地区分布来看全球WIF3的企业美国占了31%欧洲占了20%新加坡占了10%英国占了8%中国仅占3%其他地区占了28%关于新资这块亚洲WIF3的开发者平均月薪在4.8万左右前轮月薪大概在2.2万到4万后端大概月薪在3.5万到6万以上数据是2024年统计的来源于未来智库XFanvers和HackerNone这么一对比,你心里大概有个数了接下来咱们说一下如何找到你的第一份WIF3工作我在这个圈子5年了总结了一些经验包括了WIF3需要会傻技能杂包装检例在哪找工作咱们做一个盘点最后还有一个学习篮图你不用计笔记需要WIF3转型资料的小伙伴可以找我来拿我推荐3个新人最容易切入的岗位第一个就是智库能合约开发稿这个岗位是能最快切入WIF3的所以它是手选因为现在90%的WIF3项目都需要发代币做NFT而智库能合约开发就是干这个的岗位缺口比前端后端加起来还多刚入门的程序员只要能独立写合约起康至少比外包2%高20%以上但要注意不是会写Sley的题就行得会能上限少出BUG的合约智库能合约赶需要会以下三个技能第一个就是Sley的体育演学习的时候重点抓硬射、结构体、修饰器、事件这几个比如硬射你得知道怎么用它存用户余额还得懂硬射不能便利的坑以及怎么用数组配合硬射实现便利修饰器要会写 only ownercheck balance这种常用权限控制甚至能自己封装复用的修饰器我见过很多简理写京通四类的题但让它写个指定地只能转彰的修饰器半天憋不出来这就是没吃透第二个就是 ERC的标准E2K20和 ERC721是绕不开的而且得理解逻辑不是被带马比如 ERC20的TransferFront韩书为啥要先铺伏在转彰阿拉文词变量的作用是什么这些逻辑不懂的话写合约很容易出安全漏洞还有 ERC721Mint 驻照韩数怎么写怎么给 NFT 绑定元数据甚至可以再深入点看看 ERC115多类型代币现在很多游戏项目都用它懂这个能加分第三个就是相关的开发工具你要在Hard和Truff2选一我推荐Hard现在行业利用得更多插件的也全建议你重点练编译部署测试这三个流程比如用Hard来把合约部署到国理测试网然后用 ERC 简Jace写测试脚本测转彰Mint 这些功能还要用Hard代的地报个功能比如合约跑不通时怎么看日子找错误别觉得部署到测试网麻烦这是面试观大概率会温的你说我没部署过只在本地跑过基本就粮了说完了应计能软技能更关键是区分会写代码和能干活的核心你要会读开源和约源码别自己温头写你去看Unitswab VR的核心核约比如Pair核约和发射核约去看看人家怎么写SWab功能的怎么处理手续费的刚开始你可能看不懂没关系先看注释在主航拆解韩数逻辑比如Unitswab的K-Loss的变量是干嘛的为什么要用Safe Transfer看个3-5个主流项目的核约你写核约的思路会完全不一样第二个你得会Gasio化这是Wab3的潜规则用户用你的核约要花Gas费你写的代码越费Gas用户越不用基础技巧必须会比如用Cowdata代替Memory外部韩数参数因为Cowdata更省Gas再比如把多个状态变量打包成结构体减少Storage的读写因为Storage读写是最费Gas的甚至变量类型有讲究能用1128就别用256因为占空间小我建议一个老兄写的Mintan数理把同一个Storage变量读了三次这就是没考虑过Gasio化说完了智能和约港接下来说一下潜端转Wab3需要会杀技能在Wab2我们常用的HTMLCS、TS这些基础完全同用你只需要补3个Wab3特有的技能1到2月就能转型核心要学的就3块第一个是前包交互这是Wab3前端和Wab2前端最大的区别必须会用MATAMAS主流前包的API比如怎么通过Window,Atherium或许用户前包地址怎么请求用户授权Connect怎么调用合约的韩数比如让用户转账还要懂LID的概念比如以太方主网LID是1Gorli测试往15你得在代码里判断用户当前链对不对不对的话提示切换链这是最基础的功能没这个的话你写的Depth就是空壳第二个是Wab3库Eaters.js或者Wab3.js我能推荐Eaters.js于法更简洁重点去练核约交互比如用Eaters.js实力化一个合约需要核约地址和API然后调用合约的RateHan数比如查用户U不需要授权还有RiteHan数比如转账需要用户签名还要会处理交易哈西比如用户发起转账后怎么拿到交易哈西怎么在区块链流览器上查交易状态这些都是前端必须做的第三个是Depth不属Wab3前端一般不属到IPFS因为Depth要去中心化得会用Pinata把你的前端代码上传到IPFS然后拿到一个IPFS哈西通过这个哈西就能访问你的Depth别去的IPFS复杂Pinata有可实化界面跟著叫成走十分钟就能搞定一次不属了面试是你说我把Depth不属到IPFS了地址是这个你看看面试观绝对眼前一亮说完了前端那后端转Wab3砸转的Wab2后端转Wab3最大的优势是懂数据库和API开发这些在Wab3里一样有用很多人以为后端在Wab3里没用其实错了项目需要练下数据处理API服务这些都是后端干的活重点你要补两个技能第一个是练下数据抓取去快练上的数据是公开的但直接从练上独效率低所以需要后端写服务抓取数据存到数据库里比如PoseGoC 过MangoDB还得会用区块练节练服务比如AlchemyInforra他们提供API你可以通过API或区块数据交易数据和约事件数据比如你要做一个NFT交易统计工具就需要用Alchemy的API抓取某NFT和约的Transfer事件然后存到数据库再做统计分析还要懂事件监听比如实时监听和约的面子事件一有新的面子就出发通知这是很多项目需要的功能第二个是Web3API开发前端需要数据不能让前端直接去调用Alchemy的API这样做不安全也不好做全线控制所以后端要封装一层自己的API比如写一个获取用户NFT列表的API前端传用户地址后端先从数据库查没有的话再去调用Alchemy的API拿到数据后整理格式再返回给前端这里你的Web2的开发经验完全能用比如Nose A4和Java写API做缓存做全线这些都是常规操作只是数据来源从Micygo变成了区块链这里必须说一个致命物区比如某个小中功链用的是自己的语言很多人觉得小中链竞争小其实错了这些链的岗位需求不到5%你学了基本媒体方向用我建议你优先学以太方生态因为以太方是最大的生态岗位需求占比超70%而且很多其他供链比如Polygon,Avolanche也监融此类的体你学会了以太方这些链也能做相当于一份技能可以匹配多份稿位OK说完了技能的学习那如何包装自己的检例呢Web3主要看的是你能做什么团队宁愿要一个没经验但有时感项目的新人也不要一个有Web2经验但没Web3项目的老鸟所以包装的核心是用项目证明能力而不是对于你的工作经历那Web3公司的HR到底看见了一看什么按优先集排第一个是有没有做过Web3项目第二个是项目有没有落地第三个是技能能不能匹配首先说项目包装别一上来就想做个完整的低发平台那太大了新人根本扛不住最后只会烂位你呢就做小儿使用的项目300到500行代嘛能跑通核心功能就行我呢给你俩方向1到2个月准能搞定面试的时候还能说透如果你面试的是合约开发方向的做个简易版代币兑换合约就是让用户能把A代币换成B代币比例固定你呢可别觉得简单这里面能练到的东西可不少用硬设存用户余俄写TransferFront、Han数、调用户代币加修士器查誉额够不够还得加实现纪录兑换行为方便前端抓数据那要是一点落地的项目都没有打扮呢那你就把合约部署到锅里测试网拿个合约地址自己用MathMask测个5次兑换把交易哈西留著然后把代码地址和哈西全放GateUp上来得们写清楚怎么部署怎么调用核心逻辑是啥面试的时候你就说我做了个代币兑换合约锅里地址是这个你能查到的我测了5次都成还有化了Guess用靠大代替Memory省网10%的成本这话一出口面试关就知道你不是指挥被代码是真的能干活然后呢是简易包装别再用老母版了Wipe3简历的直奔主题把最有价值的放前面我给你3个加分项每个都能让HR多定你简历30秒第一个是量化成果别写我做了什么要写我做成了什么很多人写项目就说开发了代币兑换合约用了Saleigh的体和Hardad这等于没说你得写数据比如开发简易代币兑换合约部署到锅里测试网累计调用500多次优化了Sourid读写和参数类型降了10%的Gate成本合约过了Saleigh的检测没高位漏洞哪怕你做的项目小也得找能量化的点有数据有细节HR意见就知道你这项目有价值也知道你有真本事第二个是技能标注别只写熟悉Saleigh的TEaterS这个没写一样HR哪知道你熟悉到啥程度你的写熟练度加能做什么比如Saleigh的T就写熟练能独立开发12C2012C721合约时间代币转帐会基础盖西优化能独Uniswap3R核心合约圆HR的你要写熟练能用它编译部署合约到测试网写测试脚本用HR的D-PoE管部署流程EaterS 实验JS你要写熟练能实现钱包连接调用合约读写韩数处理交易哈西和状态查询这么写HR意见就知道你能不能胜任不用猜猜去第三个是加附加材料如果没有能摆到台面的项目那就专研Gateup和技术博客这两个是Wap3的硬通货比正数管用多了会累以上技能你得知道在哪儿投简历我这列举了一些网站最后呢我有一个两个月的学习篮图你可以按照架构去找资料学习如果需要的话可以找我来拿我们明天见
