Timestamp: 2025-09-04T07:29:34.974338
Title: 谷歌AI立功了！挖出Chrome核弹级漏洞，你的浏览器还好吗？ 底层系统安全  内存管理  高级攻防技术 BV1GVazzfEpP
URL: https://b23.tv/ZAwzw46
Status: success
Duration: 8:16

Description:
**总结大纲：**

I. **引言：Chrome安全漏洞概述**
    A. **漏洞识别**：Google Chrome浏览器中的Angle组件被发现存在一个严重的释放后使用（Use-After-Free, UAF）安全漏洞，CVE编号为2025-948。
    B. **发现过程**：该漏洞由Google内部的AI工具“Google Dwayne”与Project Zero安全团队合作发现。

II. **漏洞技术细节：Angle的功能与释放后使用原理**
    A. **Angle的作用**：
        1. Angle是Chrome浏览器的一个关键组件，作为接近原生的图形层引擎。
        2. 它允许浏览器通过WebGL等API与GPU进行交互，从而在屏幕上渲染2D和3D图形。
    B. **释放后使用（UAF）漏洞解释**：
        1. **定义**：当程序尝试访问或操作一块已经被操作系统释放的内存区域时发生。
        2. **工作原理（通过“狗猫”类比）**：
            a. 假设程序有大小相似但内部字段结构不同的数据类型（如猫和狗）。
            b. 通过特定操作顺序，先创建并释放一个对象（狗），然后创建另一个对象（猫）并使其占用之前释放的内存区域。
            c. 此时，如果程序仍尝试使用之前释放的“狗”指针，实际上会操作被“猫”对象覆盖的内存。
            d. 这可能导致“类型混淆”（Type Confusion），使程序将“狗”指针误认为是“猫”的指针。
        3. **潜在后果**：利用类型混淆，攻击者可以控制指针、泄露敏感内存数据，甚至导致程序崩溃或实现任意代码执行。

III. **AI在安全研究中的应用与挑战**
    A. **AI发现漏洞的趋势**：
        1. “Google Dwayne”成功发现此Chrome漏洞，标志着AI在复杂安全漏洞发现方面的巨大潜力。
        2. Google威胁情报副总裁Singer Joyce指出，Google正致力于提供AI解决方案，赋能安全研究人员。
        3. 这是一个未来安全研究的重要趋势，预计将看到越来越多由AI辅助的漏洞发现。
    B. **AI发现漏洞的挑战**：
        1. **上下文窗口限制**：AI在处理大量代码时，其有效分析和“有意义思考”的能力会急剧下降，需要严格限制输入代码量。
        2. **复杂漏洞类型**：像UAF这样的内存损坏漏洞，其利用通常需要一系列特定的程序状态转换，难以通过简单模式匹配找到。
        3. **高误报率**：AI生成的漏洞报告往往伴随着极高的误报率（例如，真实漏洞与误报之比可能达到1:50），这给人工验证和筛选带来了巨大负担。
            a. 此挑战在前人的研究中已有体现，如Sean Tealant利用AI在Linux内核SMB实现中发现UAF漏洞（CVE-2023-378999）的案例。

IV. **学习与实践建议**
    A. 强调理解底层计算机原理（如C语言和汇编语言）对于成为优秀程序员和网络安全分析师的重要性。
    B. 推广讲者自己提供的C语言课程“底层学院”，帮助学习者深入掌握底层编程。

---

**核心观点 (Core Point)：**

本次Chrome浏览器中由Google内部AI发现的释放后使用漏洞，预示着AI在安全研究中日益增长的潜力，但也凸显了其在复杂漏洞发现过程中面临的效率和准确性挑战。

---

**总括框架 (Overarching Framework)：**

“AI驱动的安全漏洞发现：潜力、技术细节与挑战”

---

<Mermaid_Diagram>
graph TD
    subgraph "Chrome安全漏洞概述"
        A["Chrome安全漏洞"] --> B["CVE-2025-948"]
        A --> C["漏洞类型: 释放后使用 (UAF)"]
        A --> F["受影响组件: Angle"]
        A --> D["发现者: Google AI (Dwayne)"]
        D -- "合作" --> E["Project Zero"]
        style A fill:#FFD700,stroke:#333,stroke-width:2px,color:#333
        style B fill:#FF6347,stroke:#333,stroke-width:1px,color:#333
        style C fill:#FFA07A,stroke:#333,stroke-width:1px,color:#333
        style D fill:#98FB98,stroke:#333,stroke-width:1px,color:#333
        style E fill:#98FB98,stroke:#333,stroke-width:1px,color:#333
        style F fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333
    end

    subgraph "Angle组件与图形渲染"
        F --> G["Angle功能: 原生图形层引擎"]
        G -- "支持" --> H["WebGL API"]
        H -- "实现" --> I["GPU交互与图形渲染"]
        style G fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333
        style H fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333
        style I fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333
    end

    subgraph "释放后使用 (UAF) 漏洞原理"
        C --> J["UAF技术原理: 内存被释放后仍被使用"]
        J -- "涉及" --> K["内存管理"]
        K -- "阶段1: 内存释放" --> L["指针指向失效区域"]
        K -- "阶段2: 已释放内存被重用" --> M["新数据覆盖原区域"]
        L & M -- "导致" --> N["类型混淆 (Type Confusion)"]
        N -- "引发" --> O["潜在后果"]
        O -- "如" --> P["程序崩溃/任意代码执行"]
        O -- "如" --> Q["数据泄露"]
        style J fill:#FFA07A,stroke:#333,stroke-width:1px,color:#333
        style K fill:#FFA07A,stroke:#333,stroke-width:1px,color:#333
        style L fill:#FFA07A,stroke:#333,stroke-width:1px,color:#333
        style M fill:#FFA07A,stroke:#333,stroke-width:1px,color:#333
        style N fill:#FFA07A,stroke:#333,stroke-width:1px,color:#333
        style O fill:#FF4500,stroke:#333,stroke-width:1px,color:#333
        style P fill:#FF4500,stroke:#333,stroke-width:1px,color:#333
        style Q fill:#FF4500,stroke:#333,stroke-width:1px,color:#333
    end

    subgraph "AI在安全研究中的应用与挑战"
        D --> R["AI在安全研究中的趋势"]
        R -- "预示" --> S["未来更多AI赋能的发现"]
        R -- "优势 (理论上)" --> T["提高发现效率"]
        R -- "面临" --> U["AI发现漏洞的挑战"]
        U --> V["上下文窗口限制"]
        U --> W["复杂漏洞类型 (UAF) 难找"]
        U --> X["高误报率 (e.g., 1:50)"]
        X -- "案例" --> Y["Sean Tealant: Linux内核UAF"]
        style R fill:#90EE90,stroke:#333,stroke-width:1px,color:#333
        style S fill:#90EE90,stroke:#333,stroke-width:1px,color:#333
        style T fill:#90EE90,stroke:#333,stroke-width:1px,color:#333
        style U fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333
        style V fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333
        style W fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333
        style X fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333
        style Y fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333
    end

    subgraph "学习与实践建议"
        Z["深入理解底层计算机原理"] --> AA["学习C/汇编语言"]
        AA -- "目标" --> BB["优秀安全分析师/程序员"]
        Z -- "推荐" --> CC["讲者C语言课程 '底层学院'"]
        style Z fill:#DDA0DD,stroke:#333,stroke-width:1px,color:#333
        style AA fill:#DDA0DD,stroke:#333,stroke-width:1px,color:#333
        style BB fill:#DDA0DD,stroke:#333,stroke-width:1px,color:#333
        style CC fill:#DDA0DD,stroke:#333,stroke-width:1px,color:#333
    end
</Mermaid_Diagram>

Content:
听着我知道你在想什么地层这不是凌日漏洞这是一堆鱼他们是相关的你们这些傻瓜所以先别急好吗今天我们来聊聊Crom流览器中发现的一个严重安全漏洞更可怕的是这个漏洞是古歌自家的内部AI发现的我们今天讨论的CV编号是2025948一个Angle中的释放后使用漏洞Angle是古歌Crom流览器的一部分这都是什么意思呢当你想在流览器里显示库宣的二地图形时有这样通常你得用一个叫WebGL的东西对吧我不是WebGL程序员但我懂JavaScriptWebGL只是JavaScript的另一个API他可以让你把东西宣人到屏幕上要想在屏幕上宣人任何东西说到底你都得调用到GPU对吧所以Angle就是那个进乎原生的图形层引擎他是Crom流览器的一个组件能让你写入GPU然后让东西显示在屏幕上才有了这些语我们说的CVE是一个释放后使用漏洞Angle里的漏洞释放后使用漏洞顾名思议就是你使用了一块来自堆的内存在他被释放之后名字本身很简单但利用释放后使用漏洞进行攻击的执行过程就有点复杂了我个人也花了很长时间当我刚开始做安全研究时才搞明白这是怎么回事具个例子假设我们有两个结构题一个是猫结构题一个是狗结构题你会看到这两个结构题都只有两个字段一个整形和一个纸征类型但你会发现他们在结构体里的位置是反的第一个里面ID是整形第二个里面第二个字段是整形可能会出现的问题是如果我能让程序混销这两种类型也就是说把一个纸像猫的纸征当成狗或者反过来我就能控制这个纸征并从程序中泄露内存你会看到我写的这段代码它基本上允许我们随意创建新狗新猫删除狗删除猫或者打印狗有点像一个基础的菜单是CTF体目问题你会注意到我在打印时没有检查那个变量是否以备释放或者是否为空我本应该在删除狗或猫的时候删除纸征我应该把它射为空然后在打印时检查但因为我没这么做这个程序就存在一个固有的漏洞一个释放后使用漏洞现在我可以把这个程序放到GDP里运行然后执行一系列命令来触发漏洞好的我要做的就是创建一只新狗然后删除这只狗接着创建一只新猫然后我打印狗当我打印狗的时候我实际上是在使用狗纸征但狗纸征已经被删了程序已经用猫结构体的内容覆盖了狗结构体的内存因为它用了同一块内存所以它会把狗当成猫当我执行打印狗时程序崩溃了你会看到它在尝试独取Eax级存器地址的内存这个Eax的值包含着这个16进制的424242如果我们回头看代码这会是我们给猫设置的ID这式的奇妙之处在于如果我们能控制猫的ID把它设置成任意值我们就能把它当成指针从程序中泄漏数据这是通过释放后使用实现的非常基础的类型混销但这就是现在Chrome发生的漏洞类型没错当然今天的视频是我自己账注的各位我真的相信如果你想成为一个好程序员或者一个好的网络安全分析师你必须了解计算机的工作原理在底层原理上而且在我看来学习的最佳方式学习计算机工作原理就是学习像CU圆或会边这样的圆在我的底层学院里就有这样的课程CU圆从0到英雄我们会过一遍学习整个CU圆课程结束时你会制作自己的原功数据库小项目我们最近还加了个新功能当你在Github上提交项目时它会自动为你运行测试看看你是否通过了项目然后最终你完成课程里的所有模块你会得到这个很酷的小证书如果我把我这大脑袋挪开这个二尾马可以用来通过加密方式验证这确实是你的证书各位如果你们把油箱地址留在这里广战上你会收到一个免费的三天CU圆课程你会学到如何写投几行C代码让你入门进入底层编程的世界不管怎样谢谢大家观看我们继续我认为更重要的一点是这个视频的关键在于这个漏洞完全是由古歌一个叫古歌大税的AI工具发现的我才这是古歌Dimined Project Zero研究人员合作的成果我对Dimined不太了解但 Project Zero是古歌内部的一个安全团队叫古歌 Project Zero他们是世界上最好的安全团队之一如果不是最好的话他们一在 Chrome 中发现各种牛逼的铃鱼漏洞并赚血出色的分析报告而文明我才是Dimined Project Zero的合作时的大税能够发现这个漏洞我认为未来安全研究的趋势就是这样我们会看到越来越多AI复能的东西很明显古歌威胁情报的副总裁Singer Joyce说古歌正努力提供向大税这样的智能体AI解决方案让研究人员能用AI方案进行研究我个人不知道大税是怎么工作的希望能有更多关于他的工作原理或细节公布出来之前有一些研究关于用AI发现铃鱼漏洞的更加公开一些Shown Tealant的伯克在这方面写的非常好他在Linux内河的SMB实现中发现了一个零日漏洞编号是CVE 2025378999基本上这篇文章就是介绍了他如何利用一个有特定模式的就CVE那个模式导致了释放后使用漏洞然后用AI根据这个模式在Linux内河中找到了一个新的CVE对吧但所有这些的问题在于他特别强调了这一点在这篇文章里我就不细读了大概提一下就是随着AI的上下文窗口变大也就是你给AI在单个上下文窗口里为了更多数据他在那个窗口上进行有意义思考的能力就会变得非常非常差对吧会变得非常困难所以你基本上必须限制一次性给AI看多少代码才能做这类研究否则如果你直接给他整个代码库他就会对代码库产生一大对换决对吧我认为模糊测试对这类漏洞也很重要的原因在于在内存损坏的情况下寻找漏洞对每种场景都更容易但释放后使用漏洞尤其难找因为你真的需要创造一个奇怪的状态你得便利程序让一个状态发生然后你还得让另一个状态发生来利用前一个状态的漏洞对吧从复杂性的角度来看这要难得多所以我认为AI是投入时间寻找这类漏洞的好地方我只是不确定效率有多高我觉得即使在上次自己的波克里他也说过是的性造比是一比五十对吧他这么说的意思是当他用AI做这项研究时AI会生成他找到的漏洞的报告对吧他会说漏洞减数当一个S&B工作现成在做什么什么的时候问题是他生成了五十份这样的报告但只有一份是真的对吧其余的都是换决所以这让安全医疗员的工作变得非常复杂他们得过来然后说现在我得筛选所有这些漏洞并确保他们都是真的最后希望你能在大海捞针中找到那个真的漏洞对吧一比五十的性造比真的非常非常差对吧从效率的角度来看话说如此如果你对漏洞研究和释放后使用内存损坏这类东西感兴趣可以看看下面描述里的StacksMash今天就到这里感谢观看非常感谢如果你喜欢这类视频请在下面的评论中告诉我我们下期视频再见好的保重再见
