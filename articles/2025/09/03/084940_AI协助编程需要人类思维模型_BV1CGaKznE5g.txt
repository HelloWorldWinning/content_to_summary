Timestamp: 2025-09-03T08:49:40.283008
Title: AI协助编程需要人类思维模型 BV1CGaKznE5g
URL: https://b23.tv/zRSPlwe
Status: success
Duration: 8:42

Description:
**摘要**

本文探讨了在使用AI（Kirror）自动化网页内容提取、翻译并导出至Word文档过程中的经验教训，强调了为AI提供清晰、简洁解决方案策略的重要性。

**1. 结构化大纲**

*   **引言**
    *   **目标：** 利用AI（Kirror）实现网页文章内容（包含普通文字和代码块）的提取、翻译，并自动导入到Word文档中。
    *   **初步性能对比：** 采用Rust编写的方案速度较快；AI/VBA方式虽然速度稍慢（翻译约1-2分钟），但最终效果可接受。

*   **AI实现过程及挑战**
    *   **初始复杂思路（AI自主尝试）：**
        *   AI尝试直接解析网页DOM结构，精确识别文章中的各种元素，特别是代码块（如`PRE`标签、`CodeBlog`类或带有变量的内联代码）。
        *   **挑战：** AI在代码块的准确识别上持续遇到困难，导致实现逻辑过于复杂、不准确，且耗时冗长。
        *   **结果：** 产生了庞大且效率低下的代码（“史上的DAMAR”），未能达到预期效果。
    *   **用户引导下的简化思路一：**
        *   用户指导AI采取更简单的方式：先将网页主要内容（`Body`或`Main`部分）复制到剪贴板，再从剪贴板粘贴至Word。
        *   **挑战：** 在与Word COM对象交互时仍出现报错，效果不理想。
    *   **用户引导下的优化思路二（最终成功方案）：**
        *   在用户启发下，AI转变思路：直接识别网页中的相关内容。
        *   将识别到的内容转换为HTML格式。
        *   利用Word直接打开此HTML文件。
        *   然后，利用Word内置的自动翻译功能进行翻译。
        *   **结果：** 代码量（DAMAR）从近2000行大幅减少至300多行，实现了1-2分钟内完成整个文章的翻译，效果理想且稳定。

*   **核心经验与启示**
    *   **关键点：** 在与AI（如Kirror）协作解决问题时，为AI提供清晰、简洁且有效的“心智模型”或解决方案策略至关重要。
    *   **反思：** 如果任由AI自主探索和迭代，它往往会倾向于构建越来越复杂的逻辑，导致代码臃肿、效率低下。
    *   **实践：** 主动指导AI采用更直接、更利于利用现有工具（如Word的HTML解析和自动翻译功能）的方案，是提升开发效率和最终效果的关键。

**2. 核心要点**

与AI协作时，提供清晰、简洁、高效的指导策略，并善用现有工具功能，是避免复杂陷阱、实现预期效果的关键。

**3. 总体框架**

AI协作中的高效问题解决策略与心智模型构建

<Mermaid_Diagram>
graph TD
    A["最终目标：网页内容提取与Word翻译"] --> B{"AI工具：Kirror"};

    subgraph "AI实现过程与挑战"
        B --> C{"初始AI思路：复杂DOM解析 & 代码块识别"};
        C --> D["挑战1：代码块识别困难"];
        C --> F["结果：DAMAR代码量庞大 (近2000行)，效果差"];
    end

    subgraph "用户指导下的思路演进"
        F --> G{"用户介入：提供简洁策略"};
        G --> H["策略1：内容复制至剪贴板 -> 粘贴至Word"];
        H --> E["挑战2：COM操作报错 (仍不理想)"];
        G --> I["策略2 (优化)：识别内容 -> 转HTML -> Word打开 -> 自动翻译"];
        I --> J["最终结果：DAMAR骤降 (300+行)，1-2分钟完成翻译，效果理想"];
    end

    J --> K["性能对比：Ross (快) vs. VBA/AI (慢但可接受)"];

    J --> L{"核心经验：提供AI清晰“心智模型”/解决方案策略"};
    L --> M["启示：避免AI过度复杂化，善用现有工具"];

    style A fill:#D4EDDA,stroke:#28A745,stroke-width:2px,color:#333;
    style B fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style C fill:#FFDDC1,stroke:#FF8C00,stroke-width:2px,color:#333;
    style D fill:#FFCCCC,stroke:#DC3545,stroke-width:1px,color:#333;
    style E fill:#FFCCCC,stroke:#DC3545,stroke-width:1px,color:#333;
    style F fill:#FFB6C1,stroke:#DC3545,stroke-width:2px,color:#333;
    style G fill:#FFFFCC,stroke:#FFC107,stroke-width:2px,color:#333;
    style H fill:#E0FFFF,stroke:#17A2B8,stroke-width:1px,color:#333;
    style I fill:#D4EDDA,stroke:#28A745,stroke-width:2px,color:#333;
    style J fill:#C3E6CB,stroke:#28A745,stroke-width:2px,color:#333;
    style K fill:#F0F8FF,stroke:#6C757D,stroke-width:1px,color:#333;
    style L fill:#FFE0B2,stroke:#FB8C00,stroke-width:2px,color:#333;
    style M fill:#FFF3CD,stroke:#FFC107,stroke-width:1px,color:#333;
</Mermaid_Diagram>

Content:
我们先看一下这个效果其实我主要都是用AI哥写的他的目的很简单我们就是要互取一下玩言内容然后目的是把他最后用这个声称一个word把这个玩言里面的主要内容放到word里面去然后再让这个word自己把这个内容把它翻译一下翻一下自动翻译做了自动翻译一下就好了当然这个里面我们可以看到就是信能上面可以明显的感觉到刚才那个是用Ross的写的整个速度还算是比较快的但是如果采用VBA的这种方式进行一个翻译的话他可能就会没有那么快信能是没有快但是呢最后整体的效果还是比较可以的无论是说刚才的把切上一个UR然后他会把玩一代内容放出来或取到或取到之后然后这个时候我们再做一个翻译这时候翻译就是完全大概在一到两分钟可以看到一到两分钟那基本就翻译完成了整个这个文章就翻译完成了那其实如果想做到这个整个的这个效果的话其实它的逻辑上面不是特别的不是它的想法也比这个实现起来比可能比较简单但是我对前段这个不是特别的了解就是后去这个玩意上面内容的话什么的如果让我去从Ross去写相关系的东西或者是其他的运去写的这个可能会花一些功夫那这个地方我们说运直接运AI比如说我们AI人他来我现在我运的是这个Kirror我要表达一个东西是什么呢就是我们要用这个Kirror的时候你的思路是非常重要的就是跟之前那个文章上面讲的非常的对一开始我是希望他把这个实现的方式因为之前实现的方式有很多了已经有很多的论了最开始的时候我就直接跟这个AI讲就是把一个UI然后装最后装一个World但是他互取的发声很就是自己写的代码不是我给他提供的思路因为之前这个Sanction我不知道去哪了就这边看不到了但是我只能看到一个其中的一个能够看到是更早一点的就是在各种问题上面去弄就是声线其中甚至可以这里方可以看到一个其中的有一个Requimment他做了一个自己设计了一下那他先是做DelineDeline做Requimment然后跟我们正常的做寄代码师的步骤是类似的你可以看到就是我之前就是让他把这个丸野当中丸野当中有很多元素有些普通的文字文字会有一些代码块然后这其中就有一个代码块他始终试别的有问题有试别代码块的试试有问题所以看到然后他在想当堵的写一个试别代码块的这个部分的代码甚至当堵的去写一块可以看到这里面就是对于Requimment的方式然后然后他做了一个Deline怎么去试别这个文章内容当中丸野当中的这个扣的代码块是怎么去试别一堆这些设计设计特别像但是始终是试别不好因为他要么是在PRE这个里面要么是classclass是属于这个CodeBlog的或者是代由这个CodeBlog先的但是呢他经常会在一个普通的文字里面带了一个什么变量的这种他也是用CodeBlog的表现了所以这个试别起来就很很麻烦然后就做各种处理就是用了很长的时间就始终没有办法达到我要的这种效果那后来我就发现不要搞那么复杂了不要用这个什么把它打开就是用这个榴朗系把这个文章打开然后在里面去把他的下一年东西试别出来然后再把它转换成Wer的这种方式他甚至都用了Code这种方式去做那那个效果就是很难受各种东西试别不好那后来我就说了我就你刚才简单一点非常简单一点然后就是直接把这个先把玩业当中的主要的内容Bode里面或者是Main当中的这些内容直接把它考卑到这个警惕板里面再把警惕板的内容考卑到Wer的当中就这样去做就好了那我把这个思路给了他之后然后他的确实现了一个实现了一个这种方式但是还是在进行把警惕板的内容借到这个Wer的当中之后操作COM的时候出现了一些包吓的问题他送制是说在Rathlon调用的CGDM但是整个的效果还是不好我们一点一点整个效果特别不理想那么这个时候AI可能还是受到我们的这种思路的起发他很快把这个他很快就是想到了直接去执行就执行执行什么呢执行在玩意当中识别到相应的一个内容识别到相应的内容之后然后然后再进行识别的内容之后然后直接把它转换成一个HTMLHTML然后再用这个Wer的给他打开Wer打开然后在Wer的当中直接去自动翻译去想干财来来来一个过程这个过程这样去进行这样的一个过程那么在这个DAMAR当中就是后来我们把之前DAMAR打得了接近2000因为一直在处理这个模块然后在处理标题什么之类的就整个过程比较复杂后来我们可以看到把它的DAMAR那样说数捡到300多哈300多哈而且这里面还有一点处理的逻辑这里面对吧简单处理逻辑人们那刚一开始甚至它比300多哈还多它哪怕是说Wer的用Wer的打开这种方式它都去找Wer的这个EXE的自行文党的路径也这样去写就是很多东西你会发现你要指导它去写然后这个这个DAMAR才会稍微好一些尤其是说其实我就特别战斗善事的那个文章你们所讲到就是你的心致模型很重要你要做这个事情你要实现这个东西的时候你是才论来种方式甚至说包括来种算法去做你要去指导它一下告诉了一下否则如果它自己去做的话你会发现它不停的跌代不停的跌代不停的跌代越来越复杂越复杂然后导致你的这个DAMAR非常的运种非常的我们经常讲到史上的DAMAR就出来了史上的DAMAR出来了所以说这个其实在实际当中我们没发现就是我上次在文章当中说讲了就是你一定要给它更好的一个失路尤其是在很多的细节的处理上面你如果像你这个DAMAR稍微看上去要比较舒服一点的话你会需要做这些东西这是我在实际虽然这个东西出了一期来不是特别复杂但实际体验当中它这个是非常有意思的一个点
