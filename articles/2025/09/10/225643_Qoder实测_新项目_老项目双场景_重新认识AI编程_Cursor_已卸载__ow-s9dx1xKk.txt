Timestamp: 2025-09-10T22:56:43.231697
Title: Qoder实测：新项目+老项目双场景，重新认识AI编程，Cursor 已卸载！ ow-s9dx1xKk
URL: https://www.youtube.com/watch?v=ow-s9dx1xKk
Status: success
Duration: 7:01

Description:
**总结大纲：**

1.  **引言：Code 工具概览**
    *   Code是一款免费且功能强大的AI编程助手，具有超越传统工具的能力。
    *   通过新项目开发和老项目迭代两个场景，全面展示其真实水平。

2.  **新项目开发体验：以Markdown小工具为例**
    *   **高效的需求理解与执行：**
        *   完全理解需求，列出详细开发步骤。
        *   支持直接在对话区域执行命令，或设为自动执行。
        *   执行速度快，提供内部预览。
    *   **直观的UI交互修改：**
        *   可通过点击界面元素添加至上下文，进行可视化修改（如移除UI元素）。
        *   支持富文本复制功能（经反馈后修正为复制富文本内容至公众号）。
        *   具备图片识别能力，能根据截图修复UI问题（如高度不一致）。
    *   **核心亮点：记忆功能（Memory）**
        *   能自主或被动生成并存储项目规划、设计、技术选型、阶段性调整及用户偏好（如语言）。
        *   打破传统工具“一次性对话”限制，实现渐进式合作，使Code越来越理解项目和用户。

3.  **老项目迭代体验：以若依（RuoYi）框架为例**
    *   **核心亮点：代码库Wiki（Repo Wiki）**
        *   克隆项目后，Code能详细梳理整个代码工程，包括系统总览、上手指南、核心架构及各种图示。
        *   大大降低接手或了解新项目的难度，避免因不熟悉代码导致潜在Bug。
        *   提供清晰的架构概览、类跳转、登录处理流程图、数据模型等。
    *   **核心亮点：任务模式（Quest）**
        *   用户下达任务后，Code能自主拆解、设计并执行，支持并行任务。
        *   **智能任务管理：**
            *   详细的任务拆解与设计（功能、表结构、实体类、页面）。
            *   支持实时打断与纠正，如识别本地环境（Docker vs. 本地MySQL）问题并自行调整。
            *   自主更新进度，提供详细任务报告。
        *   **注意事项：** 并行处理具有上下级依赖关系的复杂任务时，可能引发代码冲突或编译错误，建议谨慎使用。
        *   **实际效果：** 完美实现了文章管理等功能，体验流畅、强大。

4.  **总结**
    *   Code在项目开发和迭代中展现出卓越的AI辅助编程水平，是其他AI编程工具难以企及的。
    *   强烈推荐亲身体验。

---

**核心要点（一句话总结）：**
Code通过其卓越的需求理解、高效的执行能力、独特的记忆功能、代码库Wiki以及智能任务模式，为新项目开发和老项目迭代提供了无与伦比的AI辅助编程体验。

---

**内容总括框架 (Overarching Framework)：**
AI辅助编程工具在软件开发生命周期中的智能应用与实践。

---

<Mermaid_Diagram>
graph TD
    A["Code: AI编程助手"] -- "核心价值" --> B["提供卓越开发体验"];

    subgraph "Code 的核心优势"
        A -- "是" --> C["免费且功能强大"];
        A -- "具备" --> D["超越传统工具的'清出于来而剩于来'"];
    end

    subgraph "主要功能特性"
        A -- "赋能" --> F["记忆功能 (Memory)"];
        A -- "赋能" --> G["代码库 Wiki (Repo Wiki)"];
        A -- "赋能" --> H["任务模式 (Quest)"];
    end

    subgraph "应用场景：新项目开发 (Markdown 小工具)"
        F_new1["需求理解与规划"] -- "由 Code 辅助" --> F_new2["高效执行与预览"];
        F_new2 -- "支持" --> F_new3["直观 UI 交互修改"];
        F_new3 -- "包括" --> F_new4["富文本/图片识别与处理"];
        F_new4 -- "最终实现" --> F_new5["Markdown 小工具"];
    end

    subgraph "应用场景：老项目迭代 (若依框架)"
        G_old1["项目代码工程分析"] -- "通过 Repo Wiki" --> G_old2["降低接手难度"];
        G_old2 -- "提供" --> G_old3["清晰架构与数据模型"];
        H_old1["自主任务拆解与执行"] -- "通过 Quest" --> H_old2["实现复杂功能"];
        H_old2 -- "支持" --> H_old3["实时交互与问题纠正"];
        H_old1 -- "需注意" --> H_old4["并行任务潜在风险"];
        H_old2 -- "最终实现" --> H_old5["若依框架功能扩展"];
    end

    F -- "效果体现为" --> F_mem["持续理解与个性化学习"];
    G -- "效果体现为" --> G_repo["详细代码工程分析"];
    H -- "效果体现为" --> H_quest["自动化与智能执行"];

    C -- "共同促成" --> B;
    D -- "共同促成" --> B;
    F_mem -- "共同促成" --> B;
    G_repo -- "共同促成" --> B;
    H_quest -- "共同促成" --> B;

    B -- "最终导向" --> I["AI辅助编程新范式"];

    style A fill:#ADD8E6,stroke:#333,stroke-width:2px,color:#333;
    style B fill:#3CB371,stroke:#333,stroke-width:2px,color:#FFF;
    style C fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style D fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;

    style F fill:#FFFFCC,stroke:#333,stroke-width:1px,color:#333;
    style G fill:#FFFFCC,stroke:#333,stroke-width:1px,color:#333;
    style H fill:#FFFFCC,stroke:#333,stroke-width:1px,color:#333;

    style F_mem fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style G_repo fill:#

Content:
上期视频你们在评论区提到的那个code我用了啊总体感觉就一个非常的好用吧不仅免费而且它几重加之所长有一种清出于来而剩于来的感觉那今天呢我们就通过新项目开发和老项目迭代两方面像大家只关了来演示一下code的真实水平首先的是新项目开发我这边准备了一个markdown的事儿虽然小工具打开多花面板这里面默认是ad模式也可以接规模为ask准对化模式但是现在呢我们就维持默认那书软提示之后呢我们可以看到它这边是完全理解了我的需求而且它列了非常详细的开发步骤在对话区域呢可以去直接执行命令当然我们也可以去改为自动执行这样就不会每次都来许问我们了整体的一个执行速度我觉得还是非常快的而且它这边也是提供了内部的预览这边呢我们可以去点选介面上的任意元素从而添加到声下文方便我们直观的对前端UI介面做出修改比如说这里我们让它把这个兔去掉可以看到它一下子就搞定了对吧那下面的话呢我们再来加点别的需求可以cope右边选然后的内容直接沾贴到公众号我相信这个功能可能很多人都会需要那不过呢我一开始的这份调数是存在一些问题它复制的是stm号的这个原始的内容到我访会这个问题给cope之后呢它立马就做出了修改然后这次它复制的就是虽然之后的这种赋文本的内容我们再次复制到公众号呢可以看到目前就已经完全复合预期了同时这个cope它也是可以多种图片的比如我这边发现两边的这个高度不太一致然后我就截图给cope的让它来接修改它这边也可以去准确识别然后修复那因为它这边是面向海外的所以说默认你的ID认识是用英文回答的不过呢我们可以在对话里面让它以后用中文来回答我大家注意看它这边会有一个update memory的小字旁边还有一个v1流我们点过去查看一下那在这里呢就是code它自主和被动生成的一些记忆了比如说它一开始这顶的这个项目规划加过设计进入战选型等等包括它做了哪些阶段性的调整也会被添加到这个记忆里面去然后这条呢就是我们刚才主动让它记住的那个用中文来回答我对吧那这个功能呢我觉得是非常的有用啊因为大多数的变成工具呢都是一字性对话那你跟它聊完天之后呢穿口一关之前的这个上下文可能就全部都没有了下次你在提需求的话呢它又得去重新理解然后重复描述呢就非常的浪费时间那接着这个memory你和code的合作呢就是见尽式的它会越来越了解你的项目也越来越懂你后面我又让它去调整了一下布局然后把它做成了想一世还调整了手机端这个上下排板的区域内部滚动显示的一些问题感觉它真的是非常的聪明而且一点就透啊越用越上头那接下来的话呢我们再来看一下它在老项目迭代场里一下了一些效果吧这次呢我们还是基于若移去开发一些功能那这里呢我们就先课红到本地然后用code来打开它这里会有一个repo wiki的后台任务在跑项目大小不一样的话呢它整体的一个耗识也是不固定的那这个呢就是它跑完之后的样子可以看到它非常详细地帮我们去输了整个代码工程系统总来啊如何上手啊核心价格我等等然后它这边还有各种图式就非常的直观我觉得工作当中最痛苦的事情这就是我们去接手前辈移留给我们的项目对吧然后对于那种庞大的代码项目以前可能我们需要去刮几天的时间来熟悉整个项目的一个代码就算是做到了熟悉也有可能因为一个比较隐藏的细节的舒服就改出了非常大的Bug而Code的这个Repeat Weaky就可以去大大降低我们接手或者是了解一个新项目的难度比如说它这里的一个任中机制这里面会有一个非常清晰的架构盖篮然后相关的类也是列举在这里点击之后就可以直接跳转还有下面的这个登录请求的处理流程图以及下面的Data Mode整个系统的数据模型它现在都给你念的秘密白白强力建议大家可以去上手体验一下这也功能真的是非常的不错那请头项目之后我发现这里多了一个博客管理的模块我当时还在想这我刚下载的项目怎么和做着自己写的不一样的原来是因为我本地之前是做过弱一的一些二开的所以说数据库是有原来的一些表的定义虽然说这个地方有点细续性但是这也恰好模拟了我们真实的一个工作场景就比如说前面的一个程序老的它干了一半然后不干了对吧它只是设计了一些表然后代码它一行都没有写就这些离职了接下来的话我们就接触coder把前辈程序员做的文章分类、评论这些功能给它一个时间出来不过这次我们晚点不一样的我们直接用quest来做它其实就是你下达一个任务然后coder它就会取自主之形而且它这里是可以去多个任务病形的我们就先见一个文章任务然后一个分类任务还有一个评论任务OK接下来的话我们点开看一下文章任务它首先会去做一个比较详细的任务的拆解和设计比如说功能、表结构、实体类、硬面这些我们确认物之后就可以去让它继续执行了然后就是最诈猎的点中间我们还可以去打断它比如说它这边想去使用我本地的meisocop服务检查是否存在一些表和子段结果就报错了因为我本地是用docker起的meisocop本地完全没有去安装过任何的meisocop服务我把这个事实情况告诉它之后它立马就做了一个纠正然后大家可以看到它这边是用docker的方式去检查最后它发现数据库中已经有博客管理的一个菜单结构了然后它这边开始检查后端的实现发现是没有去写任何的代码接下来它就开始实现代码和前端叶面的一个部分那这里的话它每做完一步都会自主的去更新屠度因为在一开始这里流程的时候它这边是定了很多的屠度所有的屠度都搞定之后它这边开始边异起动项目可是这个时候我发现它怎么都起动不起来原因呢其实是因为我开了多个quest然后其他的这个quest它可能带码这写到了一半就会有很多的导包或者说是语法的错误所以说这里也不太建议大家用quest的病情做很多同类的事情或者说有这种上下级依赖关系的事情这样就会导致一些不必要的麻烦对吧OK 那现在呢我们就停掉其他的quest然后跟它说这边只需要去关心文章的功能最后这个项目就编硬起动不成功了然后它这边还生成了一个任务的报告详细列出了它本次做的一些变动已经相关的改动的文件实际运行发现它复用了导的数据表而且这个数据已经全部都查出来了那现在一个文章的时候发现存在问题这个时候我们只需要去复制相关的这个报送信息来到cat面板反非问题解决问题那到这里的话整个文章相关的功能它就已经完美实现了而且这个quest用起来实际的一个体验还是非常似乏的OK 那到这里的话我们通过新项目开发和老项目迭代两场景已经是完全体验了coder的一个实际的开发水平这些体验真的是其他A变成工具很难做到的所以说我强烈推荐大家亲自上手试一试这个coder好的 那以上就是本期视频的那个传播内容了感谢大家的收看我们下期视频再见
