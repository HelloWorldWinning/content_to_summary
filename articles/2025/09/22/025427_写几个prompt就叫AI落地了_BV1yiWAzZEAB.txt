Timestamp: 2025-09-22T02:54:27.855065
Title: 写几个prompt就叫AI落地了 BV1yiWAzZEAB
URL: https://b23.tv/LaseAIr
Status: success
Duration: 5:46

Description:
以下是对文本内容的总结：

**核心观点：**
AI应用落地的关键在于理解其技术边界与实际应用表现，并通过上下文工程优化大模型性能，将AI精准整合进业务流程，并循序渐进地从个人AI化开始，最终实现业务场景的准确、高效与成本可控。

**总括性框架：**
AI应用落地的“技术-应用-工程-业务”四位一体渐进式实现框架。

**概要结构：**

I. **AI应用落地的常见误区与核心挑战**
    *   **误区：** 将粗糙数据和几个问题等同于AI应用，缺乏系统性的工程化思维、落地方向和技术规划。
    *   **差距：** POC（概念验证）演示与实际生产之间的鸿沟巨大。
    *   **大模型核心挑战：** 上下文窗口限制导致模型性能在扩展上下文时急剧下降。

II. **AI应用落地的两大关键视角**
    *   **AI技术边界上限：** 明确AI技术在能力上能解决什么问题，其能力的边界所在。
    *   **AI应用实际表现：** 考察AI技术在真实应用场景中的效果，是否能达到其技术上限。
    *   **综合考量：** 需从技术边界和应用表现两方面进行综合分析，提炼关键点以指导自身应用落地。

III. **解决大模型上下文困境的“上下文工程”**
    *   **核心目标：** 通过精简和优化上下文窗口，提升大模型的性能和准确性。
    *   **三大解决方案：**
        1.  **SROP技术：** 将单独任务进行过滤或拆分成子任务，减少输入上下文大小。
        2.  **外部信息存储：** 将非必要读取的文件（如MIME）存储在外部，不占用上下文窗口。
        3.  **精细化Prompt设计：** 明确指示模型何时使用工具，定义业务流程，避免上下文膨胀，确保模型准确性。

IV. **AI在业务流程中的落地策略**
    *   **流程类型区分：**
        *   **固定流程：** 能用程序确定的流程，优先采用传统程序化开发，不依赖AI。
        *   **动态节点：** 确实需要AI动态执行的节点，需运用精细化Prompt和上下文工程技术（SROP、外部存储）来确保AI的准确率。
    *   **业务解决方案落地三阶段：**
        1.  **阶段1（准确度优先）：** 首要目标是确保业务场景的准确完成（初期可使用更大模型验证）。
        2.  **阶段2（效率优化）：** 在准确度无虞后，解决AI并行、程序固定化与AI不同模块合并后的速度问题。
        3.  **阶段3（成本控制）：** 在保证准确度和效率的前提下，考虑使用更小模型以控制成本。

V. **AI工程化的起步与实施建议**
    *   **个人工作AI化先行：** 从日常工作开始，尝试用不同模型解决自身任务（如医疗影像分析、音视频总结），验证模型对业务需求的能力。
    *   **利用现有平台工具：** 借助Cursor、Rux等平台，逐步将个人工作进行AI化。
    *   **平滑过渡：** 通过个人实践逐步对接真实业务场景，最终实现AI的成功落地。
    *   **提供工程实施文档：** 包含从测试、NBP（新业务流程/产品）、用户反馈到闭环的完整流程指导。

<Mermaid_Diagram>
graph TD
    subgraph "AI落地挑战"
        A["AI应用落地常见误区：表面化、缺乏工程化"] -- "直接导致" --> E["核心技术挑战：大模型上下文窗口限制"];
    end

    subgraph "AI能力理解与应对策略"
        B["AI能力理解：技术与应用视角"]
        B -- "包含" --> C["技术边界上限：AI能解决什么"];
        B -- "包含" --> D["应用实际表现：AI真实场景效果"];
        E -- "需解决" --> F{"上下文工程 (Context Engineering)"};
        F -- "策略1" --> G["SROP：任务拆分与过滤"];
        F -- "策略2" --> H["外部信息存储"];
        F -- "策略3" --> I["精细化Prompt设计"];
    end

    subgraph "AI在业务流程中的落地框架"
        J["AI业务流程落地策略"]
        J -- "基于理解" --> B;
        J -- "实践工具" --> F;
        J -- "第一步：区分流程类型" --> K{"流程类型区分"};
        K -- "固定流程 (程序化)" --> L["L: 程序确定性实现 (非AI)"];
        K -- "动态节点 (AI介入)" --> M["M: 动态节点 (AI核心应用)"];
        M -- "依赖" --> G;
        M -- "依赖" --> H;
        M -- "依赖" --> I;
        J -- "第二步：落地三阶段" --> N{"业务解决方案落地三阶段"};
        N -- "阶段1" --> O["O: 准确度优先 (验证业务场景)"];
        N -- "阶段2" --> P["P: 效率优化 (并行、集成、速度)"];
        N -- "阶段3" --> Q["Q: 成本控制 (优化模型选择)"];
    end

    subgraph "AI工程化起步与实践"
        R["AI工程化起步建议"] -- "途径1" --> S["S: 个人工作AI化先行"];
        R -- "途径2" --> T["T: 利用现有AI平台工具"];
        S -- "实践驱动" --> M;
        T -- "支持" --> M;
    end

    subgraph "AI落地终极目标"
        U["U: AI成功落地业务场景：准确、高效、成本可控"];
    end

    O --> U;
    P --> U;
    Q --> U;
    M -- "直接贡献" --> U;

    style A fill:#FFB6C1,stroke:#FF0000,stroke-width:2px;
    style E fill:#FFB6C1,stroke:#FF0000,stroke-width:2px;
    style B fill:#ADD8E6,stroke:#333,stroke-width:1px;
    style C fill:#DDEBF7,stroke:#333,stroke-width:1px;
    style D fill:#DDEBF7,stroke:#333,stroke-width:1px;
    style F fill:#90EE90,stroke:#006400,stroke-width:2px;
    style G fill:#CCEECC,stroke:#006400,stroke-width:1px;
    style H fill:#CCEECC,stroke:#006400,stroke-width:1px;
    style I fill:#CCEECC,stroke:#006400,stroke-width:1px;
    style J fill:#FFD700,stroke:#DAA520,stroke-width:2px;
    style K fill:#FFFACD,stroke:#DAA520,stroke-width:1px;
    style L fill:#F5DEB3,stroke:#DAA520,stroke-width:1px;
    style M fill:#F5DEB3,stroke:#DAA520,stroke-width:1px;
    style N fill:#FFFACD,stroke:#DAA520,stroke-width:1px;
    style O fill:#FFDEAD,stroke:#DAA520,stroke-width:1px;
    style P fill:#FFDEAD,stroke:#DAA520,stroke-width:1px;
    style Q fill:#FFDEAD,stroke:#DAA520,stroke-width:1px;
    style R fill:#D8BFD8,stroke:#8A2BE2,stroke-width:2px;
    style S fill:#E6E6FA,stroke:#8A2BE2,stroke-width:1px;
    style T fill:#E6E6FA,stroke:#8A2BE2,stroke-width:1px;
    style U fill:#00FA9A,stroke:#008000,stroke-width:3px,font-weight:bold;
</Mermaid_Diagram>

Content:
哎呀,用怎么落地其实不要以为几个Problem的加一些粗糙的数据就可以叫AI用用了那些都是表面的技术杂双前天有一个在做用AI落地的老板在找我聊一个电商落地的一个事情他说你看我们现在有一个Problem的然后几个工程师也要做成了一个产品了你看现在我接下来我怎么去发展他呢他根本就没有整个工程化的一个落地的又方向你问他百分比吧他说他不知道你问他说你整个技术蓝图和规划什么他都不知道他只知道我现在有了一个AI我写了一些Problem的然后有一些数据现在就成为AI用了其实你整个这个POC的演示一个结段一直到你真正的生产的这个盖布其实是非常大的那我们在做AI用用的时候我们一定要理解一个是AI的一个技术编辑的一个上线还有一个就是他应用实际上的表现那技术编辑的呢他表示了一个技术上的一个上线就比如说我们的一个AI的一个大圆模型技术他现在他到底他的整个技术上他能解决哪些问题他的能力编辑是什么那我们再说除了技术编辑你把我们一定要看其他人怎么去把这些技术编辑应用在真实场景上真实场景他应用的效果怎么样他真正用起来他那些技术编辑他到底能不能达到技术的一个上线所以我们要看所有的AI用的时候我们要从技术编辑和右编辑我们综合去看混合去看然后从里面提出一些关键的点用于我们自己的应用的一个落地那回来我们现在整个人在这些里面大模型他的核心挑战是什么呢他其实是上下窗口的一个困境所有的模型现在事实上所有的文情不管是好的模型还是小模型他的能力编辑都基于他的上线文的限制是有限的就是他在扩展到更多的上线文文字的时候他的表现一定是急剧下降的不管是之前的Cromer的这个Jetfo给的一些结论还是说不同的Claw的公司SROP这些他们都给出了相同的结论就是现在呢这是专专家伙的核心问题当上下文窗口编达的时候他的性能就是急剧下降了所以才引身出了上下文工程其实这点是非常重要的所以才引身上上下文工程我们因为上下文的上下文窗口了编达以后急剧下降所以我们需要把上下文窗口编的小编达经典 编达准确这样的话就是因为上下文的窗口的精确这样的一个要求所以我们就诞生了三种技能第一就是我们需要把一个单独的一个任务放在SROP的人中SROP的人中可以帮我们把整个需要的数据filter过例出来还有一部分是帮我们做成一个子认我只给我们这些接我就可以了这样它其实也是给我们捉A人的减少一些SROP的窗口的一些大小第二款就是如果我们没必要去读取文件或者我们需要MIME这些文件我们都放在外部信息中它就不用放在我们的上下文窗口中了所以这里边第二点也是上下文窗要解决一个问题要把没必要的文件进行外部的文件存储第三款就是精致的Prompt精致Prompt其实是在说你什么时候去合适去使工具而不是说我们有一个大模型然后给它很多节奠给它很多工具让它自己去洗碗这样的话它可能会经济很多很多很多很多的时候它的上下文窗口又变大了所以我们最好写一认的时候我们告诉它什么时候去用美切工具我的业务的整个流程是什么呀这样的话它的上下文窗口准确了它的整个模型就准确了那你离AI震的落定就很近了所以这样就隐身出上下文工程的三个解决方案这就隐身出我们什么样的AI震盆到底能落定真是能服务到我们的应用场景那下面这张图是来自于AI震的成功的12个因子其中一张图这张图我觉得表现了整个AI震在我们业务流程中能服务到我们业务的真实落定场景的一个流程它首先把我们都固定的流程和接点进行确定就是我们能用程序确定下的我们一定不要用AI震盆这是最转的第一个方向那第二点这里边就是说如果我们有一个接点真的需要它动态去执行的我们要用精致的pronged然后把它上下文进口而是窗口尽量的缩小缩小之后这里边可以使用到三倍人技术可以使用外部文件存处技术这些技术都是为了让我们这个节点的准确率也就是说AI的能力不会因为上下文窗口的限制而变得继续下降那这样的话我们就完成了一个A震的和我们整个固定流程一个节点的程序的综合开法它就完成了我们一个业务问题的解决方案等真正完成我们业务解决方案的时候我们就有三点需要我们关注的阶段那第一点呢就是当我们在做整个程序肩胀的时候我们的准确度其实打渔所有的我们先把业务场点先完善第二步呢就是等我们的业务场内都没有问题的时候我们在解决它的效率问题就是说我们的A震能不能病形我们的程序的固定化能不能病形然后我们的整个A震的不同不同能不能合遍解决我们的速度问题有了准确度和速度问题的话就是这里边我们能不能用更小的模型因为我们初步验证准确度的时候我们可能用更大的模型然后我们最后一波才考虑到长门的控制这个是Ai落地的非常关键的三个阶段那接下来就说如果我们先有Ai工程师我们或者自己在做一个专业型的垂直领域技术化我们怎么做起步呢我们首先要把我们自己所有的工作都进行Ai画先由个人的Ai画因为现在所有的模型现在的半程二和都是不准的你必须要去亲自动手尝试你的业务用不同的模型看这些模型是否符合你业务的要求的能力那这点是非常重要的所以我们先把我们日常的工作能Ai画的Ai画比如说如果我们是做医疗的我们看它用哪些模型提取的影响关系或者突破会更加准确的然后接下来如果我们是做音频视频的那我们哪些总结呢对于我们来讲是非常靠谱可以实施的那这样的话我们就可以用到我们的比如说Cursor路s或者我们的D5平台或者其他的一些平台先把我们的工作线Ai画那这样的话逐步的话再和我们真正用进行对接这是一个非常非常平滑过度一直到A正常实现本的我也有场景的一个重要的过程那如果具体实施是用大家如果不知道怎么进行的Ai工程化我也给大家准备了一个文囊从整个Ai的工程实施的测试级然后到整个NBP一直到用户收集反馈撤平整个的必环流程是怎么样的我也给大家准备好这个文囊了也希望这个文囊对大家有帮助那夏招2我也有一个直播对整个的一个Ai编辑和Ai螺地是怎么具体实现的给大家进行一个讲点如果看到这个视频下招2晚上8点可以来预约直播我们一起讨论Ai英文怎么落地
