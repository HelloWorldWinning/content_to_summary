Timestamp: 2025-09-21T21:00:09.889594
Title: 编程语言的本质是什么，为什么需要创造那么多编程语言，而不是一门语言搞定一切，为什么编程语言一般都会自带标准库，一个视频让你彻底明白编程语言的核心本质！ BV1NQW3zDE6H
URL: https://b23.tv/HuBdD2p
Status: success
Duration: 24:51

Description:
## 编程语言的多样性与标准库：核心思想总结

### I. 核心观点

没有最好的编程语言，只有最适合特定需求和场景的编程语言。

### II.  overarching Framework (整体框架)

编程语言的“设计哲学、标准库选择”如何通过“语言特性、生态系统”共同塑造其“优势领域、性能与易用性”，并最终指导开发者做出“最合适的技术选型”。

### III. 总结大纲与核心要点

**1. 编程语言标准库：基石与工具箱**
    *   **定义与作用**: 标准库是官方提供的基础工具箱，包含常用函数和方法，旨在避免开发者重复“造轮子”。
    *   **多样性与差异**:
        *   **C语言**: 标准库极其精简，主要围绕I/O、字符串、内存管理，偏向底层控制。
        *   **Java**: 标准库庞大且全面，覆盖框架、并发、网络、数据库等企业级需求。
        *   **Python**: 标准库丰富，秉持“自带电池”理念，支持脚本、数据处理、Web等多种应用。
        *   **Go语言**: 标准库在网络、并发、加密、HTTP方面表现出色，尤其适合云原生领域。
    *   **通用功能示例**: `Print`等输出函数是几乎所有语言的基础，用于调试和交互。
    *   **重要性**: 标准库提供基础能力，是语言不可或缺的核心组成部分。

**2. 编程语言多样性的根源与优势领域**
    *   **核心决定因素**: 语言的设计哲学和标准库的侧重点直接影响其应用场景。
    *   **多重影响因素**: 语言的适用性是语法、类型系统、标准库、社区生态等多方面共同作用的结果。
    *   **不同语言的擅长领域**:
        *   **C语言**: 擅长系统编程、嵌入式开发、操作系统等底层领域。
        *   **Java**: 适合企业级应用、跨平台开发。
        *   **Python**: 适用于脚本、自动化、数据科学、快速Web原型开发。
        *   **Go语言**: 在云原生、微服务、分布式系统领域优势明显。
        *   **JavaScript (Node.js)**: 擅长前端交互和后端I/O密集型服务。
    *   **C语言深入分析**:
        *   **设计理念**: 作为可移植的汇编语言，提供最小抽象，赋予极致灵活性但也易于出错。
        *   **团队协作挑战**: 缺乏统一规范，代码质量易参差不齐，维护难度高。
        *   **核心优势与局限**: 极致性能与硬件控制能力使其成为系统级首选，但学习曲线陡峭，对开发者能力要求极高。

**3. 标准库的组合学与项目实践**
    *   **组合的挑战**: 核心在于如何选择、拼接标准库模块，构建稳固、可维护的系统。
    *   **设计流程**: 从最终目标反推输入、处理步骤、输出，将需求翻译为标准库角色，并定义清晰接口，采用薄胶水层连接模块。
    *   **构建稳健高效程序的黄金法则**:
        *   确保数据流正确，加入日志和错误处理。
        *   模块化、纯函数设计，便于测试和可观察性。
        *   先加度量找到瓶颈，再进行性能优化。
        *   清晰的数据结构，幂等函数，分级错误处理。
    *   **实际案例**: 文件批处理、HTTP抓取、并发控制等任务，展示如何通过标准库模块实现。

**4. 标准库完备程度对学习和使用的影响**
    *   **标准库全面**: 优势在于上手快、开发顺畅、学习曲线平缓（如Python），但可能因模块过多而令人感到复杂，存在冗余模块。
    *   **标准库精简**: 优势在于语言核心逻辑易懂、可深入理解底层，但连基础功能也需自写，易浪费时间“造轮子”，新手体验较差。
    *   **其他影响因素**: 语法设计、IDE支持、学习资源（社区活跃度）等也影响学习难度。
    *   **选择策略**: 根据目标权衡，注重效率选“自带电池”语言，注重底层理解选“精简”语言。

**5. 标准库的优势与局限性**
    *   **为何优先使用标准库**:
        *   **优化与性能**: 经专业团队长期优化，性能和稳定性通常优于自写代码。
        *   **稳定性与安全性**: 经过严格测试，不易出现内存泄漏、线程安全问题。
        *   **一致性**: API风格统一，易于学习和使用。
    *   **标准库的定位与局限**:
        *   **通用性**: 专注于通用场景，不会覆盖特定行业或专业领域。
        *   **性能权衡**: 为通用性可能牺牲极端性能优化，特定场景仍需自定义实现。
        *   **API演进**: 标准库API也可能过时，需要更新。
    *   **项目中的二次开发**: 标准库是基础，程序员通过在其上进行封装、优化（如替换高性能实现、添加缓存/并发支持）来满足业务需求，这才是真正的价值体现。

### IV. Mermaid 概念图

<Mermaid_Diagram>
graph TD
    subgraph "I. 语言核心要素"
        A["设计哲学"] --> B["标准库"]
        A --> C["语言特性<br>(语法、类型系统)"]
        B -- "提供" --> F["通用功能<br>(如Print)"]
    end

    subgraph "II. 语言能力与应用"
        B -- "决定" --> D["开箱即用能力"]
        C -- "影响" --> D
        E["社区生态<br>(第三方库、活跃度)"] -- "增强" --> D
        D --> G["应用领域<br>(系统、企业、Web、数据等)"]
        E -- "拓展" --> G
    end

    subgraph "III. 开发考量与影响"
        G -- "要求" --> H["性能"]
        G -- "要求" --> I["易用性<br>(开发效率、学习曲线)"]
        H <--> J["权衡取舍"]
        I <--> J
        B -- "影响<br>(大小、完备度)" --> I
        C -- "影响" --> I
    end

    subgraph "IV. 实践与总结"
        K["项目开发"]
        B -- "如何使用" --> K
        K -- "需要" --> L["组合标准库模块"]
        K -- "涉及" --> M["二次开发<br>(基于标准库封装优化)"]
        L -- "遵循" --> N["最佳实践<br>(分层、接口、测试、优化顺序)"]
        N --> K
    end

    G -- "驱动" --> O["编程语言多样性"]
    O --> P["核心结论:<br>没有最好的语言，只有最合适的语言"]

    J --> P
    K --> P

    style A fill:"#D2F7D2",stroke:"#3C3",stroke-width:2px,color:"#333";
    style B fill:"#D2EBF7",stroke:"#36C",stroke-width:2px,color:"#333";
    style C fill:"#F7D2E2",stroke:"#C36",stroke-width:2px,color:"#333";
    style D fill:"#FFFFCC",stroke:"#CC9900",stroke-width:1px,color:"#333";
    style E fill:"#E6E6FA",stroke:"#8A2BE2",stroke-width:1px,color:"#333";
    style F fill:"#F0F8FF",stroke:"#4682B4",stroke-width:1px,color:"#333";
    style G fill:"#FFDDC2",stroke:"#FFA500",stroke-width:2px,color:"#333";
    style H fill:"#FFCCCC",stroke:"#FF0000",stroke-width:1px,color:"#333";
    style I fill:"#CCFFCC",stroke:"#00AA00",stroke-width:1px,color:"#333";
    style J fill:"#FFDD99",stroke:"#FF8C00",stroke-width:2px,color:"#333";
    style K fill:"#CCE0FF",stroke:"#007BFF",stroke-width:2px,color:"#333";
    style L fill:"#FFE5CC",stroke:"#FF9933",stroke-width:1px,color:"#333";
    style M fill:"#D2F7E2",stroke:"#00994C",stroke-width:1px,color:"#333";
    style N fill:"#E0FFFF",stroke:"#00CED1",stroke-width:1px,color:"#333";
    style O fill:"#FFF0F5",stroke:"#DC143C",stroke-width:2px,color:"#333";
    style P fill:"#FF6347",stroke:"#FF0000",stroke-width:3px,color:"#FFF";
</Mermaid_Diagram>

Content:
大家好 欢迎收听我们的播课然后今天想跟大家聊一聊为什么会有各种各样的编程语言他们为什么会有自己擅长的领域其实这背后很大程度上是因为他们的标准库以及整个的生态系统是不一样的是的 这个话题挺有意思的我们就直接开始吧好的 咱们先来讲讲第一个话题就是编程语言的标准库到底是什么东西它有什么用简单来说标准库就是官方给你提供的一个最基础的工具箱里面有很多寒树和方法你可以直接拿来用就不用每次都自己从头开始写一些很常用的功能既然这样的话那不同的编程语言标准库里面都装了什么东西呢其实每门语言的标准库都不太一样比如说C语言它的标准库就非常的惊简主要就是一些书书出自服串处理内存管理和数据寒树那像C语言这种比较偏底层的语言它要跨平台的话就经常需要靠操作系统的API来帮忙那高级一点的语言呢比如说Java和Python他们的标准库会有什么不一样吗Java的标准库就非常大它几乎什么都有几乎框架并发处理网络书具库访问甚至还有XML和Jason的解析所以你做大部分的开发基本都不需要再去找第三方的东西Python也差不多Python有一个说法即叫Battery's included的就是它什么东西都有政则网络书具库接口文件压缩各种HTP服务你要什么它都有像Python的话Print是一个内置寒树但是像OSSwissJason这些都是属于标准库里面的东西明白了那够语言呢最近也听话的它的标准库有什么特点跟我的标准库也是设计的非常起权尤其是在网络并发加密和HTTP这方面的支持特别好所以这也是为什么够在云源生这个领域这么受欢迎的原因然后咱们接下来要讨论的话题是为什么几乎所有的边疼语言里面都会有类似Print这样的一个书出寒树因为打印书出是程序源最基本的一个调试和交互的手段所以几乎每一种语言都会有自己的Print或者说类似的东西只是它的名字和具体的实现不太一样而已原来如此那是不是就是说标准库和这个打印的寒树这两个东西对于一门边疼以来讲是不可或缺的没错因为标准库它可以帮大家避免重复的去造轮子所以几乎每门语言都会有标准库只是说有了大有的小然后打印寒树的话就更不用说了开发的时候你肯定要经常把一些结果输输出来看一下所以这个也是为什么所有的语言都会有一个类似Print这样的东西那我有个问题想问一下就是为什么会有这么多种边疼语言他们到底是怎么决定自己擅长做哪方面开发的其实有很多种边疼语言的很大原因就是因为设计者他们在设计标准库的时候就会有自己的测众点那这个测众点就会直接影响这门语言适合用在哪些场景所以说一门语言到底擅长做什么除了标准库之外还有别的因素吗当然有了就是一门语言它到底适合做什么事情其实是语法类型系统标准库和整个社区生态这几个方面一起决定的标准库只是其中一个环节它会影响你这个语言开箱即用的一些能力但是其他的因素也会影响你能不能够高效的完成一个复杂的项目能不能具体说说不同的边疼语言因为标准库的差异他们都擅长哪些领域呢有时候C语言它的标准库主要就是操作内存、文件、输入书出和一些数据运算所以它就非常适合做系统变成欠入是开发、写操作系统这种因为它给你提供了直接操作硬件的能力那像Java和Python这种是不是就跟C语言很不一样对像Java的话它的标准库就非常全面网络、数据库、多线长、柜什么都有所以它就很适合做企业级的应用和跨平台的开发然后Python的标准库也是很丰富的它有很多的工具、政策、HTTP、Jason、Jasuo、并发所以Python就很适合写脚本、自动化、数据处理或者是快速的vib开发我想知道Go和Java script这两个又有什么不一样的擅长领域吗Go的话它的标准库专注在并发、网络和HTTP服务还有加密上面所以它就特别适合云缘生、v服务和分布是系统Java script的话因为它在No的Jas的环境下支持事件寻还、文件系统和HTTP所以它就很适合做前端的交互和后端的iO密集型的服务我们可以把标准库的取向比喻城是这个语言自带的工具那是不是就意味着这些工具直接决定了这门语言适合做什么事情呢是的,你可以想象一下如果这个工具箱里面装的是蠢一字、半手那它肯定就适合去造房子如果它里面装的是显微镜、试管那它肯定就更适合做科研所以这也是为什么不同的语言会在不同的领域里面更有优势当然社区的生态和历史的原因也会让这个趋势更加明显好的,下面我们来说一下C语言的标准库它的设计折学到底是什么它都有哪些最核心的功能然后它的定位又带来了哪些自由和麻烦呢C语言其实它当初的目标就是要成为一种可遗值的会编语言所以它不会帮你做太多的抽象它只会给你一个非常小的工具箱比如说自负串的操作、内存的分配、文件的读写还有一些基本的数据寒数这就是它的全部了听起来就非常的远时那是不是所有高级一点的数据结构和线程机制都得自己去实现没错,没错就是你想要练表,你就得自己写你想要哈西表,你也得自己写甚至你想要多线成,你还得自己写所以这就让C非常的灵活但是也很容易出错因为没有任何保护措施你完全就是在裸奔那C语言这种面向过程和手动管理内存的方式会给代码带来哪些影响呢首先C语言它是一个面向过程的语言它不会强迫你用任何的抽象所以你可以用结构体可以用寒数,你也可以不用完全看你自己然后另外一个就是它的内存管理是完全靠你自己的你卖漏了之后你就得自己水如果你忘了的话就会造成内存泄漏但如果你是一个高手的话你可以自己去实现一个内存池然后你的程序性能就会非常的高也就是说同一个逻辑不同水平的人写出来的C代码会有天上之别是的是的这就是C语言让人又哀又恨的地方就是一个新手可能写出来的代码到处都是问题但是一个高手可以通过纸征的运算内存对齐还有缓存优化把这个程序炸干到最后一滴性能所以这也是为什么C语言一直都没有被取代既然C语言没有像扎瓦或者Python那样的一些规范那团队在写作的时候会遇到什么麻烦的因为C语言它没有很多语法堂也没有一个统一的框架或者库来约束你所以大家完全就是贫自己的习惯来写那有些人可能就会写得非常的模块化接口什么的都很清晰但也有人可能就会写得非常乱到处都是全局变量到处都是纸征然后最后就会变成一个谁都不敢动的史善所以说在C语言里面团队成员之间的水平差异会直接反映在代码质量上吗确实是这样在加瓦或者Python里面标准库已经帮你把很多东西都封装好了比如说排序你直接掉Sort就行了大家写出来的代码都差不多但C语言的话就完全靠个人有的人可能会写出非常高效的算法有的人可能写一个冒泡排序都能写错所以最后这个程序的性能可能会差出十倍OK那C语言到底有什么优势让他一直在系统集开发里面一历不到C语言最大的魅力就是他的性能极高你可以对他进行非常细力度的控制而且他跟硬件的关系非常近所以你写操作系统也好写驱动也好写欠入式程序也好基本上都是首选C语言既然他这么强大那为什么大家又会说C语言是一把双印件因为他确实是很难学然后也很容易写出难以维护的代码特别是在团队写作的时候代码的指挡就会参资不起所以有人就说C语言是给高手用的瑞士军刀新手的话拿在手里就是一个图龙刀自残版我们再来讨论一下这个标准库的组合学和最佳实践为什么说把标准库的模块按照一定的方式组合起要比单独会用这些模块更考验功夫呢因为你会用一个库只是最基本的真正的挑战是你要知道在这个项目里面应该选择哪些库然后用什么样的顺序把他们拼接起来这个其实是非常有讲究的就像大乐高一样你得有一个系统型的思路才能够把这些东西搭成一个稳固的可维护的结构如果我们现在要从头开始设计一个程序怎么能够通过目标反推出来我们需要哪些标准库的模块以及他们之间的数据流动顺序呢其实你可以从最终的目标处发先问自己这个输入是从哪来的是一个文件还是网络请求还是说命令行的参数或者是输居库然后中间要经过哪些处理的步骤是要解析转换教验还是计算最后要把结果输出到哪里是打引到中端还是写进文件还是说通过HTTV发送出去还是推进消息队列你把这些都履顺了之后你还要考虑性能并发和可靠性的要求比如说延迟要多低吞吐量要多高融灾怎么设计听起来就像在组装一条生产线一样对每一步都要想清楚没错然后你在把这些需求翻译成标准库里面的角色比如说文件操作要用到什么模块JSN姐C要用到什么模块时间处理要用到什么模块然后网络通信要用到什么模块错误处理要用到什么模块日质和配置要用到什么模块你把这些标准库的角色都列出来之后你在按照数据流动的顺序把它们排好每个阶段就只做一件事情这样你的代码结构也会非常清晰我想知道在组合这些标准库模块的时候怎么才能够让每一步都非常清晰而且又很容易替换和测试最重要的一点就是你要给每个阶段都定义一个非常明确的接口就是你这个韩束的输入输出类型是固定的那你后面就可以随便改里面的实现比如说我原来是处理CSV的我现在要改成处理JSN的但我只要保证接口不变我上层的代码就完全不用动这样的话确实就会让你的代码特别有弹性就像搭机木一样然后另外一个就是你要有一个很薄的焦水层这个焦水层它只负责把各个模块按照顺序创起来它不应该有任何的业务逻辑所有的业务逻辑都应该拆分成可复用的承含数或者是方法这样的话就会非常容易测试你可以单独测每一个含数也可以很方便地用一来住入的方式去替换掉某一个环节懂了那在实际去组合这些标准库模块的时候有没有一个科学的顺序可以遵循能够让我们的程序既正确又高效首先你要保证这个数据流是对的你要把日质和错误处理都加好保证你的程序在任何情况下都不会出现一些莫名其妙的崩溃然后你要把你的代码拆分成小的模块和纯含数这样的话你写测试也会很方便它来测试和可观察性是非常关键的对说一上来就想着优化速度你先把日质和一些基本的度量加上你可以很清楚地看到这个程序的评进在哪里然后你再去针对这些热点去做性能优化比如说你换一个更高效的触距结构或者是加一些缓存最后才就考虑加并发不要一开始就把你的代码搞得很复杂我们来举个实际的例子吧比如说我现在有一个文件批处理的任务我要把一堆CSV文件转成Json然后再压缩存档这个流程要怎么用标准库来实现首先你要用到Pathlete的日本或者OSWOK来便利目录然后CSV模块来解析CSV文件再用Json模块来生成Json压缩的话你可以用ZIP file或者GZ最后再配合Argapars来处理一些命令行的参数Logging来打点日质明白了这个流程里面有哪些地方是可以做一些性能优化的吗你可以用生成器和流氏I-O就是每独一行处理一行直接写出去这样的话你就不会把所有的数据都一次性独进内存就可以处理很大的文件也不会包内存好的如果是一个STDP抓曲解析然后落盘的这样一个任务用标准库要怎么来实现呢你可以用Urblock request或者是Go和Java里面的HTDP client来发行程然后自己用TimeSleep和循环来实现一个简单的线素和重视如果是Go和Java的话也可以用Context来做超时控制解析的话就是用证则或者是JsonXml的解析库然后落盘和缓存你可以直接写文件或者是用Skate 3就是我在做这种病发的数据处理的时候用标准库要怎么来控制病发的数量怎么来处理超时和被压呢Python的话你可以用Concurrent Futures或者是Async来做病发Go的话就是GoRoutine和ChannelJava的话你可以用ExoCulture框架然后被压和线流的话你可以通过控制堆类的大小或者是用新号量来做Go里面可以用带缓冲的ChannelJava里面可以用Semford取消的话就是用Context或者是FutureCancelPython的Async里面也有Timeout的机制还有就是在组合这些标准库模画的时候有哪些黄金法则是可以帮我们写出更稳件更一维护的代码的呢最核心的一点就是你要按照指责来分层而不是说随便把代码塞到不同的稳件里面然后每一层的编借要非常清晰尤其是Io的部分你一定要抽成接口业务逻辑的部分你尽量写成纯函数这样的话你测试和替换都会很方便听起来这些原则确实能让代码结构变得很清晰那还有没有其他比较使用的做法呢还有就是你要尽早地定义好你的数据结构不要到处传隐世的字点然后错误要分等级日治要记清楚关键的步骤要测然后每个函数尽量做到密等方便你重视和断点续跑还有就是你不要急着去做病发优化先把你的机线性能测出来好那标准库的完备程度到底会怎么影响一个语言的议学性和异用性呢如果一个语言的标准库很全的话你就不用去装很多第三方的东西就可以很快就上手然后写一些小工具啊小项目啊会非常顺畅而且它的命名和文党的风格都是一致的你学起来也会比较连乱比如说拍子你基本上什么都不用装就可以做很多事情非常适合出学者这样的话会不会有一些问题比如说标准库太大了新手会比较太复杂会的因为东西太多了你可能一开始会找不到你要的东西然后文党有很厚你会觉得很有压力而且有些标准库里面会有一些绒语的或者过时的模块比如说拍子里面的OS Pass和Path Lib加码里面的Date和Jabartime就会让新手很纠结到底该用哪个那如果一个语言的标准库很小很惊简又会给开发者带来哪些不同的体验呢标准库很小的话这个语言本身就会比较简单你很容易看明白它的核心裸即是在做什么然后你也可以按照你的需求去选择第三方的库或者是自己去实现一些东西比如说C语言你就可以非常清楚地看到计算机底层是怎么工作的那是不是对于初学者来说这种自由度反而会变成一种负担是的因为你连最基本的自负串操作数据结构都要自己去写所以你就很容易写出乱几把刀的代码然后也会浪费很多时间去造一些轮字所以新手的话会觉得特别痛苦然后团队的代码质量也会撑滋不起除了标准库本身的大小还有哪些因素会影响我们学习和使用这门语言的难度呢语法设计是一个很重要的方面比如说Python的语法就很简洁你学起来就会很轻松但是C家的语法就很复杂即使它的标准库再丰富你学起来也会觉得很难确实一个好的ID议和丰富的学习资源也会让边城变得失败公分没错 现在的ID像Pitcharm,Goal and IntelliJ都可以帮你自动补权 自动提示API所以你根本就不需要去死机应贝这些东西然后包括你遇到问题能不能够很容易的在网上找到答案这也会极大的影响你学习的效率像Python和Java这种社区很活跃的语言你遇到问题分分钟就可以收到解决方案但一些冷门语言可能你就只能自己坑门到了所以就说我们在选一门边城语言的时候要怎么去全衡标准库的完备程度和我们自己的学习目标呢如果你的标准库很全的话那你入门和实际做项目的速度都会快很多因为你可以很快的实现一些功能不会被一些环境配置什么的卡住但如果你的标准库很惊简的话你可能一开始会学得比较慢但是你会对底层的语言里离解的更透彻也就是说我们要根据自己的需求来选择是要效率优先还是要打好基础优先比如说你想要快速的上手做一些应用那你可以选PythonGo或者Java这种自带电池的语言但如果你就是想要深入的去了解计算机系统那你可以选C或者Rest这种标准库非常客致的语言标准库到底是怎么做到在不同的平台上面都能够稳定高效的运行呢标准库一般都是由语言的设计者或者是非常顶级的程序以及一些长期伟户的社区来开发的他们会考虑到各种不同的操作系统不同的CPU架构所以他们写的代码都是非常有可遗址性的原来背后有这么强大的团队在做优化我都用起来会特别放心而且标准库很多核心的部分都是用CC家甚至会边来写的所以他的性能会比你自己用高级元写的要高很多然后他也会有非常严格的测试所以他基本上不会出现什么内存泄漏或者是现场安全的问题并且他所有的API风格都是统一的你只要学会一个模块其他的模块用起来也会非常顺手那为什么我们在开发的时候总是优先考虑去使用标准库里面的功能而不是自己去写呢因为标准库里的这些寒树比如说C里面的QsortPython里面的SortJava里面的RaysSort他们背后的算法都是经过很多年不断的优化的他可能是快排、插排对于排这些算法的一个混合实现所以他的性能和稳定性都是你自己很难去考虑的除了排序这种那其他的一些功能比如说政策多线程是不是标准库也都做了极致的优化对呀像Python的Raymore块Java的JavaLutirex他们背后都是有非常复杂的政策引擎的然后多线程的话像Java的JavaLutireConcordantBallGo里面的GoRoutine和Channel这些都是语言层面专门为并发作的优化你自己去写的话很难做的更好既然这样的话那标准库为什么不把所有的功能都实现了还要让我们去引入第三方的库标准库其实主要还是专注在一些通用的场景比如说文件操作、网络通信最幅串处理、时间日期、并发源语、数学运算这种嗯,他不会去设计一些很专业的领域比如说机械学习、图像处理外部框架这些东西你只能去用第三方的库也就是说标准库只是给你一个基础的保障在一些对性能要求非常高的场景下标准库也不是办能的吧没错,因为标准库要考虑到通用性所以他不会为了某一个极端的性能场景去做优化嗯,那如果你是做高频交易的你可能就要自己去实现一个专属的对列或者是锁来炸取每一点性能然后还有就是标准库的API也会过时比如说PASS里面以前的OptPASS现在已经被ARGPASS取代了OK,那我们现在再来关注一下标准库的定位以及他在实际的项目开发当中的一些局限性嗯,为什么标准库它只能覆盖一些通用的场景而没有办法满足所有的业务需求吗标准库其实就是为了给你提供一些大家都会用到的基础功能比如说文件的读写,网络的请求自服创人的处理时间日期的操作,并发的元语、数学的运算它的目的是要做到通用、稳定、跨平台它不可能为了某一个特定的行业或者某一个具体的业务去做深度的优化那在实际的项目当中哪些情况下我们会发现标准库不够用或者说不太适合比如说你要追求极致的性能那标准库里面的GSM模块虽然说很好用但是它并不是最快的那如果你要处理TB级的数据你可能就会换成OrGeson这种用C的库它会快很多看来就是业务越特殊对性能要求越高标准库就越难满足需求对呀,像一些专门的业务逻辑比如说股票的K线分析图像的选击运算推荐算法这些东西标准库是不可能帮你实现的你只能自己去封装或者是扩展然后还有就是标准库的功能有时会太老或者说有一些缺陷比如说Python里面舅的Vetan模块它处理时区就很麻烦所以大家更愿意去用PythonDate to Teal这些第三方的库或者是等到Python39之后用Zone Info我们在做实际项目的时候一般都是怎么去基于标准库做二次开发来满足我们的业务需求其实我们很少会说从零开始去写一个JSON解析器什么的我们一般都是会把标准库里面的一些东西拿过来然后按照我们的业务逻辑在封装一层做成一个更适合我们自己使用的结口所以就是标准库相当于是一个地基我们还得在这个地基上面去搭建自己的高刀大上是的你可以在标准库的基础上做一些优化比如说你把某个环节换成一个性能更高的实现或者是说你加一些缓存加一些病发的支持这些都是在标准库的基础上做一些定制化的开发这才是我们程序远真正的价值知道编程语言的多样性和他们的优势领域为什么会有这么多不同的编程语不同的编程语言每一种语言背后的设计哲学和标准库的选择到底是怎么影响它的应用场景因为不同的语言它会有自己的语法和设计哲学比如说C语言它就是偏重于底层的控制Python它就是为了让你开发的更快Rust它就是主打类型安全那这些东西就会直接影响你写代码的风格和你能够做的事情所以就是说标准库的曲项其实也决定了这门语言适合在哪些领域大方一彩没错没错比如说C语言它的标准库非常的基础所以它就特别适合写操作系统和欠入式程序Java的话它因为有非常强大的企业级标准库所以它在大型后段开发当中是非常流行的然后Python它因为有电池全包的理念所以它就非常适合做脚本数据科学和快速的原型开发够语言它的标准库专注在并发和网络所以它在微服务和语言生理由就非常的火那社区和生在系统是怎么让这些语言的优势领域变得更加突出的呢其实就是不断的积累比如说Python因为有很多数据科学和AI的库所以大家就会用它来做机器学习然后JavaScript它因为一开始就是绑定在流暖器上的后来又有了No的Jas所以它就成为了前后端通吃的一个语言还有Rust它就是因为安全性和性能所以它在系统级开发领域就慢慢的火车来了为什么没有一门编程语言可以做到在所有的领域都是最佳选择的因为每一门语言在设计的时候都要做取舍比如说你想要语发简单那你可能就要牺牲一些功能像够语言它就是语法非常的简单但是它很多高级的特性就没有那你想要功能非常的强大那你可能就要面对非常高的学习曲线比如说C家它什么都能做但是它非常的难学所以就是说性能和异用性这两个东西基本上是很难两强的 是不是你想要极致的性能那你肯定要牺牲一些开发的便理性像C语言和RUST那你想要开发的非常快写起来非常顺手那你可能就要牺牲一些执行的效率比如说Python和Ruby然后不同的领域对于编程语言的要求也是不一样的你做游戏开发和做AI算法或者是做操作系统做网站后台他们的需求都是千差万别的所以每一门语言都有自己擅长的舞台确实是这样那我们今天聊了这么多关于标准库的东西然后也聊了不同的语言为什么会有自己擅长的领域其实说白了就是没有最好的语言只有最合适的语言好的 那这期节目咱们就到这里了然后感谢大家的收听咱们下次再见 拜拜
