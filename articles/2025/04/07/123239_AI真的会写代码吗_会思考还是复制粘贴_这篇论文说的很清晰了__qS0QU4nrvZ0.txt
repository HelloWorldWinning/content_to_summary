Timestamp: 2025-04-07T12:32:39.115240
Title: AI真的会写代码吗？会思考还是复制粘贴？这篇论文说的很清晰了！ qS0QU4nrvZ0
URL: https://youtube.com/watch?v=qS0QU4nrvZ0&si=BL5UMkHRqE_20owb
Status: success
Duration: 17:53

Description:
好的，这是对您提供的文本的总结和分析：

**核心观点:** Codex 主要依赖于记忆代码而非真正理解和解决问题，导致其在面对稍作修改的问题时表现不佳。

**总体框架:**

1.  **引言:** 介绍了 OpenAI 的 Codex 以及其在代码生成方面的能力。
2.  **问题提出:** Codex 是否真的会写代码，还是只是记忆代码？
3.  **实验设计:**
    *   使用 HikeRound 网站的 115 个 Python 问题进行测试。
    *   发现 Codex 在原始问题上表现良好，但在稍微修改的问题上表现不佳。
    *   提出一种新的评估框架，用于评估代码模型的泛化能力。
    *   该框架通过对问题进行变异，例如替换操作符或修改输入类型，来测试模型是否能够适应新的情况。
4.  **结果与讨论:**
    *   Codex 存在广泛的记忆问题和泛化问题。
    *   Codex 可能无法真正理解代码的逻辑，而只是记忆了代码的模式。
5.  **相关技术回顾:** 简要回顾了 N-gram 和 Transformer 模型，以及它们在代码生成方面的应用。
6.  **总结:** 强调了对代码模型进行更深入研究的必要性，以确保它们能够生成高质量的代码。

**概念图:**

<Mermaid_Diagram>
graph LR
    subgraph Code Generation and Understanding
        A[CodeX] -- 依赖 --> B(记忆代码)
        A -- 缺乏 --> C(逻辑思维)
        C --> D{泛化能力差}
        B --> D
        D -- 导致 --> E[变异问题表现不佳]
    end

    subgraph Experiment and Evaluation Framework
        F[HikeRound网站115个问题] -- 测试 --> A
        F -- 作为 --> G{原始问题}
        H[问题变异] -- 应用于 --> G
        H -- 包括 --> I(操作符替换)
        H -- 包括 --> J(输入类型修改)
        G -- 产生 --> K{变异问题}
        K -- 用于评估 --> D
        L[评估指标: 代码正确性] -- 验证 --> A生成代码
    end

    subgraph Related Technologies
        M[N-gram] -- 早期的 --> Code Generation
        N[Transformer] -- 改进的 --> Code Generation
        N -- 例如 --> O(GPT-3, Codex)
    end

    A --> L
    E --> 对代码质量产生影响
    style A fill:#f9f,stroke:#333,stroke-width:2px
    style D fill:#ccf,stroke:#333,stroke-width:2px
    style G fill:#ccf,stroke:#333,stroke-width:2px
    style H fill:#ccf,stroke:#333,stroke-width:2px
    style K fill:#ccf,stroke:#333,stroke-width:2px
    style L fill:#ccf,stroke:#333,stroke-width:2px
</Mermaid_Diagram>

希望这个总结和概念图能够帮助您更好地理解这篇文章的核心内容。


Content:
大家好,我是PHDV到想一个上一份字的牌子希望大家能够去多多的关注那么今天我们就来讲一篇文章这个文章叫研究的是一些会鞋代码的AI比如说这个OpenAI出了一个会鞋代码的AI叫做CodeX这样一个东西大家现在CodeX一些东西它一些功能可能被整合到OpenAI的那个TiJBT里面去了所以说也许用TiJB的时候你能体验到一些CodeX这样的感觉写个代码它能给写出来一会会给大家做一个例子那么这个文章研究一下什么事呢就是说它弄了一个叫HikeRound的这样一个网站这个网站就跟例子Code是一样它里面有很多的题然后看看CodeX有东西它能不能在这里面做一个大师HikeRs比较在美国HikeRs就HikeRs或者是HikeRs这样的词它的意思其实是代码程序很高的人最开始这个意思现在还有别的意思就是说比如说公司服务器的数据给它偷出来它还是在随这样但是HikeRs的意思在这里就是说它在上面成为一个大师成为一个Master或者是CodeX MasterHikeRound也可以那它问题是什么呢就是说CodeX它到底是真的会写代码呢还说它就是把别人写代码记住了因为CodeX它给它不上训练的这这这么题被别人都已经写过很多次它的理事是自己真的会思考还说它记住了这样一个东西然后它们发现它可能就是主要是靠记住走到这个结果它们就发明了一个新的Frenwork这个Frenwork可以去以Wideway它代码的写都能力是怎样的就是说它把这个题稍微改一改发现CodeX有时候就不灵了好了那我们先来看一看这个文章是一篇文章类似于文贺的篇文章因为它就是做了一个几外的Weatation以Weightation的话就非常无聊一张图都没有没有图的话我在这里给大家讲就非常无聊我解读而刺接着而刺所以说就要拆解解解解解解解正好翻译成中文这样的话会比较方便一点那么说什么呢就是HikeZone上有115个拍放的这样的一个问题然后它就拿CodeX去解着115个这样的一个问题那其中90%的问题就是说你什么都不需要给CodeX提供也不需要提示它这种东西沾进去它直接写出来就是对那么如果说给它一些少样门就是说我给它一些提示或者直接东西它可能能达到100%这样的一个水平少样门我不知道什么意思这个少样门可以是就是说我给它一些类似的解体方法或者说我给它一些解体思度比如说呢我还要写一个非蜒纳器触点然后它可能从第一项开始或者从第0项开始或者说你不对你这个应该从第一项开始对吧那第三项才是加在一起才是第一项和第二项加在一起它听了我这个建议之后可能就写对了之前可能就写就不对但是我也不知道这少样门到底什么意思这个也不用太关心因为这个文章就是一个161评文章好的那它就发现CodeX有一个问题就是它写代码主要靠背就是它不会创新所以说它就想办法能不能就说我创造一个什么样的一个模式搞一个这种基于编异问题的这样的一个代码然后来评护一下它到底是不是能真的会写代码那么首先以言呢先说就说期待的这个大约模型比如说各种各样的比如说CodeBurter还有这些东西各种各样的大代码原代码模型它们的都是基于大型的船缩某这样的一个架构来做的比如说它还有CodeX这样的东西它是使用一个GPD3它就是GPD3但是GPD3是在GTAR上去训练它就具有一个写代码的很长的能力它有一个参数量非常大有一百二十一个参数它这个参数量也是非常巨大的它到底是什么样的一个东西呢比如说Burter在这个写代码的时候有一个非常好的能力那Burter是怎么训练出来的这就是这种完心填缝的方式去训练出来就搞研码把你们一些词给它给它扣掉然后扣掉之后让它去还原这个词所以搞得跟完心填缝是一样的只不它没有点任何选项它就是去一个G的对吧I、D、M、I什么什么什么东西然后一个G它研码的可能达到百分之我记得好像是十五还是百分之八十五我忘了具体多少反正是研码是很多的就是一个G里面其实很多东西都没有然后它就靠上下边的关系去猜到底是哪一个词它不是去猜哪一个词它就是说那个词根本就不知道什么没有这个完心填缝的杰选项它就是直接把这个GP给它恢复回来所以Burter在做完心填缝的整体的时候可能比我们人类要好很多因为它给训练的数据量非常大它英语的语法的能力非常强它对于上下边单出付出这些东西注意的都比较好好了那它相关工作做的一些什么呢就是有两种不同的模式最开始的时候叫做N Gram然后后面是有Transformer这里大家今天稍微回顾一下什么叫N Gram和Transformer一会再说几件事情它就是说它Transformer节模型它可以比说完成代码然后写一些代码摘药然后代码拿理有错误然后在代码上有没有超习这样的一个问题上吗显示出一个非常坚定的性能今年有Open.i的插GP的时候能感觉到应该说一个什么事还能立刻能跟你写出来尤其是比较近代的方法这个文章是2022年的文章所以说Codex或者AppleCode的这些方法它们有一个非常好的生成代码一个能力他们怎么去做这个实验呢就是他们在一些已经开源的提供上面比如HikeRan这个提供上然后找115个拍方的问题可能它都已经见过了比如说你写一个什么非波拿去数列啊这个HikeRan也不会有这么简单的提供可能会让你写一个比如说后方数啊这些东西那这些问题呢它就是千水百量了所以说这些提供它都能非常好去生成这个代码你看它的准确率非常非常高但是它这个结果呢好像是它去重复的去mamrise这个代码它并不是说它自己真的有一个解决实际问题的这样的一个能力所以它怎么办呢就是它把这个一些问题稍微的收给它变化一下变化一点点变化一点点之后呢CodeX就无法很好去范化了所以说呢它们的为了去真正的去模拟这样的一个代码一个能力呢它就是提出了一种新的屏幕标准这个标准就是可以把一个代码稍微变一遍比如说按的变成O然后O变成A异货用这样的一个方法就可以看看就是说CodeX这个东西到底还凝不凌然后发现呢可能就不是特别凌了那这个方法就是他们这个文章提出来最重要的东西所以它前面讲了这么多东西目的就是为了说我们提出一个新的基准这个基准比以前的方法可能更有用力的然后这结论呢就是说它存在一个广泛的一个记忆问题和范化问题它范化能力很差它不能就说对一个粘粘的问题呢去得到解决它没有人的这样一个一步一步思考的能力它只是去担心的背下来那么呢在现在呢大家可能用CodeX或者这些东西来写公司的代码那如果是写出来代码有错过的话呢怎么办呢就可能会产生一些问题所以他们觉得应该最这个多研究研究好那我们现在讲讲什么是N GrandN Grand呢这是最开始的Worth ToWorth To Wacker的这样的一个方式那以后可能会给大家对点讲讲Worth To Wacker这样一个方式那它是怎么做的呢比如说我吃我吃了一个苹果对吧那叫我吃那是我吃了一个苹果对吧那是这样一个句子它呢把其中的这个比如说我吃然后呢苹果这样的词呢放在左边对吧然后呢把吃一种某一个洞词呢放在右边或者放一个什么名词会放一个什么东西啊于是呢它就用这左边的四个词呢预测右边这个词对吧那比如说我怎么样的一个苹果对吧那我可以是吃了一个苹果对吧也可以说我买了一个苹果是吧也可以是我卖了一个苹果但是它就不太可能是我玩了一个苹果那于是呢我然后呢苹果你这个洞词之间呢就建立起来一个PoreJax这样一个联系对吧就是说我怎么对这个苹果到底干了什么事情啊然后这边是干了什么事情于是呢PoreJax呢就可以把这个事情呢给它表示出来那Skipgram呢其实也是这样那这就是把它放过来对吧就说我这个也是这样的就说我可能怎么样的一个苹果对吧找到他们之间的这样的一个对应的联系于是PoreJax呢就能够找到就是说某一个词对应其他的词的这样的一个观点然后呢我把它画出来的话呢这样我那我把它画出来的话呢就可以画成内实于这样最后呢因为它就是像一把这个每一个词都引白领在的一个空间之种所以说呢比如说困呢就可以引白领在这个位置然后听呢可以买领在这个位置乌漫可以买领在这个位置漫可以买领在这个位置那你发现呢乌漫到漫呢它是性没变化然后困到听也性没变化他们俩之间的距离呢是完全一样然后困到乌漫呢就是说把黄这是有没有黄泉然后卖到听呢也是有没有黄泉所以这两种东西的这个距离呢也是一样的于是你发现呢就是它能够把空间进行欠乳并且它能够让这个空间进行欠乳并且它能够让这个空间进行有逻辑对吧它B和BG是这样就能欠乳对啊那Smole和Smole是这样的一样的欠乳那这就是我们所说的这样的一个N Gram或者Skept Gram的这样的一个方法那这个方法呢它就是广泉用于Waterbike那是2013年呢时候大家去广泉就去编码这样一个问题那么说呢深度学习的本质是什么东西呢就是我们通过呢游损一样说来找到物体之间的一个观点比如说呢我左边呢输入了一张图那这个图呢可能是一张正常的一张外面呢我拍出来的风景图那右边这个图呢就是这个图呢Syckmon对吧比如说哪里是汽车哪里是蓝天哪里是地然后哪里是人对吧我做了一个图片做了一个风格那么呢我就用OtahineCode的这样一个东西它呢把这个数据的新压缩然后把这个数据的再放大它这样的话呢我这个就能够从中央这个引扣的这个Data对吧以后呢我再放进去一张新的外面拍出来的图片那我就可以得到一个新的一个图片那说为什么它要变小呢它永不当具职通呢那你要职通的话呢它就学习不到任何的这个知识这个怎么去想呢就是我们有个学生对吧我让它去考试那这个考试呢可以是一个开源的一个卷子但是呢这个开源卷子呢如果我要学生带无限多的东西那学生用的带手机用的带电脑用的带这个扣电网能带这个里面去用对吧它将于中央这个引扣的Data呢可以是一个非常宽的一个Data因为它不需要做任何的知识压缩嘛它这个知识随时查对吧那它呢其实考完试之后呢对于考东西呢根本就没有一个理解别说我考试第一道题把那个后翻数的问题然后呢它呢这个题呢就直接去马上搜了一下直接把它就搜出来那第二题呢我还问了一个卡班率波的问题那这个问题呢它也是到往去直接搜了一下这个题呢就直接出来了尤其是这种定义类的问题它的怎么有学到任何的知识但是我怎么让学生呢它学到的知识呢就说我们呢也是去做这样一个网络但是呢我呢也是开源但是呢我就是这样学生的只能去超一页指的这样一个小超你去考试那学生呢这个每天学的知识呢压缩压缩它一旦压缩的之后呢它这个以后这个网络就就有了一个找物体这件关联的一个能力那我每次呢拿着我这样的一页小超纸对吧那我前面和后面有具有足够的联想能力以后对于任何的问题呢我都能有一个非常好的一个解决思路那这就是我们说深度学习的一个本质那Instagrams.gipgram呢大概也是这样的一个感觉就是说呢它找到了一个物体和物体之间的一个projection它怎么今天有损压缩呢就是这边呢它是你看这是T加2T加1T加2就是让有一个地方呢它没了是吧它没了以后呢用这个种确实一个东西的方法来找到物体之间的联系那这就是我们所说的有损压缩这样一个过程好了那么呢还有什么有损压缩的方法呢比如说我们有这个传错们那传错们呢就是我通过举站的运算对吧那举站成来成去传成去之后呢我就可以得到物体之间的一个联系比如说嘛QOK这个举站称来一系对吧QOK的转制传传来以后的都要这么一个举站那这样的一个举站呢我得到的就是我们这些物体之间他们的这个相似的程度啊是怎么样的然后再称一位微视它的这样的一个成数然后传来以后呢就最后得到了我们想要的这个物体这两物体两个句子对吧两瓷他们之间的一个关联的一个程度是怎么样的那我也有一个句子对吧比如说我吃苹果那这个吃呢是和什么联系的第一次在一起的话我们用这个方法就可以找到就是谁吃呢我吃我吃了什么东西呢吃了苹果那这个句子就这么串起来这就是一个句子之中做了天神的这样一个方法那你要感谢一下可以看一看我之前讲传缩码的文章好了那这个地方就给大家再回顾一下就是以前我们讲传缩码的时候说呢就是传缩码呢是用举站来做的对吧那我们以前YSTEM和RN的时候呢它就是用一个边量来做WU和W让每次动态去更新WU和W这三个边量RN呢就是直接就每次都封还更新就像TX号告一样那它就把钱贸东西都覆改掉然后呢YSTEM呢就是说你每次贴的时候小网告的给它磨的透明一点那这样的话你贴的下一个小网告之后你上个小网告还能看的所以这样的话它就有一个更长期的一个记忆对吧比如说最开始第一个先贴的管道书通然后贴的个美女配调然后贴的一个什么什么迪并没毒对吧那贴完三层以后三层都能看得清楚所以说RN或者是YSTEM这样一个模式但它只能记住一个东西我也不知道为什么放这个PBT反正就是大家回顾一下然后最后呢说它的讨论了一下说Codex它的一个能力是怎么样我们来看一看这个配合这个配合其实挺过聊的首先呢就是我们现在看一看就是真正的拿就是拆解PT这样的东西来写代码是什么样比如说我说呢能够写一个后方案说代码哎它能够写出来一个后方案说代码而且写的基本上都是可以说是完全没有任何问题的但是你们发现你们的什么这些变量名啊或者是你们这些写的这些方法啊好像跟在某些伯克保证上看到的基本上一样所以说呢我就觉得这个拆解PT呢或者是Codex呢它可能没有一个自己的思维的一个逻辑你要去写一个真正的新的代码是吧它错不对于非常高的而且这种以上存在的代码它准备就很很很棒但是呢这个是由于它把这个代码给它背下的一个原因所以说它们提出了一个什么样的一个新的评估标准啊也很简单就说呢我们把问题稍微便宜一点这个问题呢以前呢可能就是一个比如说这个问题呢以前是球飞波那些数列从头开始求到最后往上有这样的体那可以变成比如说飞波那些数列的地时向的一多少就是给它变一变这样的话呢它就就是没发展从它背的这个东西去得到任何问题的它们呢这些问题呢就是整理一些自动生成变一问题的方法这个问题呢因为你人去变一的话肯定是没发出变一段那它就把这个问题里面比如说有些问题里面它有些模板性的东西它可以把这里面的几个可别参数了有什么操作服啊输入类型啊给改成不同的这样的一个不同的版本那这样的话就可以有一个非常好的就是就是考虑这个代码它能不能放化这样一个问题它就是比如使用Ord core印证就是说它每一个变一百本它最后做出来一个结果呢你怎么找它对不对那我就要使用一些方法呢去给它验证一下代码证据的性对吧我要去验就是我知道一些输入然后它知道一些输出那就像这个例子code里面做的做的方法一样我这样就可以验证我这个代码的解出来到底是不是正确的然后呢我们再去看这个比如说每一个嗯即使每一种变异它的这个成功率是怎么样的比如说呢给它变成按的变成后发现这个成功率的很高按的变成一货的发现成功率很低那我就以后就按的哦对吧按的变成哦然后这样的话呢发现这个模型可能对按的和哦这个东西它了解的不是很好可能这是把逻辑翻过来这个事它做的不是特别好于是它要找出来这种某些问题呢它可能有弱点那以后呢就用这些弱点去攻击这个模型就可以了这样就可以用这个方法是生成一个以外的A成的一个方案别它具体的力度是什么呢在我们的这个机板机制之上有很多二元运辞服运辞服比如说呢哦这个还有弄什么按的呀这些东西要跟着干的这个运辞服那么呢CodeX呢就对于原始问题呢有可能它就是很成功的比如说我想找到比如说在一列树里面有一个树出现的机树次那这个树次是哪个它可能的XO用得很好但是你给它换成一个别的什么东西呢它可能用得就很差对吧那还有很多别的问题比如说这个这种问题还有什么自不算篇版啊跟着各样的问题所以它提出一个屏固标准模型这个模型其实比较满活较的那这个呢是我在之前的一篇Service里看到的所以给大家去分享一下就觉得这个很有意思比如说呢它的里面有115115代码对吧它其中之后111是省其中之后111代码这个能力是非常强的比起来在FillShout的时候机板这个所有代码就全都对了就把这里摆在这个整理但是呢感觉它的这个做法就是永远像Pireting这个Mimorize的code就是它呢把以前技术的这个代码直接呢Pire的就是给它直接音舞学时候一样了这给它复制过来那这个其实没有考验出它自己有一个什么样的一个自己逻辑思维的能力吗还有的就是它们做的这个测试是大概什么样子这个题呢给大家去看一下那这就是这个软块的这样那这个HikeRunkHikeRunk的这样的一个提示什么样它呢就有个Task就是说我们有一个问题要去解决然后呢它是完整版的话呢它就是有一个音兔的方法就是我们的输入是一个什么样子的东西然后输出是一个什么样子的东西这个其实呢是给程序更多的一个提示但是如果你要是这个东西它不是一个就是你如果是把后面的本山掉的话它就是提示的更少一点它就是单纯的就是Task然后呢你发现呢它单纯的输入Task的时候呢哎这个程序呢可能也能非常好去把这个问题解决掉比如说我以前来说Taggbt改代码的时候呢我改的其中的某一段的代码然后结果做到就发现了这个Taggbt既然能够把然后呢我把这个我改的这代码放进去Taggbt在生成这个测试用力的时候呢既然能把前面的和后面代码都完全正确的生成出来那说明它把这个东西都背下来了大家是这样的一个情况好的然后呢最后就看一看它这个结果什么样的就是MIME这个它的一个记忆性是什么样的就是它呢总是能生成一个完全正确代码当这个问题呢它是以前见过的那这样的一个问题就可以生成毕竟呢当有时候promp呢它比较缺失的时候就是我问它的问题不完整的时候它一样能够生成一个非常正确代码但是问题就来了就是当这个代码呢就是我需要生成代码呢和这个原始问题不太一样的时候比如说这个问题呢是一个变化的问题那在考试中正常的要整个事有些问题呢它可能经过一些变化那它呢它呢就会产生一个错误百出的这样一个代码那这就是它具有的这样一个problem这个重序呢其实并不一定会真正会思考这个逻辑它有的时候呢就是完全的是靠背机好那今天视频到这点给大家观看我们下期再见
