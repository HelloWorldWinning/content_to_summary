Timestamp: 2025-02-19T22:17:59.147267
Title: 黄仁勋：“别再学编程，如果一切重来，我会学习。。。” 聊聊 AI 阴影下的程序员生存技能 | 回到Axton
URL: https://youtube.com/watch?v=GBi5IUvbxRE&si=Uf_eZlinGiMPJk0Q
Status: success
Duration: 14:57

Description:
好的，下面是对这段内容的总结：

1.  **核心观点：** 在AI时代，程序员的生存关键在于提升解决问题的能力和学习驾驭AI的技术，而非仅仅掌握编程语言。

2.  **总体框架：**
    *   引出问题：AI是否会取代程序员？
    *   案例分析：利用AI辅助编程实现字幕跟随效果，揭示AI在编程中的优势与局限。
    *   能力拆解：完成任务所需的三大能力：提出解决方案、编程能力、问题解决能力。
    *   程序员分级：初级、中级、高级程序员在AI时代的生存挑战与应对。
    *   计算机科学的价值：培养解决问题的能力，而非仅仅是编程语言的学习。
    *   AI时代的核心能力：Prompt Engineering 以及 AI 与自动化的结合。
    *   提升自身能力：领域知识、好奇心、关注核心能力。
    *   结论：持续学习和适应AI技术是程序员在AI时代生存的关键。

<Mermaid_Diagram>
graph LR
    subgraph 程序员的生存之道 [程序员的生存之道]
    direction TB
        A[核心：解决问题能力&驾驭AI]:::core --> B(持续学习与适应);
        A --> C(领域知识);
        A --> D(好奇心与探索);
        A --> E(关注核心能力);
    end

    subgraph AI的影响 [AI的影响]
    direction TB
        F(AI 辅助编程);
        F --> G{优势：快速代码生成};
        F --> H{局限：缺乏问题解决能力};
        G --> I[降低行业门槛];
        H --> J[依赖人类指导];
    end

    subgraph 能力要求 [能力要求]
    direction TB
        K[提出解决方案];
        K --> L(领域知识);
        K --> M(技术预见);
        N[编程能力];
        O[问题解决能力];
    end

    A --> K;
    A --> N;
    A --> O;

    B -- 适应 --> F;
    B -- 学习 --> Prompt Engineering;
    B --> AI自动化;

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#ccf,stroke:#333,stroke-width:2px
    style C fill:#ddf,stroke:#333,stroke-width:2px
    style D fill:#ddf,stroke:#333,stroke-width:2px
    style E fill:#ddf,stroke:#333,stroke-width:2px
    style F fill:#ccf,stroke:#333,stroke-width:2px
    style G fill:#eef,stroke:#333,stroke-width:2px
    style H fill:#eef,stroke:#333,stroke-width:2px
    style I fill:#ddf,stroke:#333,stroke-width:2px
    style J fill:#ddf,stroke:#333,stroke-width:2px
    style K fill:#ddf,stroke:#333,stroke-width:2px
    style L fill:#eef,stroke:#333,stroke-width:2px
    style M fill:#eef,stroke:#333,stroke-width:2px
    style N fill:#ddf,stroke:#333,stroke-width:2px
    style O fill:#ddf,stroke:#333,stroke-width:2px
</Mermaid_Diagram>


Content:
嘿你好 欢迎回到 Axton 在 AI 会写代码的今天 程序员还有存在的必要吗 英伟达的 CEO 黄仁勋啊 最近在世界政府的峰会访谈当中表示 不要让孩子们再学编程了 当然孩子以后该学什么专业呢 黄仁勋也在视频的后面给出了建议 我们家小孩 刚刚选择了计算机科学专业 黄仁勋就暗示 学习计算机科学不重要了 这不是吓人吗 今天啊我就用一个简单的编程案例 从一个老程序员的角度来聊一聊 AI 会取代程序员吗 或者说什么样的程序员 甚至什么样的人 才能在 AI 时代生存下去 首先我们来看一个 让 GPT-4 和 Claude 帮助我写代码的实际案例 代码的目标呢 是实现一个这样的字幕跟随的效果 视频编辑软件呢 我用的是剪映 我们就新建一个项目 然后从 0 开始演示一下 怎么样去做到这样的效果 首先我们选中所有的字幕 然后给字幕加上动画效果 新年打字机效果应用之后呢 默认情况下 打字机的动画效果 它持续时长是 0.5 秒 我们可以看到 它每个字幕下面有一个小短箭头 就表示动画效果的持续时间 我们可以看一下效果 我们可以看到 因为 0.5 秒的持续时间太短 效果呢很不明显 但是呢要优化一下也很简单 要想模拟真正的字幕跟随效果呢 我们只需要把动画的持续时间 拉长到跟字幕一样长就可以了 比如我们就用这条字幕来试一下 默认的时长是 0.5 秒 我们就把它的时长 拉长到跟字幕的长度一样 然后我们再来看一下效果 那这样效果是不是就好了很多呢 但是呢如果让我们手工 把所有的字幕都调一遍 那显然是超级没效率 所以呢 自然我就想到让 AI 去写一段代码 来做这件事 所以呢 我就把剪映的项目文件啊丢给 Claude 让他给我写段代码 来 把动画效果的时长改成和字幕一样长 那完成这项任务的关键呢 就是 你要找到动画和这个字幕的对应关系 每一条字幕它对应的动画在哪里 Claude 很聪明 它知道我要做什么 很快就找到了对应的 ID 要把动画和字幕对应起来 然后代码就写完了 代码写完运行之后啊 倒是没有任何的错误 但是不起作用 显然就是它的对应关系没找对 然后我就让克劳德继续去找 结果他每次都找不对 最后呢 我只好自己去看了一遍 剪映的项目文件 然后呢 找到对应关系之后告诉了克劳德 那这时候呢 Claude 就马上写出了修改之后的代码 我们可以来看一下效果 在代码运行之前呢 我们可以看到 刚才我手工调过的动画时长 和字幕的长度一样 其他的动画时长都是默认的 0.5 秒 它是远远小于字幕的长度的 好下面我们就把代码运行一下 好点击运行 运行完成 我们重新打开一下剪映的项目文件 好这时候大家就可以看到啊 所有动画的时长 它已经拉到和字幕的长度一样 那这样呢 我们就很简单的 把整部影片的字幕 都达到了一个跟随的效果 比如我们简单的看两句 好我们来复盘一下这整个过程啊 完成这项任务呢 我们可以简单的划分为 需要三个阶段的能力 第一你要能想到可能的解决方案 在我并不知道剪映 有这个功能的情况下 我需要能够想到它可能可以做到 并且能够预见到可采用的技术手段 而第二呢 就是熟练运用编程语言 编写代码的能力 第三分析问题解决问题的能力 当结果没有达到预期的时候 我们要能定位问题 并且拿出解决方案 后面呢我会对这三个阶段再进行拆解 现在我们先回到最初的问题 AI 会替代程序员吗 我们可以简单的 先把程序员分成三个级别 初级中级高级 在前面说过的三个阶段的能力当中啊 很多的初级程序员呢 仅仅停留在第二阶段 也就是熟练运用编程语言编写代码 完成某项指定的功能 对于这些程序员们啊 是的没错 你们必然会被 AI 替代 而且替代已经开始了 我们可以看到 Claude 在整个完成任务的过程当中 做的最好的就是这一部分的工作 当需求明确 指令明确方案明确的情况下 Claude 编写代码快速而精准 如果一个程序员的能力 只是熟练的运用编程语言 那么即便是在现在的 AI 面前 也已经毫无胜算了 AI 已经彻底的抹去了编程语言 这个技术鸿沟 其实不仅仅是初级程序员啊 所有处于初级阶段的职位 白领职位啊 必然会被 AI 替代 尤其是那些具有明确的标准 可以遵循的职位 比如数据分析 初级会计师 律师助理等等 大家可以看看刚刚推出的 Davin 吧 AI 程序员 初级程序员会被 AI 替代 那么中级程序员呢 其实一样不乐观 咱们先逐步分析一下 AI 会编程 人类的语言就是未来的编程语言 所以我们 就没有必要去学习计算机科学了 听上去是不是很有道理呢 其实并不是啊 这里有一个非常重大的误解 AI 目前它只是帮你解决了语言问题 你不用去学 Python 不用去学 Java 只要你会说话 就能让 AI 编程序 但是这并不意味着 你就能变成一个合格的软件开发人员 这就好比啊 突然有一天 世界上的语言都一样了 你不用去学英语法语西班牙语等等 这也并不意味着 你就可以变成一个作家 一个演说家 前面咱们说过 当需求明确 指令明确方案明确的情况下呢 Claude 编写代码快速而精准 而学习计算机科学 就是让你能够做到明确需求 明确指令和明确方案 而这些呢 是短期之内 AI 做不到的 计算机科学的重点 永远不是 教你熟练运用某一项编程语言 大学学习呢 重点也永远不是学习知识 而是学习学习的能力 这样未来你在面对一个全新的领域 比如 AI 的时候呢 你才能够快速的 掌握这个领域的核心能力 快速的进入到一个新的领域去 那么什么是 AI 应用的核心能力呢 就是 Prompt engineering 以及 AI 和自动化的结合 我听过很多人说呀 现在之所以 Prompt engineering 很重要呢 是因为 AI 还不够先进 不够发达 等以后 GPT5 或者 GPT50 出来之后呢 AI 的理解能力增强了 Prompt engineering 呢 就不重要了 所以呢我们没有必要 去费劲的去学 Prompt engineering 那有这种想法的人 至少忽略了三点 第一假设 5 年以后 AI 发展到确实不需要 prompt engineering 了 问题是你愿意等吗 你会觉得 5 年时间一到 那些一直学习 prompt engineering 一直善用 AI 的人会突然傻眼 然后就被你超越吗 第二 AI 只有在一种情况下 会导致 prompt engineering 失去意义 那就是它可以像三体人一样读心了 否则 prompt engineering 呢 它永远是一项重要的技能 即便 AI 能用自然语言编程 能理解自然语言 自然语言它也是语言 而语言的本质呢 就是为了沟通 而沟通的效率呢 在于逻辑 在于清晰的表达 人和人之间 还常常存在着鸡同鸭讲的问题 何况跟机器呢 而 Prompt engineering 它本质上呢 就是在教你如何使用人类的语言 去跟 AI 更好地沟通 就像你学计算机科学一样 你不仅仅是要学会编程的语法 你还要学会解决问题的思路 Prompt engineering 呢 它也是一样 你学了一条写 Prompt 的技巧 比如各种 ABCD 框架 那等于你学到了一个编程语法 而学会用 Prompt 解决问题 那才叫 engineering 比如 我们很多人都听说过一项 prompt 的技术 COT 思维链 我们也知道啊 用好思维链呢 需要很好的去拆解任务 一步一步的让 AI 去执行任务 但是 拆解任务本身就不是一项简单的能力 第三现在 AI 都能优化你的 Prompt 了 那 Prompt 优化工具 会不会取代 Prompt engineering 呢 答案是不会 为什么有人喜欢越狱手机呢 难道一切 让操作系统帮你管理不好吗 一切你都使用厂商预设好的设置 不好吗这就是因为很多人啊 他更愿意掌握控制权 而 AI 他在优化你的 prompt 的过程当中呢 它会代替你去做很多的决定 你就会因此丧失控制 比如 Gemini 就是一个很好的例子啊 它会优化你的提示 甚至优化到 让你没有办法去画出一个白人 好回到我开头例子当中 三个阶段能力的第一项能力 能够想到可能的解决方案 在我并不知道 剪映有这个字幕动画功能的情况下呢 我需要能够想到他可能可以做到 并且能够预见到可以采用的技术手段 那为什么能想到 因为我大致了解剪映这个软件的风格 就是他有很多预置的炫酷的效果 那为什么能够预见到 可采用的技术手段呢 因为我发现 剪映的存储格式是明文可读的 JSON 格式 也就意味着 我可以很方便的去修改它的项目文件 所以啊遇到问题之后呢 头脑当中 立刻想出各种各样可能的解决方案 这是我多年来很看重的一项能力 例如 2023 年初 AI 爆火的时候呢 各种信息铺天盖地啊 如何快速的筛选出更有价值的信息呢 我首先想到的 就是利用 ChatGPT 的推理能力 建立一套自动化的工作流 来对所有相关的 AI 信息呢 进行重要性的评级 作为信息筛选的第一步 于是呢我就相继推出了 结合 GPT 以及自动化工具 对推特和 RSS 信息源进行筛选的视频 我应该算是全网最早把 AI 和自动化 应用于信息筛选过程的博主吧 同时详细的配置过程讲解呢 也都加入到了我的 AI 自动化课程里面去 我的课程呢 并不仅仅是教你操作软件的技巧 我甚至会把我遇到错误 解决错误的过程 调试的过程都进行演示 因为我的目的 是教给每一个学员 解决问题的基础能力 因此你才能发散思维 去解决更多的新的问题 那如何训练这项能力呢 简单的提 3 点 第一需要有广泛的领域知识 建立跨领域的思维模式 领域知识是很重要的 不管 AI 怎么发达 领域知识都一样重要 比如同样是使用 Midjourney 来绘图 在都熟悉 Midjourney 指令的情况下呢 我画图肯定是比不过一个画家的 因为我不了解什么场景 用什么风格能够更好的表达 甚至我根本不知道都有哪些风格 比如什么是巴洛克风格 我一个理工男怎么会知道这些呢 第二好奇心和探索精神 比如 尝试以多种方式来解决同一个问题 比如质疑现在的 或约定俗成的一些解决方案 来寻找它背后的原因和逻辑 第三关注核心能力 不要陷入到虚假的学习状态 比如 AI 爆火以来呢 各种工具 各种网站成千上万 如果你只是热衷于学习 各种新鲜工具的使用技巧 各种玩法 那这不是在学习啊 这是在玩游戏 虽然作为一个 AI 博主呀 我需要去关心更多的 AI 产品 但是呢即便是如此 我也没有 大撒网大语言模型呢 我重点关注的就是 GPT Claude Gemini 同时会捎带关注 Mistral 而自动化工具呢 我重点关注的就是 Zappier 和 make 这两个呢 都是全球知名的老牌的自动化平台 它们具有成熟的工作流的能力 并且能够跟数千种的应用来集成 当然我也会捎带关注 新涌现出来的 AI 智能体的工作流平台 比如扣子 但是呢我深知一个软件平台 它从发布到成熟所需要走过的历程 因此除非必要啊 不会花太多的精力在新的平台上面 那说到中级程序员呢 将会很快感受到初级程序员 甚至是小白们的冲击了 因为 AI 降低了行业的进入门槛 小白们会在 AI 的帮助下呢 快速的达到中层职位的水平 而且他们还年轻 精力旺盛 普通程序员们的黄金时代结束了 AI 将来如果不能奴役人类啊 那么它就会变成人类的工具 而谁能更有效的操控这个工具 谁就能占据领先地位 这就是我一再跟我们家小孩说的 你一定要学习好 Python 和 Prompt engineer 你要学好该怎么样去跟 AI 对话 其实黄仁勋所强调的也同样是 普通人 不需要再专门的去学习编程语言了 但是计算机科学的基础知识 以及多领域的知识融合依然很重要 那么黄仁勋现在推荐的专业是什么呢 你是否同意黄仁勋的说法呢 如果你或者你的孩子想学计算机科学 你会考虑换专业吗 欢迎评论区留言 总结一下第一 计算机科学有必要学 因为它更重要的 是教育人们的解决问题的能力 这项能力短期之内 AI 替代不了 第二提升自己的学习能力 并且致力于学习能够驾驭 AI 的技术 第三程序员会被 AI 替代吗 答案是不再学习的人会快速的被淘汰 这本来是在任何年代都成立的呀 只不过 AI 呢 让这个淘汰来得快速而猝不及防
