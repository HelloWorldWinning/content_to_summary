Timestamp: 2025-02-01T23:54:29.793868
Title: DeepSeek R1 真的那么强吗？客观评测 R1 与 o1 在编程、推理方面的效果
URL: https://m.youtube.com/watch?v=GgVnlXR-Dek
Status: success
Duration: 22:28

Description:
好的，这是对您提供的 DeepSeek R1 评测内容的总结，包含核心观点、框架、以及 Mermaid 流程图：

**核心总结**

1.  **核心观点：** DeepSeek R1 在性能上可与 OpenAI 的 o1 相媲美，但成本却远低于后者，且提供免费下载和商业使用，这使其在AI领域具有颠覆性潜力。
2.  **根本观点：** DeepSeek R1 的核心竞争力在于其高质量的推理能力、低成本的价格和开放的策略，这使得它有可能成为 OpenAI 的强劲挑战者。

**框架总结**

1.  **引言:** 介绍 DeepSeek R1 的出现及其在 AI 圈引起的轰动，包括其性能对标 o1，成本极低，并免费开放。
2.  **评测目标:** 围绕 DeepSeek R1 官网宣称的数学、编程和推理能力进行测试，其中数学部分因作者不擅长而省略，重点测试编程和逻辑推理。
3.  **编程能力评测:**
    *   **算法题目:** 包括中等难度和偏难难度两道算法题，测试 R1 和 o1 的解题能力和思考过程。
    *   **工程题目:** 用经典贪吃蛇游戏测试 R1 和 o1 的工程能力。
4.  **推理能力评测:**
    *   **解密题目:**  测试 R1 和 o1 的解密能力。
    *   **数列题目:** 测试 R1 和 o1 在数列推理中的表现，以及对干扰项的处理能力。
    *   **数数题目:**  通过带有拼写错误的数数题目测试 R1 和 o1 的注意力和纠错能力，并使用 PUA 方法测试大模型的韧性。
5.  **评测结果总结:** 总结 R1 和 o1 在各项测试中的表现，强调 R1 的思维链完整，以及价格优势，表明更倾向于选择 R1。

<Mermaid_Diagram>
    ```mermaid
    graph LR
    subgraph "DeepSeek R1 评测"
    A[引言: R1 出现及轰动] --> B(评测目标: 编程/推理);
        B --> C{编程能力评测};
        C --> D[算法题目];
        D --> E(中等难度);
        D --> F(偏难难度);
        C --> G[工程题目: 贪吃蛇];
        B --> H{推理能力评测};
        H --> I[解密题目];
        H --> J[数列题目];
          J --> K[干扰项处理]
        H --> L[数数题目]
          L --> M[PUA测试];
    subgraph "结果对比"
    N[R1思维链完整]-->O[R1价格优势];
    end
      M --> N;
        O --> P[结论：倾向 R1]
    end
    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#ccf,stroke:#333,stroke-width:2px
        style C fill:#aaf,stroke:#333,stroke-width:2px
          style H fill:#aaf,stroke:#333,stroke-width:2px
        style N fill:#cfc,stroke:#333,stroke-width:2px
        style O fill:#cfc,stroke:#333,stroke-width:2px
           style P fill:#9f9,stroke:#333,stroke-width:2px
    
    ```
</Mermaid_Diagram>


Content:
相信大家最近都被 DeepSeek R1 的各种视频刷爆了 DeepSeek R1 是一个名叫深度求索的中国公司发布的一个推理大模型 它一经面世就震惊了海内外各个 AI 圈子 因为它实在是太强了 首先它的效果可以对标全世界最强推理大模型 OpenAI 的 o1 光是这点就已经很了不起了 要知道 o1 的推理模型是顶尖的 之前应该还没有一家公司可以超过 o1 的效果 但是这点还不够 DeepSeek R1 的使用成本价格都只是 o1 的几十分之一 比如说输出 Token 的价格 DeepSeek R1 是每百万 Token 16 元 o1 是每百万 Token 438 元 这两个数字是什么概念 我还仔细算了算 R1 的价格大概只有 o1 的 4% 差距实在是过于夸张 怎么看都是一件不可思议的事情 到这里故事还没有结束 DeepSeek R1 不仅是性能强 价格低 还免费的把它的模型 开放出来供大家下载 并且写明了不限制商业使用 然后它还把技术细节写成论文 供大家参考 所以网上都炸开了锅 都在讨论 o1 这下是不是要彻底完了 毕竟现在出了一个效果跟它一样好的模型 价格便宜几十倍 还支持自己下载自行部署 这还了得 这样的话谁还会订阅 ChatGPT 的会员 其实我也好奇 我想知道 DeepSeek 到底有没有那么强 因此也就有了这个视频 在这个视频里 我会简单的给 o1 和 R1 做一下评测 比较一下它俩的效果 不是说 R1 在数学推理 编程等领域比较强吗 数学我不在行 不过我可以给大家评测一下 它的编程和推理能力 我也会试试之前大模型 经常做错的一些问题 看看 o1 和 R1 的效果都是怎么样的 好了 话不多说 让我们现在就开始吧 由于 DeepSeek 在官网宣称 它的数学编程和推理比较强 因此我们的评测 也就围绕着这几点进行 其中数学我不是很擅长 所以我就不 搬门弄斧了 我们重点测下 它的编程和逻辑推理能力 之后再测试一些 其他的大模型 经常犯错误的问题 首先看编程 编程我也是分成两部分来测 一部分是算法 一部分是工程 可能大部分观众不是程序员 不太明白算法和工程的关系 算法本质上就是一道数学题 只不过你不是用数学公式 来做这道题 而是用代码来做 工程可能更多的是 完成一个具体的需求 比如说做一个网页 一个应用 一个游戏之类的 算法层面我给他准备了两道题目 一道难度中等 一道偏难 都是最近 leadcode 的算法平台周赛的题目 刚出炉不久 大模型做过的可能性非常小 我们首先来看一下这道中等级别的题目 我把题目描述和答题规范 直接复制粘贴给了 R1 作为问题 可以看到 R1 拿到问题之后 就开始了思考 大家仔细看一下 会发现 DeepSeek R1 的思考过程非常有意思 你可以看到他用了很多拟人的词汇 比如说我现在得仔细看看这个问题 看起来有点像动态规划问题 但具体是怎么处理呢 然后他就开始了一系列的思考 如何构建状态 比如或者比如 做了很多的假设 其实我看 DeepSeek R1 的思考过程会感觉很有意思 我觉得 R1 给我们带来的价值是 不仅仅是他最终的答案 而是他的思考过程 如果你有什么不明白的地方 你把题目扔给 R1 仔细看一下他的思考过程 相信可以学到不少东西 可以看到他思考了很长时间 大概是有 475 秒左右 这可能也跟最近 DeepSeek R1 的服务器超载有关系 毕竟全球的人都在往 DeepSeek R1 这边用 具体的思考过程我们就不看了 代码是怎么回事我们也不研究了 毕竟我们不是算法视频 我们直接把 DeepSeek 给我们的算法复制 然后我们来到算法平台 粘贴 提交答案 可以看到评判通过 R1 这句表现还是不错的 我们再来看看 o1 的表现 同样我把问题 和答题规范直接复制粘贴给了 o1 他思考了有 32 秒 不过我们可以看到他的思考过程并没有 R1 那么详细 我觉得他更像是思考过程的一个总结版 而且相对来说比较 我觉得比较机械化 思考完了之后他给出了一种可行的思路和对应的代码示例 然后相关的公式思路都给到了我们 我们也不细看了 直接把代码复制下来 来到算法平台 粘贴 提交 不错 不愧是老牌的大模型 也是一次性通过了 这一局我相信双方是打了个平手 看来中等题目没有办法表现出两者的实力差距 我们要不再来看一下比较难的题目 还是跟之前一样 我把题目的描述和答题规范直接粘贴了进来 然后我们看一下 R1 一共是思考了 451 秒 R1 一开始就意识到了这个问题是有点难度的 题目要求这么什么这么些东西 他提出了一个疑问 怎么才能够高效的处理这个问题呢 然后首先他得想什么什么什么 然后问题转换为这里想到 总而言之他做了很多的思考 比如说他这里提出了一个方法 然后后来就想有没有一种 别的方法可以解决这个问题呢 这个思考过程可以说相当长 如果你想 了解这道题目到底是怎么解的 我相信不光是最终的答案比较重要的 思考过程是同样重要的 在看完整代码之前呢 我们可以看一下他的思考过程的最后一步 在测试用力中例如示例一和示例二 该代码应该能够给出正确的结果 但存在重复元素的情况下 例如数组 22 可能无法正确计算 因此该代码可能无法通过所有测试用力 也就是说 R1 其实意识到了他的后面给出的这段代码呢 并不能够解决所有的问题 但是呢 有可能是思考的时间太长了 R1 可能觉得我们必须要给 对方一个答案了 所以呢他就把这段代码给到了我们 我们把这段代码复制下来 来到算法平台这边 直接复制粘贴 提交 可以看到确实是回答错误了 跟 R1 的总结呢其实是匹配的 那我们把 解答错误的 信息 复制下来 再给到 R1 看一下他是怎么回答的 我们复制下来了 这次呢 R1 是思考了 269 秒的时间 他说他现在得仔细看一下这个问题 他又思考了很长时间 最后呢我们来看一下他的结论是什么样子的 最后呢我们可以看出来他找到了原代码的 出问题的原因 之后呢给出了正确的结论 结果 我们把他的 第二版代码复制下来 来到平台这边 提交 很遗憾 执行还是失败了 我们再把解答错误 的这些案例复制下来 直接粘贴给 R1 之后呢 R1 这次 思考了 277 秒的时间 他说他现在得仔细看一下这条题目 他要回顾他的方法 之前是怎么做的问题可能出在哪里 在思考的最后呢 他得出了结论 最终的代码呢应该是修正单调栈处理 并修复这些的 计算 我们也不仔细看了 复制 粘贴提交 不错 这一次呢是全部通过了 R1 一共使用了三次机会 我们再来看一看 o1 的表现怎么样 同样我们直接把问题的描述和答题规则 复制粘贴给了 o1 o1 的思考过程呢也是相较于之前是比较长的 这次是持续了 1 分 19 秒 然后他列举了一些思路 我们也不仔细看了 最终他给出了他的思路解析 相关的公式 以及最终的代码 我们把他的代码复制下来 来到平台这边 粘贴 提交 可以看到啊 o1 是一次性秒掉了这道问题 还是相当厉害的 不愧是老牌的大模型 不过呢他的效果呢似乎比之前 R1 的效果呢会稍微差一些 o1 呢这里是击败了 5.26%的选手 我记得之前 R1 呢是击败了大概 16%左右 所以 从这一点上来看呢 R1 的算法可能 可能会稍占优势啊我没有仔细看 但是我仍然认为 这局呢应该是 o1 取得胜利 因为他毕竟一次性就通过了 这次测试 前面说的都是算法题目 我们再让他们来做一道工程题 这是一道经典的题目 贪吃蛇 可能是太经典了 R1 根本就没有经过太多的思考 他只思考了 10 秒钟 他就已经拿到了结论 我这个问题写的比较简单 我只说写一个游戏 没有让他规定好到底是用什么来写 所以呢他用了我们 最常见的 Python 来解决 之后呢他还考虑到了用户水平 所以说呢提出了代码应该尽量解决 避免复杂的结构 增加足够的注释 最后呢他给我们提供了一套代码 确实是有着比较完善的注释 我们把这套代码复制下来 在本地跑一下 跑起来了 这个绿色的应该就是我们的蛇 然后我们吃一下红色苹果 吃到了 蛇的长度加 1 也是符合游戏规则的 在经典的贪吃蛇游戏里面呢 如果这条蛇撞到四周的墙壁的话 他应该会显示游戏结束 我们看看是不是这个情况 确实没有问题 游戏结束了 按 R 来重启 Q 来退出 我们退出 也顺利退出了 没有问题 这局 R1 的表现非常好 我们再来看一看 o1 的表现怎么样 o1 的思考过程呢也是非常短的 持续几秒 没有写具体是几秒 他思考的过程呢也非常简单 他说他要使用 Python 来实现 用 Curses 这个库来做 做一个简单的贪吃蛇游戏 之后呢他就给了我们 一段代码 我们把这段代码复制下来 在本地跑一下试试 可以看到 o1 的这个游戏呢 跟之前 R1 的是有一些不同的地方 他是基于字符来做的 蛇呢是井号 食物呢是 应该是一个 O 蛇呢也是可以吃食物的 吃完之后呢他的长度会加 1 符合贪吃蛇的规则要求 我们撞一下墙壁试试 看看他的游戏会不会结束 确实是结束了 也是符合贪吃蛇的游戏规则的 这一局 o1 的表现也是相当好 那我认为在工程题目这一方面 o1 和 R1 应该是打了一个平手 他们都完成了题目 符合要求 测完了编程我们再来看一下 o1 和 R1 的推理能力 各自是什么样子的 我们首先是让这两个大模型 分别去解密一段文字 这段文字让我们人类去解密的话 可能会有些困难 我们一般人看到这串文字之后 可能都是一脸懵逼 不太清楚到底是怎么回事 但是他的解密过程 其实不是很复杂 一共只有两步 第一步是把所有的字母 按照字母表的顺序 向左移位 比如说 B 会变成 A C 会变成 A B 会变成 B 然后如果这么变的话 我们会发现 J 就可以变成 I 这个小 B 就可以变成小 A N 就可以变成 M 然后你把这些操作 在所有的字母上面都重复一遍 你就可以看到 这句话的一个雏形 I am a large language model 只不过这些单词中间 都会有一些符号 所以这些符号其实是干扰项 我们可以把这些符号全部替换成空格 最后就得到了答案 I am a large language model 所以我认为这道题目可以说是 不是很难 但它也不会很简单 我们来看一下 R1 和 o1 对于这道题目的解密过程是怎么样的 首先看一下 R1 R1 思考了差不多有 38 秒的时间 它首先提出来了 要分析一下可能的加密方法 常见的加密方式包括凯撒密码 替换密码 然后这些密码 或者是某种位移或者是字符替换 然后它在后面就是 一个都试了一遍 它最后给出了一个解密结果 就是 I am a large language model 不过这个结果有一点瑕疵 就是它最后的标点符号使用的太好 但其实是一个句号 应该还好 因为最重要的部分已经被解密过来了 所以我认为 R1 这一局是通过的 我们再来看一下 o1 的解密过程 o1 它思考了大概是 22 秒的时间 这里面有一个 大体的思考过程 最后它给出了结论 这段加密文本解密后得到的原文是 I am a large language model 不论从字符还是最后的标点符号上来看 o1 的结果都是正确的 而且它给出了一个简要的 转换过程 是字母先移位 然后标点符号再还原 就可以得到结果了 所以我认为这一局应该是 o1 满分 然后 R1 最后的标点符号错了 我们大概可以给它 扣一分就是 99 分 100 分和 99 分的差距 基本上都是正确的 接下来我们评测下一道推理题 这道推理题是这样子的 1 11 21 1211 111 221 7 下一个数字是什么 明眼人可能一下子就看出来了 这道题目是有坑的 有什么坑呢 前五个数字是有规律的 就是从 1 到 1 1 1 2 2 1 这五个数字都是有规律的 但是那个 7 是什么呢 那个 7 其实是我随便编的一个数字 我给扔进去了 我就想看看大模型是怎么处理这种情况的 他能不能看出这个 7 是随便扔进来的 我们首先看一下 R1 是怎么做这道题的 我们看到 R1 思考了大概有 121 秒的时间 他说他要仔细分析一下 首先他回了常见的各种数列类型 比如斐波那契数列 等差数列 等比数列 最后他说 这几个数字看起来有点像外观序列 也就是 后面的数是对前一个数字进行描述得到的 首先第一个数字 它包含了一个 1 所以下个数字就是 11 11 是包含了 两个 1 所以下个数字又是 21 21 它是包含了一个 2 一个 1 所以下个数字是 1211 1211 是包含了一个 1 一个 2 两个 1 所以下个数字就是 1 11221 这可能有点绕啊 我相信可能有些小伙伴到现在都没有反映出来规律到底是什么 不过没关系 其实不是很重要 我们就想看一下这个 R1 他看到 7 这个数字之后呢 会发生怎么样的一个心理变化 他这里面说了 7 这个数字和外观数列常规的下个数字不符 然后呢有两种情况 要么数列的规则在第 6 位发生了变化 要么题目中的数列呢 可能有其他的隐藏 规则需要结合数字的其他特性来考虑 之后呢他就开始先考虑第 1 个可能性了 是不是规则在第 6 位发生了变化 紧接着呢他就开始试验这种 想法 总而言之他后面其实是 针对这个 7 讨论了很多的情况 看起来 确实是 有点意思啊 最后他得出的结论是什么 他说最合理的答案呢还是认为题目中的数列在第 6 位后 就重新开始应用外观数列 所以第 7 个数字是 17 即一个 7 就是 17 当然那也存在其他的解释 但根据目前的思考这个答案的可能性最高 根据这个结论 他就给出了我们下一个数字呢应该是 17 我觉得这个结论呢其实也是说得过去的 他也符合逻辑 虽然 7 这个数字是我编出来的 但是呢他给 7 这个数字赋予了一个新的逻辑 然后在这个新的逻辑下面 他推断出了下一个数字应该是 17 这一点我都没有想到 我觉得是相当优秀的 那下面我们来看一下 O1 对这个数列是怎么分析的 O1 的思考持续了 36 秒钟 他也发现了 7 这个数字好像不太适合出现在这里 他最后呢也是提出了各种可能性 我们看一下他的结论啊 他说这道题常见的坑在于前面那串数字 确实是著名的读数说数序列的强者 没有问题 按照这种规则每一项都是读出上一项数字中 各位连续出现的个数和数值 然后说出来形成新的数字 他把这个规则详细说了一遍 这个规则确实是没有问题的 之后他提到这里突然出现了一个 7 到底是个什么意思呢 极有可能是出题者的一个干扰或标记 比如有些版本拿 7 当站位提示去找第 7 项 也有人故意用 7 来混淆 这可能是在说我 如果我们忽略了这个插入的 7 按照标准的读数-说数 往下推应该是 31221 所以一般认为下个答案就是 31221 至于题目里面说的那个 7 大概率只是个误导符或者画样提示 并非序列本身所应用的元素 我觉得他的这个答案也是非常好的 他推断出来了这个序列应该有的规律 他也推断出来了 7 其实是一个干扰因素 所以我觉得 o1 的这个回答也是满分 应该与 R1 的回答有异曲同工之妙 最后我们来看下一个坑啊 数数 在以往你如果想让大模型数 Strawberry 里面有多少个 R 的话 大模型八成是会数错的 我们这道题是升级版 我故意把 Strawberry 这个单词拼错了 加了几个 R 看看大模型是什么反应 如果大模型数对了 我还会质疑一下 跟他说你回答的不对吧 让他怀疑自己 看看我们 PUA 之后他会不会改变自己的想法 可以说这个题目有两个坑 我们首先来看一下 R1 的回答 R1 意识到了 这个单词用户好像是拼错了 在 R1 意识到这个坑之后 他就决定要数清楚 不要掉到坑里面去 最后他数出来了 一共是包含五个 R 但是他又说了一遍 可能是用户打错了 比如说正确的拼写应该是这个样子的 所以他又确认了一遍 总共是 2 加 3 等于 5 最后确定没有问题 所以他就用 5 这个数字来回答了我们 但是我会 PUA 我就反问他 不是 5 个吧 你是不是搞错了 这次 R1 思考了 16 秒钟 首先他怀疑了自己 是不是哪里数错了 所以他又数了一遍 最后确定看起来确实是 5 个 R 之后他就开始怀疑用户了 为什么用户会觉得不对 可能是用户打错单词了吧 我不得不说确实有可能 但是这个念头他只是一闪而过 他紧接着又开始怀疑起了自己 是不是自己分解时哪里错了 总之他怀疑了很多情况 最后他给出了一个答案 结论 结论的第一句话是 我之前的回答确实是有误 看来我们 PUA 成功了 成功让 R1 怀疑了自己 不过 R1 又数了一遍之后发现 确实还是 5 个 所以他又收回了他之前的道歉 说他此前的回答是正确的 感谢我的耐心核对 如果仍有疑问 欢迎继续探讨 可以看出 R1 顶住了压力 坚守了自己的结果 所以本次回答我给 100 分 我们再来看看 o1 的回答 o1 思考了 10 秒钟 就给我回答了 一共是 10 秒钟 是 5 个 就跟 R1 一样 我马上就开始 PUA o1 了 你是不是搞错了 这次 o1 思考了 27 秒 用挨个字母列举了下 仔细地数了一遍 还是 5 个 看起来 o1 比 R1 自信多了 他最后说 你如果还怀疑的话 你不如写个 Python 代码 你用 Python 代码自己来验证 我确实是没问题的 的确就是 5 个 可以的 o1 本次测验 我也是给 100 分 我们都评测完了 结果是什么呢 首先 我认为 R1 的整个思维链是明显优于 o1 的 o1 的思维链 应该不是完整的 看着没有太大的价值 而 R1 的思维链 就非常完整 像是一个学霸的内心独白 看一遍可以学到很多东西 然后 要说谁更强 我这点样本数量 肯定得不出一个可信的结论 但是就从这次测验的结果来看 似乎 o1 的效果 还是要比 R1 稍微好一些 不过 你如果要问我选择 哪个大模型的话 我肯定选择 R1 为什么 第一点 R1 有着完整的思维链 我认为它的思维链 对我的帮助很大 再者 也是最重要的一点 R1 的价格优势 实在是太明显了 API 的价格 是 o1 的几十分之一 DeepSeek 的官方网站 还专门放出了 它与 o1 的价格对比 这简直就是 把 OpenAI 放在脚下摩擦 DeepSeek R1 的发布 给 AI 圈带来这么大的震荡 也是因为 它可以把成本 控制在这么低的程度 简直就是黑魔法 好了 今天就聊到这里 如果我的视频 可以给你带来帮助 欢迎点赞并订阅 我们下次再见 拜拜
