Timestamp: 2025-02-20T10:35:32.338004
Title: Algorithmic Trading Python for Beginners - FULL TUTORIAL
URL: https://youtube.com/watch?v=GDMkkmkJigw&si=Jef0V26U_AUAVNWi
Status: success
Duration: 3:00:48

Description:
好的，以下是您提供的文本的概要和概念地图：

**核心观点：** 通过Python和相关库，可以从零开始构建、回测并优化量化交易策略，最终实现从初学者到专业人士的转变。

**总体框架：** 本文构建了一个逐步深入的Python量化交易学习框架，从环境搭建、数据获取与处理，到策略构建、回测及API应用，涵盖了量化交易的核心环节，旨在帮助读者从零开始掌握量化交易技能。

**概要：**

1.  **环境搭建与基础知识：**
    *   安装Anaconda：用于数据科学的平台，包含Jupyter Notebook、Python等工具。
    *   Jupyter Notebook：用于编写和运行Python代码，进行数据分析。
    *   安装yfinance：用于从Yahoo Finance获取金融数据。
    *   Python基础：变量、函数、库（yfinance, pandas, numpy, matplotlib）。
2.  **数据获取与处理：**
    *   使用yfinance下载股票数据。
    *   数据结构：Arrays、DataFrames。
    *   Pandas操作：
        *   读取和写入CSV文件。
        *   多重索引的处理。
        *   数据清洗：缺失值处理。
        *   数据转换：调整数据格式。
    *   日期处理：转换日期格式。
3.  **数据分析与可视化：**
    *   描述性统计：使用describe()函数获取数据统计信息。
    *   数据筛选：使用.loc()函数选择特定数据。
    *   绘图：使用matplotlib进行数据可视化。
    *   数据归一化：将数据缩放到同一范围。
4.  **策略构建与回测：**
    *   简单移动平均线（SMA）策略。
    *   移动平均线交叉：确定买入和卖出信号。
    *   计算策略收益：
        *   日收益率计算
        *   累积收益率计算
    *   策略评估：
        *   年化收益率。
        *   标准差。
        *   最大回撤。
5.  **高级主题与优化：**
    *   简单收益与对数收益的对比。
    *   创建函数封装策略流程。
    *   利用类（Class）进行模块化。
    *   API的使用。
6.  **风险评估与优化：**
    *   波动率计算
    *   相关性分析
    *   风险回报图表的绘制
7.  **实际策略案例**
    *   长仓趋势策略

**Mermaid概念地图：**

<Mermaid_Diagram>
graph LR
    subgraph A [基础知识与环境搭建]
        A1(安装Anaconda) --> A2(Jupyter Notebook)
        A1 --> A3(安装yfinance)
        A2 --> A4(Python基础)
        style A fill:#f9f,stroke:#333,stroke-width:2px
    end

    subgraph B [数据获取与处理]
        B1(yfinance下载数据) --> B2(Arrays/DataFrames)
        B2 --> B3(Pandas操作)
        B3 --> B4(数据清洗)
        B3 --> B5(数据转换)
        B1 --> B6(日期处理)
        style B fill:#ccf,stroke:#333,stroke-width:2px
    end

    subgraph C [数据分析与可视化]
        C1(描述性统计) --> C2(数据筛选)
        C2 --> C3(Matplotlib绘图)
        C1 --> C4(数据归一化)
        style C fill:#fcf,stroke:#333,stroke-width:2px
    end

    subgraph D [策略构建与回测]
        D1(SMA策略) --> D2(移动平均线交叉)
        D2 --> D3(计算策略收益)
        D3 --> D4(策略评估)
        style D fill:#ffc,stroke:#333,stroke-width:2px
    end

    subgraph E [高级主题与优化]
         E1(简单 vs 对数收益) --> E2(函数封装)
         E2 --> E3(类的模块化)
         E3 --> E4(API应用)
         style E fill:#efe,stroke:#333,stroke-width:2px
    end
   subgraph F [策略风险评估与优化]
         F1(波动率计算) --> F2(相关性分析)
         F2 --> F3(风险回报图表)
         style F fill:#bbe,stroke:#333,stroke-width:2px
    end

     subgraph G [实际策略案例]
         G1(长仓趋势策略)
         style G fill:#e9e,stroke:#333,stroke-width:2px
    end
    A --> B
    B --> C
    C --> D
    D --> E
    E --> F
    F --> G
</Mermaid_Diagram>


Content:
hiya so today what we'll be discussing is about algorithmic trading so there's lots of content available online especially in youtube with respect to algorithmic trading which is free stuff but i can only find one single video and that's this one but this too again it might be slightly difficult for the average joe out there with the extreme coding um that takes place here so what i thought was i'll create a video which starts from the absolute basics of python programming in algorithmic trading and we'll start from like the whole mentality of like zero to hero concept like start from nothing and then go all the way to creating strategies and running these strategies after back testing them so the first thing we'll need is to install anaconda so anaconda is this great data science platform so we'll just go go to google and then type in anaconda and then you go into the anaconda website and just click on products and individual edition and you just can download the file and then just go to the installer just go for default for everything and the anaconda will be installed so it might take time to download and run the installation based on your internet provider and everything but once the installation is done you just have to click on that anaconda navigator um and the anaconda pops up so anaconda basically is like this toolkit we just got lots of things in it like jupyter notebook and python and all those things and you can actually use those to do your algorithmic trading and this is the new not the new has been for a while and this is where people actually do their financial trading analysis so once you go into the anaconda navigator i want you to install one specific thing so i want you to go to environment and then click on display looking button and open the terminal and once you open the terminal i want you to install wi-fi now so why finance is yahoo finance so it installs the what why finance package so you can download the data from them so all you need to do is do pip3 install y finance just put enter and it basically does the installation for you so once the y finance has been installed now we can do two major things we can actually download the data so first let's go and install well not install uh launch the jupyter notebook so what's going to happen right now is a jupyter notebook gets opened in your firefox so you can see all the files that you have so you can basically create anything that you want so you can create a new folder or a new file so what i'm going to do is i'm going to create the desktop and then i'm going to create a new folder and i'm going to call it where's the new folder i think it's this one on title folder two i'm gonna take that and then i'm gonna create a new file so what not a text file we're going to create a new python 3 file so that's pretty much it on how to create a simple jupyter python 3 file so i'm going to name this youtube just to start off with i'll call youtube one write it down yt1 and let's actually go through the first few lines of code so let's start so first let's close some of the tabs here so you see this desktop untitled folder too so never close that thing so that should always be running and we're gonna work from here so let's go through some basic stuff like let's say a equals five so and let's print a print a what you get essentially is and do shift and enter so to run the code you can have two ways either click on the run here or you can do shift and enter so when you do print a you get five so print is essentially a function so basically the definition of a function is like it does a certain kind of a job it's like your kidneys have a function your brain has a function so the print function prints a so you have lots of different functions we'll come across many of the functions you can also do simple calculations here so for example a equals 5 and b equals six we can do c equals a plus b and then we can print c and what you get is eleven so you can do the mathematical calculations here um there's also many other functions let's say a equals minus five let's run this so what you get is print c which is equal to one so a is here is minus five so let's do what the absolute of a is and i'm gonna do shift and enter again so now the absolute value of minus five is essentially five so if at any point let's say you get some code from me or get one called from many other people uh one of the things you could do is you could test whether uh what that function does so in order to do that all you have to do is press shift click on this function there anywhere in the function and then click shift and tab basically tells you what its uh job is so in this it says prints a value to a stream or two by default so similarly you can go to abs and do shift plus tab and then you get returns the absolute value of the argument so i guess you got a gist of what a simple function is so what the um what kind of calculations we can perform in the python jupyter notebook so let's go to another thing and that's called library so libraries like imagine library as like an area where you can where lots of functions are stored and you can use lots of functions uh if you add that library in your jupyter notebook so a simple example would be let's say i'm going to import y finance syf now the advantage of this is remember we installed the y finance using picture install so when i do this what happens is that i can use the y finance library to download the data but in order to do that first i need to call this i need to import this wi-fi now we've installed before into this jupyter notebook into this file so similarly i can do many things i'm going to do other libraries as well import pandas spd import numpy as np and import mat mat plot lib dot pi plot pie plot as plt so um every each one of these has got its own um functions within itself so we're going to come across it one by one as we run through the program run through the code so i'm just going to run this and what you see here is you can see essentially a star sign so that's basically uh the code is being run so finally we've we've got the green signal we've got five here and you also notice here you see this white uh what was it great uh it doesn't matter really so let's first download our first data so let's call stocks oh let's call it apple so let's call apple equals we can use a yf the white finance library to download it so it's pretty simple so if dell download um so what's a ticker name for apple it's aapo so aapl and let's mention some dates for it so let's call it start equals 20 10 0 1 0 1 and let's also mention the end date and date will be equal to 2019 zero one zero one let's see you can do all the way to 2021 yes so let's do shift and enter to run this and you can see 101 is completed so the entire data from 2010 to 2021 january is being downloaded and it's stored in apple so you can see the amazing ability of the white finance library so it's like free data free end of the day daily data so let me just run through this apple apple so you can see we've got the apples data starting from um 12 31 that's like the last day of the uh just before the last day of new year in 2010 and then from 2010 0104 so those days between that is like the holidays and the weekends all the way down to 2020 12 31. so similarly you can download any data that you want uh by using white finance by using the ticker sample so you can download multiple data at one time as well so how do you do that so before that i need to talk about arrays so let's go and create a simple array so let's do one comma two comma three comma four four five so create a bracket here and i've created one two three five so those are arrays and stored it to a so now if i just type in a what i get is one two three five so similarly you can create an array of tickets so i can do tickers could be spy so i can get the spy data and i can get the aapl data the apple data and then let's do one more let's do coca-cola okay oh and yeah so it's now stored in ticker now i can use the exact same um apple uh this this function here i have to download and land it here and just change the name here to stocks and change this thing to ticker note that i have removed the uh what's that call quotation ticker so ticker start and then so practically all the sby a appeal and ko from the start of 2010 to 2021 now will be stored to stocks so let's run this three of three is completed now let me just run through stocks so you can see the amount of data we've got over the past 10 plus years multiple download at the same freaking time so that's a beautiful thing about downloading data now let's go to another user's function so again remember this download um function here again if i go click here and type in and press shift and tap like i said before you can understand what a function does so if i expand it you can say the start date the end date by default there is none so that's why it's mentioned here by default none so that's why we're specifying the date we can just go down and see the different intervals the period so we can change the valid interval so by writing interval and then by changing it to weeks a month we can get different data so again uh end date you can see the format of it year year month month day date by default is now so all the many other ways of describing what this function does so let's go to again rather than taking this a bit complicated we'll just uh go through some simple functions here so let's do stocks. head so the head function basically takes the first few five columns five rows so you can see the first five row similarly stocks dot tail will give you the last five um data so it's from 2020 all the way to 1251. so that's the head and the tail um we can also have the info function which gives us all the information of the available data frame we have so we've got the adjuster closed we've got the clothes we've got the high low open and volume so the volume is an in format all the rest are in float format so int is basically integer float can be decimal points and all those other things now how can we convert this so we've got this data stored in stocks right so so if i call in stocks what i get is this so i can convert this to cfc csv file so to underscore csv and i can actually call this or save this thing called stocks youtube so so what this basically does is that it saves the stock's data to a csv file so if i press enter and basically you've got the stocks youtube. csv file saved in the same folder as the folder you opened the python file now let's say you need to read it so i can do read stocks or we'll call it stocks itself doesn't change anything so once you give the same name it kind of overwrites the previous name so basically i can do stocks equals pd. read underscore csv so this is where i'm using that pandas library pandas pd so we're going to read the csv using the pandas function that read csv and i'm going to call the name of it which is just basically this one here just copy and paste it i'm going to run this so now if i run stocks basically this is what i get so now i've learned how to write a csv file and also how to read a csv file now let's make a few changes to this so i'm gonna take this and then what i'm gonna do is you can see the whole column in row is a bit complicated so i'm going to play around with it so you understand how to make future changes so i'm going to comma here and then i'm going to do header equals 0 comma 1 so what it does you will know in a bit once i run it so let's do stocks so as you can see this one here just a close now there's a slight change now we can have a close uh you see the close close one close too close sense of that close is now above high is now above uh just the closest here so in the low open and volume so it's actually separated this and then the other problem we can see is a date nan uh so we'll come to that as well in a bit so we need to change the index column for that so i'm going to do the exact same thing copy paste this and i'm gonna call that an index underscore call equals zero again you'll understand what this job does in a bit so suddenly you can see the date is now above that column before it was like in there in and above this so now you can see it's more neat more simple you can do more changes now you can do the thing called parse dates so again i'm going to do pass dates here date equals again bracket zero so what does pause dates do so basically i can again do shift in tab and then i can expand it and there will be somewhere you can see past dates so bool or list of inter names a list of listed default behaviors as follows if two try passing the in text so it's basically kind of forms a list of date times and represented as an array so regardless i think we've got the idea of what we're trying to do so once we've got all that information uh let's say we need to know the names of the columns so you've got lots of columns here one of the ways you can do is stocks. columns should give you the name of all the columns here so just close of apple close of spy and all those other information let's convert this multiple index so this is like in a in like a multi-index format to uh in like this so let's convert this multi-index to one tuple so i'm just going to give you a comment here convert multi-index to one tuple so so this top. columns copy so in order to make that change the first two stocks equals stocks or columns i mean stocks or columns equals sorry um stop dot columns dot 2 underscore flat underscore index so to underscore flat underscore index so let's see what this function does again here converts a multi-index and index of tuples containing the level values so you're going to run this and then let's do the stop dot columns again just copy and paste this so what you now see is it's not a multi-index anymore it's a single index um now let's do the stock start head again now you'll see it's completely changed so let's uh just take stocks doesn't have to be stock start index it won't be the same as before so you can see they are just as close apple or just close kao or just close spy so it's in a different format we've adjusted it accordingly so uh let's again make another change to this so let's do start. columns equals pd dot multi index dot from underscore to pools stocks dot columns so let's see what this does so convert list of tuples to multi-index now basically we're converting it back to the multi-index so now if i run this let's do stocks as well you will see it's back to the same situation that we had right here so now if i run the stocks dot columns again basically again it will be a multi-index so now you know how to convert your single index and the multi-index uh so these are some of the major things that you need to know about um again uh it's just to play around with the columns and the rows and things like that uh we'll be doing simple uh simple back testing here so that you can actually learn it from a simple perspective and then go to the complicated stuff later on in your future but as of now we are trying to understand it from a layman terms on how many of these things are done so so far you've learned how to download the data how to uh download multiple data and how to play around with the columns and play around with the um with the column names and make the data more clean we have also learned how to read and write the data we also learned how to mention the columns and the name of the columns converted to from a multi-index or one single football and from a tuple to a multi-index one as well so let's continue our pursuits in this algorithmic trading course so what we're going to do now is learn on how to create a describe function so what i'm going to do is we're going to describe and it actually gives you every single thing that this data has so it tells you that count the how much data you have the mean the standard deviation the max the 50 percentile is 75 percent the 25 the minimum and all those other things now it can be of use for you uh in future when you get a certain amount of data so uh now let's um do something called dot lock function so let's say stocks dot lock and this one and we're just gonna use the close we just want the value of close so let's see what we get so we've got an error so let's see oh yeah so there's no comma here so let's run it now and what you basically see is the only the close column from this just the close column of apple ko and spy so 7. 5 to 28. 5 and 11 11. 44 so you've just got the close function i mean the close column located and this colon here takes every single row that's available so similarly we can do instead of close we can do the adjuster close to the high or low but most of the time we back test we generally tend to use the data for the clubs so now we've got all the data for the closer let's store this to basically close so let's store it to something so close and i'm going to do the copy functions so copy function basically copies all these things and sort it to the close so now let me run this and then let's see what we get for close so basically we've got the closed data for apple coca-cola and spy from the date of 2009 to 2020 end of december okay so now let's start our coding in um drawing a graph so for that what i'm going to do is i'm going to uh remember we used the library matplotlib i've got a splt i'm just going to bring it here just so that you understand why we're doing it so i'm going to do a couple of things so i'm gonna paste that and then i'm gonna do percentage matte plot lib inline and then i'm to add a plt dot style so that's for the uh um plotting style and we're going to call it seaborn so that's the style that we've gone if you do shift and tab uh it can tell you the style specification of the graph that we want so that's it so these are the things we need for drawing graphs i'm going to run this and once i run this now let's plot these three apple coca-cola and spy so basically it's pretty simple just to close the plot um you can decide how big your graph should be so for that i'll use fixed size equals bracket 12 comma 8 to 15 comma 8. so we're going to do a 15 comma 8 kind of make it look big and we're also going to give a font size so there'll be names there of apple kosby so you can choose how big you want it to be so we can do font size equals 12 um and just run this fixed size minus sorry so it's big size equals 15 comma eight so there you go so we've got three graphs here so coca-cola uh spy in the red coca-cola in the uh green and apple in the blue um you can see everything has a different starting point uh so apple has got a higher starting point coca-cola is a different starting point so we can also do the uh legend the na the um plt. legend so i'll show you what that does the plt. legend um for the size equals 12. and then we are going to do plt dot show as well so this kind of removes the matplot legend this one here and when we run this basically got a very neat and clean graph of apple coca-cola and s b y so basically what a legend is is that it places this thing on the left side uh can actually go the shift tab and place the legend on the axis so that i'm just done so now let's normalize this value to 100 because as you can see the starting point of everything is different so what i'm going to do is i'm going to normalize this so in order to normalize this what i'm going to do is i'm going to first create the value so close dot i lock zero comma zero so what we basically get is um we get the first value on the first row the first column of the close so basically get this one 7. 526071 so how about i do close dot um so we've got the apple here so we can actually call that by using aapl so if i do close dot apl you get basically all the data of the column cluster aap up so now let's do the close dot aapl divided by so in order to divide we can use the divide function so we can use div so i'm going to type in div close dot i lock 0 comma 0. so it divides all this value from the starting value of 7. 52 so basically we're doing this to normalize uh this data so i'm going to do this and basically start from one dollar and all the way to 17. so similarly you can do that for everything so you can also multiply by 100 so it kind of smoothens out to the range of hundred so we can use the dot mole function as well so dot mul multiplied by 100 so now you get 800 value terms similarly we can do this for everything so in order to avoid doing this for everything one by one we can actually do it in one single go so if you do close down i log zero what you get is the first column of the i mean the first row of every single data so apple colon spy so all we need to do is just take the close and we do the same thing but instead of giving it the name we do divided by close dot i lock zero just like we did there and then we will multiply it by hundred so now everything is in 100 range you see everything starts from 100 and goes up to a certain data so let's store this in a norm close so let's take this copy this and paste this store this into norm close so uh now let's plot the norm close so just like we did it here we're gonna do the exact same thing here except instead of plotting the close we're going to plot the normal of the close so let's see that so now we've got a much more better looking graph it all starts from one single point and you can see in reality terms apple has performed much better as compared to coca-cola or the sby in fact coca-cola was possibly the least performing one sby did pretty good so this is much more better in analyzing graphs rather than just looking at the stock price from a start date and end date here so in this graph you basically don't understand anything and it might kind of make you look or feel that the spy has got a better return performance as compared to um coca-cola or the apple so i hope you guys got a gist of the idea so remember we started off with just the three tickets here we just started off with the um apple car called sby you can create a ton of data you can create like 10 data or the 10 or the fan companies facebook app or amazon netflix and google and put it out here as well so there are lots of options you can try out to understand uh what works and what doesn't work so let's now say that you close this file and you run the file again um so what's going to happen essentially is sometimes you have to run the code from the beginning because sometimes these header files will not be this libraries might not be called uh yet so what you could do is you could do sell and run all so basically you see all these stars so it's it starts running from the top uh all the way down to the bottom so it takes a bit of time because you're going through lots of code but eventually it goes through pretty smooth so there you go it's running down one by one and uh yeah we've got all the data uh that we did before um and also sometimes you can see the ip kernel may not be working because of some other reason or whatever so in that case you can just do the kernel and restart the kernel or restart and run all the code again so now going back to where we what we were doing before we were focusing on the normalization of the graphs so now let's focus on one single data so we've got apple data we've got coca-cola and we've got spy so what i'm gonna do now is i'm just gonna focus on the close of apple i'm just gonna focus on the returns of apple stock so what i'm going to do is i'm going to create a new file i mean new uh new column and not here from new variable aapl equals close dot aapl dot copy function so we're going to copy everything that's closed off apple close dot apple gives you this data here and i'm going to do two frames so so the proper definition of to frame will be to convert the uh data to a data frame uh so once i run this the close dot apple dot copy frame to frame gets stored to apple so if i run apple now we basically get is the data of all the close from the beginning till the end now let's say we need to calculate the increase or decrease from the previous day so one of the things we need to do before that is to learn a function called shift so what i'm going to do is i'm going to um use this shift function and see what i get so apple shift so basically the periods by default is one so it shifts in text by design number of periods so what it does is it moves this number to the bottom one this number to the bottom one this number to the bottom one so it changes like one space so if i type in piers equals one as you can see the seven point five two gets changed to zero one zero four and the seven point six four goes to zero one point uh i mean zero one zero five uh so that's the apple dot shift period so that's what the shift function does for you so why is this quite important um i'll come to that in a bit so let's create another column uh along with the apple so one of the things i could do is um create a new column by just doing apl which is apl is our data frame here and then i'm going to do let's say lag one and i'm gonna do the same thing that i did here i'm just gonna copy i'm just gonna paste that so what's gonna happen now is a new column will be created and it'll be called lag one and this shift one would be created on to these apple uh data so let's see what we get i'm just gonna run this uh aapl so as you can see we've got the aapl close data and we've got the lag one data as well so the reason why i want the lag one data is i want to calculate the percentage uh change uh of the daily daily returns so apple has changed from 7. 5 to 7. 64 so i want to calculate the percentage change of that so in order to do that i need to find the difference between this one and this one so i can use this data of lag one and subtract that with the data of yesterday's so one of the things i could do is i could do apl dot pool and subtract that with aap l dot lag one so let's see what we get so the subtract function will basically subtract this one with that one and what we get essentially is the subtracted data so let's store this to a column as well let's create a new column similar to this one here so instead of lag one we'll call that let's call it diff it's like a difference so copy paste that here and call it difference so now if i run aapl basically what you get you've got the lag one and you've got the difference the difference is basically the change of the um uh returns i mean change of the prices as compared to yes today so now with this information we can easily calculate the um percentage change so again percentage change is pretty simple we do the exact same principle so aapl dot apple but instead of subtract we divide so we divide this closing data with the uh lag one data so let's do abl dot lag one now that should take care of that so there you go so basically the percentage return was 1. 01 1. 0 0. 98 and basically we've got the data uh of from 2010 to 2020 the percentage difference now let me store that to the apple data frame so we'll call that a new column again let's call it the percentage change across a bracket and i'm just going to run that and then now i'm going to run this code and there you go we've got the percentage change on a daily basis so as of now you've learned the divided by um function you've learned the subtracted function you've learned the shift function so these are some of the most commonly used functions while dealing with data frames so just with this we can actually get this so um the reason why i just created the lag one and the diff was to make it more simple for you guys to understand but actually you can um contract all this code uh just from from here so from this information this information here you can actually convert it all the way to the change you can skip the lag one and the diff bit so let's actually uh also discuss the other ways we could do this thing so instead of using the um shift method we can actually use uh diff method as well so um so let's create apl and i call it uh difference two and then instead of using the subtract method uh i apologize for that instead of using this uh subtract method i can use the diff function as well so it's basically the exact same thing here i'm just gonna copy this here i'm gonna paste it but instead of subtract i'm gonna use diff i'm just going to run this as well at the same time cannot convert class end oh yeah so basically it's diff uh dot periods one so yeah that's a small change there so you have to decide how which period you want to different uh you're gonna subtract it from so i'm gonna run it now so again if you see the diff 2 and if you see the difference it's all it's exactly the same thing we just use the methodology it's quite different so if i do the shift and tap again first to create difference of the element and if i go in the periods you can by default will be one calculates a difference or a series of element compared with another element in the series so here we're using the apple close and the other data and then subtracting it and basically we have got the difference so now you basically understood how to use the difference function as well similarly instead of using the divided by uh function we can actually use percentage change so what i'm going to do is again i'm going to copy this i'm going to paste this and i'm going to call it percentage change 2 so the difference here will be instead of div i'm going to use the the center change function so it'll be pst underscore change and then i'm going to call the periods as well so periods equals one and we will have to multiply it by hundred because it will be in a point zero zero terms so i'm gonna do m ul hundred we discuss the multiplied function and then i'm to run this and then let's do the aapo so again uh percentage change i think we must have made a small mistake somewhere and the standard change here is slightly different from the percentage change there so let me see where i made the mistake i think might be the previous percentage change where i made the problem here so let's see the percentage change oh yeah so basically the calculation of this one was quite different so uh we have to subtract one from it because we have to calculate the percentage change so we subtract one uh and then we multiply it by uh 100 and that's what our actual number will be so now it should be correct here so apple percentage change is now the same as the percentage change calculation it was just a small error from my part i didn't think it properly uh so basically what i did was in order to calculate the change but in the change we subtract the first day we divide the first day with the lag out day and then we subtract one from it and that multiplied by 100 and that's basically the percentage change so i forgot the subtraction of one bit and multiply 100 bit anyways coming back to the basic thing you can see now if i run everything else so basically now the change percentage too from the percentage change calculation or the manual calculation is pretty much uh the same thing so another way to you've seen you've got like lots of columns here so what i think is going to do is i can always delete the columns so what i can do is we do just dl and then we call the name of it so the data frame here is apple so apple dot the column name so let's uh remove the percentage change to so percentage um change let's say remove diff do so now let's run afl so as you can see diff 2 has disappeared and similarly we can actually remove everything like let's uh delete delete off so you can actually override these things so once uh once this deletion is done uh then basically the data frame will be saved like this so we can actually change the um lag one diff as well so i'm gonna do diff and then i'm gonna do lag one as well i'm gonna do percentage change as well then let me run aapl so basically now you've got apple and the percentage change so the other thing you want to do is like let's say i want to change the name of the column so one of the things i could use is i could use the rename function so what i'm going to do is i'm going to write apo dot rename and i have to mention um the columns um so what i'm gonna do is i'm gonna do columns equals percentage change change 2 to let's say daily change let's call it just change and then comma in place equals true so this basically will rename the percentage change to to just change so now if i run this code you basically got the new column which just shows the change every day and the apple data with it as well so now since we've got daily data you can actually convert the daily data as well so for that we use another function called resample so let's do the resampling bit so what i'm going to do is i'm going to take the apple close data so which is this one here so aapl. apple which takes all the data from here then i'm going to do dot resample then i'm going to do monthly resample so basically you get all the data at the end of the month so let's run this and let's see what i get so let's do the it's not displaying so i think i need to do the dot last function and then basically what it does is that it gives you the last day of that specific month so 12 31 the data is 7. 52 uh end of january the date is 6. 85 and end of february we've got the data and that keeps on going and you can see the frequency is month so let's say you want to do the last business day of the month so for that all i have to do is i'll just take that one then i copy paste it and then i do bm and that will give you the last business day so you can see it's 0 2 26 because that's the last business days taking the saturdays and sundays out of the equation so similarly you can use this data and also you can calculate the percentage change or the monthly returns on the monthly change so just exactly the same way we did before so you can do a percentage change um periods equals one previous equal one and then dot multiply and hundreds so now we basically got the center change on a monthly frame so at the end of january our returns was minus eight point five uh end of february terms of six point five 11 and there it goes so so far we have done we've made a huge uh progress in our coding skills so some of the normal things that you deal with when it comes to data you know changing the data changing the column names you know finding the differences the performance change uh so i hope you guys understood the major part of handling data because majority of the time when you're coding especially in python or if you're a data scientist or most of the time you are actually making a lot of changes to data and trying to fix and clean up the data as much as possible but luckily due to yahoo finance you can make it more simple so now since we've reached this far what i'm going to do is i'm just going to now calculate the mean return and standard deviation so i've got the apl data here so aapo so let's so now what i'm going to do is i'm going to delete the change just for the sake of it change to make it look more simple there's nothing personal about this column i just want you guys to learn in a simple way possible so aapl. net we've got the data so now what i'm going to do is now i am going to do something called calculate the returns on a daily basis or the basically the percentage change so what i'm going to do is i'm going to create a new variable returns which is called apl dot percentage underscore change then i'm going to drop n a so there's no need for me to drop n a but like i'll tell you why so if i do this and if i run ret so you see the n a n is mentioned here so what i could do is i could just drop n a so it takes out every single n a variable out of it so now you can see the n a is out so what happened right now is that it removed that 12 31 data completely so any row which has n a data it has removed that so that makes the data looks more clean so if i do r a t dot info now you can see the information available two to six four non-null so it's creep it's a very clean data what we have here so now let's plot a histogram graph so we did the normal line graph before so let's uh plot a hit system graph so i'm going to do is ret dot plot so you can do kind uh equals the way we name it is just by typing hist so in that way by the no side the graph you're trying to go is the histogram graph so similarly the size and everything which we did in the line graph i'm going to do it the same same principles here's a 12 comma 8 comma bins equals 1 thousand 100 so being simple 100 shows how many bins you want and then i'm going to do built it or show you don't have to do it it'll still come up but still it's it's good coding so there you go we've got the histogram data so we can see the returns 0. 05 and minus 0. 05 so um majority of the time the trading range happens to be in this range so remember i haven't multiplied by 100 but that would have been nice if i multiply it by 100 but basically it's just five percent here and five percent positive and five percent negative so majority of the time it's uh apple stocks go in this specific uh trading range so i've done a video on my youtube channel and i think it's called probably distribution so in that i've created a strategy just based on this information this data that we've got here based on the distribution and based on where the majority of the returns are taking place this is a real reference for you guys to come up with a really good strategy so this is how i come up with strategies i look at different stocks and see where the majority of returns are based on that i can create multiple strategies so that's a really good video of the youtube channel please check it out if you've got time so now let's calculate the mean return so the mean returns will be we've got ret here so if i do ret dot mean basically as you can see it's 0. 001 1 we need to multiply by 100 so it'll be 0. 1 percent um similarly you can do the variance as well so i'm just going to call this as daily mail return daily underscore mean underscore return copy this base similarly i can do the var as well so var underscore daily equals ret dot bar so that'll give you the variance and i'm just going to call this var and let's go daily and you've got the variance as well so in order to calculate the standard deviation which is basically the risk metric when we do uh quantitative analysis of ad stock so in order to calculate that we need to calculate the standard deviation so basically std i'm going to do the daily standard deviation so this is why we use the library remember the library that we discussed at the beginning the numpy's library so it's a really great opportunity for you to use that so we're going to use a square root function and not use a square root function i'm going to use the numpy's library so np dot square root and then var daily let's do the sdd underscore daily so there you go so we've got the um standard deviation as well so obviously you need to multiply it by the specific return so yeah another way which you can do is rather than calculating it from var perspective just do the ret um dot standard deviation market so if you do just do ret or standard deviation you still should get the exact same thing so you've got the exact same thing here so it's 0. 01717841 so that's the standard deviation now let's calculate the annual mean return so so the annual mean return and all return mean return mean return will basically be the return dot mean which we calculated here so daily mean return into 252 so that's the uh 252 amount of working days that we have strict 252. let's call this yeah so we're basically getting a return of 30 so 0. 30 so let's do the annual var return so again i know va return will be similar to this one so we'll have the annual var there so there you go that's the annual var return we can also do the annual standard return so i'm just gonna make this quite fast because it's it's pretty much the same principles so of course np dot square root of the instead of this one it will be annual var return we don't need to multiply by 2 because we already multiplied the va return here so there you go so we've got the annual um standard deviation return as well similar to that we can actually uh do the std function instead of everything else so all we have to do is we just have to do ret dot standard deviation and multiply it with np dot square root sorry np dot square root p 252 and i am pretty sure we should get the exact same thing so you can see again the annual standard deviation return calculated from variant is exactly the same as using the standard deviation function so remember we took data from the ticker symbol multiple data so what i'm going to do now is i'm going to take even more data maybe like six or seven stocks now there's a reason why i'm doing it we'll come to that in a bit uh the idea is to compare lots of other things with this data so i'm going to do apple coca-cola spy so i'm going to add some ibm this building right ibm and i'm going to do disney and i'm going to do microsoft msfd so let's do this talks basically got the stocks here so let's take this one and i'm going to copy paste it so i get the close date of all these stocks then i'm gonna plot the graph as well so we've got all these stocks here so now what i'm going to do essentially is calculate percentage change for all of these so i'm going to do is just like what we did before we're going to do close dot presenter change standards for change and we're going to drop the nas as well so we can remove all those other things then i'm going to do ret dot head head so i can understand what's going on so drop any sort about that so there you go so basically we've got all the data of the return to the percentage change uh of all these stocks now let's do the uh mean and you know we could just do the rit. describe to get all the information from that so there you go so we've got the count we've got the mean standard deviation minimum and maximum and all those other information so we can also transpose this as well so let's say i want this column to be here and this column to be there so one of the things that i could do is use the transpose so i can just do dot t and as you can see the count is now on the top side and the stock prices are on the bottom side so if i just want two columns um so i can just do dot lock so i'm just gonna copy this and then much more easier if it's in a different line of code so i can do dot t dot lock dot lock and then i can do the colon comma mean just the mean and just the standard deviation and that's it so basically we've got just the mean and standard deviation of all these stocks so let's save this to a thing called summary just i'm going to just call the summary and then and there you go we've got all the summary uh now we can also analyze this return just as we did before summary mean create a different column uh summary mean mean equals summary mean multiplied by 250 2 and summary standard deviation equal summary standard deviation [Music] asterisk np dot s q r t 252. so now let's do the summary so now we've got from the daily we've got analyzed mean and standard deviation of all these stocks so the reason why i'm doing this is i want to compare the risk to reward of basically all these stocks in one go that's exactly why i'm going to do it so that so not to see that it's a graphic representation will be more ideal so let's do the x-axis uh standard deviation and the y-axis as the mean return so summary dot plot so this time i'm going to do a scatter plot scatter i'm going to call x equals standard deviation and y equals mean then obviously the fixed size bit thick size equals two comma eight um s equals 50 and font size equals 15 so those are like the sizes of the scatter and also the font size as well so um and then we've got the summary. plot and now i want to annotate it so i want to annotate the different mean and the dots should be far away from a certain point so it doesn't create a lot of issues so i can just run this and basically you get all this so what i want to do is i want to annotate which ones which i want to do which one is disney which one is microsoft which one is sp white so for that what i'm going to do is i'm going to create a for loop so things might be challenging for you initially but i'm just going to right here for i um i'll just do it here instead so for i in summary dot index so basically it says so i start from zero one two all the way to the number of indexes so here one two three four five six to six indexes and then this is the column this is the format you can do plt dot annotate so that's the annotate function so the annotate function helps you plot the um the value so we need to plot i and then x y equals the location of the standard deviation and also the location of the mean so summary dot lock bracket i comma std i want to do plus 0. 02 so there's some space where we annotate that thing zero two comma summary dot lock we also need the mean so bracket again i comma mean again plus 0. 02 plus 0. 002 and that's a bracket and i'm going to give the size of it so size equals 15. so now let me so there you go so we've got the sp y cola ibm disney microsoft and apple so now let me label the x-axis and the y-axis so plt dot x-label call it annual risk standard deviation quantize equals 15 and then from that let's see what we get so basically we've got another is here so i'm gonna copy this and paste it and then y label equals and or return i think my change is there and we got the plt. title the title of the graph is risk per return and again font size equals let's give it a bigger font size equals 25. so there you go you can do the blt. show bit as well if you want so there is a return graph and i'll return an annual risk so you can see the best so apple has got massive returns but as you can see the risk is also quite high so let's compare microsoft and disney him so here the um risk is almost close by it's between 24 and 26 but microsoft has given us a bigger um reward so if i have to choose between disney and microsoft my obvious choice will be microsoft so one of the common things you can see here is that um as you take more risk you are having more what and that's what you want to have when you're creating financial strategies more risk means more intense but if you're taking too much risk for a smaller return then it's pretty silly say for instance here ibm you're taking massive risk of more than 0. 22 but your return is less here it's like less than five percent here however here on the spy you're making a huge return maybe like 12 return but with minimalized returns so this is pretty much a theory or warren buffett we're saying on investing in s p 500 index because um to a certain extent the long term it kind of beats the market but to another accident it's also to control the volatility it's much more easy for you to digest a small risk to get a better return so again if you're comparing spy coca-cola they almost come to the same range of risk but then the reward of spy is much higher so if i have to choose video spy and coca-cola i would choose spy if i have to choose between ibm and coca-cola i would choose coca-cola because gets bigger returns with a smaller risk so that's how it works if i want to focus more on bigger returns then i can always go apple but it comes with a price and that price is that the standard deviation or the risk associated with it is quite high so i know this for loop might be quite challenging for you so i'm just going to explain it in simple terms so you guys kind of understand it so let's call it fruits so call it fruits let's call it apple poor banana doesn't matter but this was a spelling mistake but i'm just trying to get you understand what's all about so we've got fruits and we've got three elements in the fruit so if i say for i in fruits then i put a column here and then i do print i i so what i get is apple banana and manaba and mango so for the first time it goes to the lube fruits of zero and then it prints apple then it goes fruits of banana and then fruits and mango if i type in fruits of zero what i basically get is apple so if i take fruits in one what i get is banana so what's that's what happens here so for every time the fruit gets repeated it repeats the first one and then the second one the third one so that's basically what a for loop does it actually goes through that process of looping the whole situation really so that's exactly what we've used here as well so we've actually gone through for the for loop of all these stocks and then we annotated it one by one so then we annotated it and you see that plus 0. 02 that's just the spacing and also the size as well and then we just label the graph so hope you got a gist of that so let's now discuss covariance and correlation so what i'm going to do is i'm going to just um change the cell type and write it mark down the whole idea is just to give like a heading so if i put more columns letters will be smaller and if i put just two columns it'll be slightly bigger so i'm just going to write there correlation and covariance if i do that basically gives you a heading so i don't remember if i said that but there's like if you want to leave a comment or something you can just keep like a hash simple and basically that's a comment so anyways i'm just gonna run that as well uh let's see what return is again so that's a return so now let's do the covariance which is pretty simple we just do ret dot co function and if we put in shift dot tab it basically says covariance of columns excluding n a or null values so i run that basically i have got the covariance of all the products right there similarly i can do the correlation as well so ret dot correlation and you've got the correlation as well now these are just numbers it's easy to see the numbers but it's quite difficult to uh understand it for a layman term so graphical representation is always good so what i'm going to do is what i'm going to create like a heat map for this correlation and covariance so for that we need to import a library so we're going to put import seaborn as sns so we're going to use it to use this library to create a heat map but we'll see it as we go through so we're just waiting for it to import the uh library so as that goes by okay now we have actually imported the library so we'll just do the figures a plt dot figure fig size equals 12 comma eight then we're going to use this sns for the c bond file so sns dot set uh we'll do a font scale so we know how big the letter should be it's kind of equal to say 1. 4 and we shall do the heat map so sns. heatmap function so let's see if i can get the shift what tab yeah so basically what it does is plots rectangular data as a color encoded matrix so that's what we're going to do so i'm going to do the correlation so ret dot core function and now i'm gonna give the color codes for that so c map will be equal to reds and annotate we like to annotate what's being written there so that'll be true the other annotate. k equals we'll mention the size size colon 15 and then v max equals 0. 6 so you can change the v max depending upon how you want it to be so i know this is like a complex line of code but in reality it's just nothing you can just copy paste it but i'll just blt. show i'll just run this so you get a general idea of what's going on okay we've got an error so let's see what has happened we've got the graph as well so i think it's something to do with the annotation so let's see what's wrong here i know the kws size column 15. oh yeah there you go this is the problem here so this should sort out the issue so there you go so basically we've got a correlation um correlation graph uh regardless what i want you to do is just in case you have errors or bugs coming up i'll leave the download link for the entire code of this whole program in the description box so you can just download it and then if in case you have a small error here and there you can just compare it and copy paste it and run the python file save the python file and run the python file here in jupyter and it should be just fine so before you run the python file make sure that python file is on the folder and just go to the folder and open it and run all and then you should get all these things but if you have any doubts or clarifications you can always leave a comment or contact quan program gmail. com so coming back to the correlation graph so we've got lots of stocks here we've got the apple disney ibm so spy is basically s p 500 so we just got the 500 top stocks of the u. s market so it's expected spy to have a high correlation to all these stocks because it represents a general market so if i can see the sp why's correlation to spy is just one so um that's expected sby will be correlated to spy to one so when you pick a portfolio of stocks one of the most important thing that as a quantitative analyst or a quantitative trader that you do is that you need to have stocks which are extremely uncorrelated so in that way if one person if one company goes down the other company is immune to that thing so if i can look at the least bright one so that's apple and coca-cola that's only got a correlation of 0. 34 which makes sense because coca-cola is in the cola industry and apple is in the technological industry so so adding apple and coca-cola is a good selection the other one will be apple and disney as you can see it's just 0. 341 anything above 0. 5 but these are all high core latest stock you can always find stocks which are less correlated so you can see the 0. 5 0. 5 so i would recommend going anything below 0. 5 so that you have kind of like a not so good correlation uh in the stocks but spy it'll always be highly correlated because sby represents a general market index so now you've got two information so you've got basically the information from the risk to return from a risk to base standpoint and also you've got the correlation and covariance so so the first challenge in this video is basically uh what you've learned so far so i want you to download 20 random stocks from the uh who finance like can be any other 20 random stocks that you like you don't like or just some names it could be a fan company it could be anything just download the 20 random stocks and then i want you to calculate the risk and reward potential which is similar to this one here and then i want you to compare the core variance and correlation and then i want you to find the best five to invest in based on the assessment of the covariance correlation and also the standard deviation and annual return there's no right or wrong but i've given you a sample example on what kind of stocks you can choose like for example here i rather choose spy instead of coca-cola or ibm here are just microsoft instead of disney so and if i want i can add an apple i know it's high annual risk but then it's also getting a higher reward so there's no right or wrong i just want you to think like a quant and come up with all these things all these numbers and try to figure out what you like and use that as a tool for you to invest it in the long term so now we've gone through that now let's go to something else so we'll actually discuss now simple returns as a log return so i'm just going to do the cell markdowns as well um call it simple returns and log returns simple returns and log returns so let's create a random data frame so i'm going to just create a data frame called df and then i'm going to use the pandas data frame and data frame and then i'm just going to create a new list of data so i'm going to call it index equals 2016 2017 comma 2018 and then i'm going to call my data equals 100 50 95 and then columns columns equals price so i'm going to run this and then let me just call dfs basically you've got the price 1595 2016 2017 and 2018. it's a simple return to essentially be equal to df dot percentage underscore change which we did before change got the function and i'm gonna drop dna as well so it looks more clean to drop any just call simple returns so basically we've got simple returns in 2017 2016. obviously there's no returns because it's nan since 1017 it's 50 decline and then 2018 it's a 90 increase so that's a simple returns now if you take the simple returns mean simple returns dot mean function this is what we get so but in theoretical terms when you start from 2017 it's actually gone from 100 to 95. so it's actually minus 0. 5 but here it's actually noted as 0. 2 so that's basically the problem with simple returns so simple returns doesn't calculate it from the beginning till the end kind of perspective so if you if i take this data the zero point t uh 0. 2 sorry let's say our starting point is 100 here they're saying the average return is 0. 2 so if average return is 0. 2 it should be a 100 asterisk 1. 2 asterisk 1. 2 which should give you 144 but it's not 144. the end result is 95. so this is where uh the log returns come into perspective because mean returns are very misleading so right here mean returns are misleading that's crazy so that's the problem with calculating mutant dense so that's where log returns comes into perspective so let's calculate the log returns machine is a numpy uh platform so i mean library so np dot log and then bracket so df divided by d f dot shift to one so we've discussed both shift one and um the divided by obviously you know that and then we're just going to run this so there's the nan we just drop n a and then we've got minus zero point six nine three and zero point six four one eight five four so i'm just going to drop n a as well so just avoid confusion so now we've got the log returns of 2017 and 2018 so i'm going to save this as log returns log returns and i'm going to put in log returns so there you go now let's calculate the mean of the logarithms so log returns dot m-e-a-n so there you go so we've got minus 0. 02 so now let's calculate it from an arithmetic perspective and see what we get is correct so the starting price was 100 so 100 asterisk then use the np function to calculate the exponential exponential log returns dot mean asterisk two years so yeah that mean so we're taking the log returns mean uh exponential eight by two um and that's why we do the asterisk function run that and you get basically 95 which is the ending price that we have in 2018. so i hope this makes sense on why log returns is more uh accurate measure of the returns as compared to simple returns most people focus on the simple returns but as quantitative traders we need to understand the importance of log returns so i hope you got a gist of the idea on simple returns and log returns so now let's go and do our first simple moving average you know how to calculate a simple moving average um so for that what i'm going to do is i'm going to download the data and then i'm going to calculate the simple moving average so let's just focus on spy so i just want to start simple and then we'll go to complicated perspective so let's go up and then do the yf bit i'm just going to go down and then i'm just going to paste it here and i'm going to ignore the start and end so what happens is that you get whatever data is stored from the beginning till the end so that's set by default so if i look at shift into tab and then if i look in the plus one so start by default it's not nba default is none so if i go down default is 1900 and end default is now so i'm just going to do it and then i'm just going to type in sby let's call it sby as well so it's downloaded so let me see what spy brings so we've got spy and all the data in it so i just want the spy. close and i'm going to call it a little spy so uh programming generally is case sensitive we have to be really careful in uh identifying that i'm just gonna run that so now let me see spy so there you go so we've got spy data but it's not in a data frame perspective so i'm going to do sby. close to underscore frame and then store it there there you go so we've got the spi data the close and the date from 1993 to 2022 uh may january the 5th so let's calculate the uh just plot the graph so i'm just going to do spy. plot just like we did before fixed size equals bracket tool comma eight comma font size equal 15. then plt dot legend lock equals upper left comma font size so the reason why i'm putting up the left is that so the what the line is is on the upper left side of the graph so font size equals 15 plt dot show so there you go so we've got the spy graph here so i need to calculate the moving average from this data so what i can use is a thing called rolling function so the rolling function basically what it does is that it calculates the uh past experience so i'm just gonna type in so you need an idea so spy dot rolling rolling and then windows equals 10. so i'm just going to put shift and tab see what sby rolling's definition correct definition is provide rolling window calculations so i'm just going to run this spelling of windows window apologies and then let's call sby row so we basically got this here and what i'm also going to do is i'm going to calculate the mean of the rolled values equals spy underscore roll now let's call spy underscore roll so there you go so we've got the 1993 data and then it basically calculates the average of the uh other rest of the periods so as you can see the um first few periods uh it's missing because it takes 10 days for you to calculate the average so let me show you the 15 days head of 15 so then you'll get an idea so it's n a n n n n a n n a n and then comes the first number the second number the third number so we're going to use this and we're going to actually calculate the moving average so we can also do the median as well so if i can do combat 10 i mean comma mean come on median sorry median is not defined oh yeah it's basically it's coma yeah so there you go so you can actually get the median values as well so the mean and the median are quite different so mean is like dividing the periods by the past 10 days and the median is like taking the mid price of it so i'll just go into google and type in mean vs medium so you get a general idea of the correct definition rather than anything else it means arithmetic average of the set of numbers or distribution a mean is computed by adding up all the values and dividing that score by a number of values the median is a number found at the exact middle of the set of values so i hope you guys understood the correct definition i don't want to give a different answer sound like an idiot so you can use many of these things you can also calculate the maximum of the past 10 days so i can just do sp white rolling and then i can do dot max so it gives you the maximum value of the uh past 10 days so yeah so it'll take the maximum value of 10 days and keep printing it so you can see it's 4748 it doesn't change it doesn't change and because of the last few days because we haven't got a value bigger than that you can also use in the same spy rolling a thing called minimum so minimum is that i need at least five data to start calculating so we know the window is 10 but by setting a minimum periods equal five it calculates from the fifth period periods equals five so as you can see from the fifth period that started calculating it so let me just do um so as you can see it's set as a default value 45 45 45 45 max and then it changes at 44. so yeah so that sets up the minimum uh uh you can activate that specific periods so now let's first calculate the uh 50-day moving average so what i'm going to do is let me see just uh what did we save it as spy roll and spy i think it's sp y so there you go we've got the spy so i'm going to create a new column so spy as you know to create a new column is pretty simple we do spy and sma 50 equals we're going to do the exact same thing that we did here dot rolling so minimum window is 50 and minimum period requires also 50 because we're doing a 52 moving average and then we're going to calculate the mean of that so let's run sby so there you go so we've got the sma 50. now if i do sby dot head 52 we'll get the first calculation so there you go so the first moving average is calculated on uh this specific date so i'm just going to take this off but anyways you've actually got the data of both the sma 50-day moving average and the closed data so similarly we can create um 200-day moving average 100 moving average it doesn't matter so but anyways now i'm going to plot the graph so we get both the sma and the closing price on the same thing so i'm just going to copy this and i shall paste this here i'll just run that so there you go so we've got the orange line in sma and the blue line which is essentially the prices so yeah there you go it was pretty simple calculation of the spy so similarly you can do the 200-day moving average as well so i'll just do that one as well so we are done with it so we're gonna paste that and i'm gonna do 200 here 100 and i'm also going to copy paste um this one as well so we won't have to worry about the graph so we're going to call it 200 don't forget that because otherwise it's going to override that 50-day moving average so what's going on here placement in place one so i think i'm just going to cut this off first and then run that to placement in place one oh yeah so the thing is that now we've got a new column which will sma 50. so you should only have one column of the close so i have to specify that so sp y dot close is uh what we should do so before we didn't have we only had one close so there was no controversy for that now we have two we've got the close and the view of jspy so we need to mention that so now we've got it and then let me just uh run sby so there you go so we've got the 200 day moving out and the 50 day moving average and now if i copy paste this it should go through so there you go we've got the 200-day moving average and we've got the 50-day moving average um as you can see the market went down the 200-day moving average in the corona crash and also during the financial uh crisis crash and generally the market has been on and off trend so yeah there you go so now you know how to calculate the 50-day moving average 200-day moving average and to plot it so here comes challenge two uh remember the five stocks that you did for the covariance uh and the correlation and also the annual risk and standard deviation i wanted to take that and i want you to plot the graph of all these five stock exactly like this calculate the 50-day moving average and 200-day moving average and see the graph and see for yourself if you can find some kind of a specific strategy so like here if i see the 200-day moving average in the sp y i can see that um the market generally uh goes above the 200-day moving average so you can use that as a signal if the market is closing above the 200-day moving average you can go long and the market is closing below the 200-day moving average you can go short so just come up with the ideas i'm not asking you to do the strategy which will come to it in a bit but as of now i just want you to draw the graph so we'll take it one by one step by step and as you go by you'll be more equipped of doing this so let's now do the ema as well because we've done the sma so let's now start to figure out how to do an ema so ema is pretty much the same thing as an sma but you need to change some of the words or the format so instead of close dot rolling we write in ewm so i'm going to type in ewm i'm going to call this ema let's call this 100 instead and then minimum periods is 100 and then for the window we'll write in span so span equals 100. so let's put shift and tab and you'll get the correct definition of this function it's a span float none minimum periods none equals zero provides exponential weighted functions so let me just run this and then type in sby and basically you've got the ema 100 as well so let's plot the exact same thing here and now we shall get the ema on the graph as well so there's ema 100 in the graph as well so there you go that's the ema the other things we can do is since we've got the columns here we've got the days and the um um quartz and things like that so if i want that to be mentioned in that table one of the things i could do is i could do spy um and i can call it day day equals spy dot index dot day underscore name function so this will give you all the days of that specified date so it'll be friday monday tuesday wednesday thursday and that goes on so similarly i can do the quartus as well so i can do q a r t e r equals s p y dot index index dot quarter so if i type in sby here we basically get the quarters as well the fourth quarter the first quarter and so we'll restart the whole thing so we'll do spy and then we'll do spy dot to underscore frame equals sby so now we've got the sby here so one of the things we need to do essentially is the um uh the days as you can see here the 30 and 31st is missing because those are saturdays and sundays so what i'm going to do is i'm going to i want all the days in that data frame so one of the things i could do is use re-index so before we use your re-index i'm going to create a variable all days and i'm going to use the pandas data frame so pd dot date underscore range now i'm going to mention the dates just to make it more simple so let's do start equals um 2010 uh 12 31 just gonna give this column here and then comma end equals 2020 0 1 0 1 and then frequency fre key if req equals d then let me just write in all underscore days invalid syntax so where have i gone wrong and this right oh yeah here the comma so we've got all the days now what i'm going to do is i'm going to re-index all these days to this spy data frame so i'm just going to print the sby here so we've got the spy there so i'm going to do is spy dot um spy equals sp y dot re-index and bracket the days mentioned today's it's only between these two days you can keep on i can give out different days as well and i'm going to give in all days let's see what we get for sby so as you can see here there's n-a-n so that's for the first and the second might be holiday and obviously there'll be saturdays and sundays and things like that so um in order to replace this nan one of the things you could do is you could do um forward fill and backfill so basically forward fill is that it takes the um this this stay and prints it on the first and the second similarly it goes on like that so what i'm going to do is i'm going to do sby dot fill n a method equals i'm going to do f fill so that's forward fill and i'll run that so as you can see now uh you can see 125. 7 is printed on the first of january similarly you can do the backfill as well the only difference being uh it takes a future date and copies to the other one so i'll show you there so as you can see here it copies this value one two is seven point zero five and prints it on the the previous day so 127. 05 was the zero one zero three and it prints here so the forward field takes a previous valiant puts in uh the backward fill takes the new value and brings it on the back side so if you can see here on the 2020 the first of january there's nan because there's no future value for that that's why we don't have the value for that so that's forward field and backward fill if you want to do something in managing data especially when you download lots of data there will be issues like that and if you want to take in saturdays and sundays and holidays in the picture then that becomes a source of concern as well so another thing to notice is like we have got daily data for most of this so if in case you want um a weekly data one of the things you could do is uh you could just mention one week in it so all i have to do is i just have to change the interval to one week and we should get that sorted let's just remove the brackets here and put the brackets there so if i can go to the shift and tab here once i go in and just click on the plus sign if you can go down you will see interval valid intervals are 1 m 2 m so these are the formats if you want 15 minute data if you want one month data these are the formats that you want to fill in so intraday data cannot extend last 60 days if you're working with intraday data then uh the maximum you can do is for 60 days but the weekly or monthly you can get a lot of data so i'm just going to change it to weekly data just to show you guys uh what the weekly data is so there you go so you basically got 250108 and that's the weekly data so now let's um kind of find out things like the maximum drawdowns the returns um daily returns the cumulative returns the cumulative maximum returns and buy and hold returns and things like that so after that we'll proceed to the strategy so i'm just gonna change this uh to mark down and type yeah so in order to calculate the cumulative returns first first let's go into downloading some data so we'll just download apple's data so i'm just going to call it applea equals yf dot download a a p o okay so now we've got the apple data so if i can just see the apple data what we basically got is this so i just want the apples close data as of now so apple close to underscore frame and then i shall store it into apple so i'll override the apple data and store it in uh store this uh closed data there so what does it say okay there's no closer it's just capital see there so there you go so then i'll just run that there you go we've got the apple close data so let's create a new column for the daily uh return so we'll do apple so if you do apple look close we've basically got the closed data so i'm going to do is i'm going to create a new column so we're going to do apple and then daily underscore returns equals np. log brackets apple dot divided by apple dot shift off one so we should get the new data in apple here so there you go they've got the daily returns of apple so the first one will be nan because there's no previous data for that so basically what it does is that it divides the previous value and calculates the log in terms of that so we basically got negative 5. 3 uh negative 7. 6 and there we go so let's remove the n a value so on 12 12 there's an n a value there so i'm going to drop down all the um any values so i pulled up drop n a in place equals true god discusses before but just a revision sort of thing so there you go so we have removed that one so we've got the daily return so now let's take the um the returns the buy and hold returns like the sum of the uh returns so basically all we need to do is a p p l e dot d underscore returns dot sum so basically it calculates the entire sum of the uh daily returns and this is the value that we get so now let's also calculate the um what would you get if he had invested one dollar uh into uh the stock on 15th of december 1980 so for that we'll just again use the numpy expander and we'll use exponential and then we'll do a bple dot daily underscore returns dot sum so one dollar invested in 1980 will be now 1 340 so this is the same methodology that we are going to use so let's create a new column so apple uh cumulative return returns cumulative returns p equals l e dot d underscore returns dot com cumulative sum dot apply bracket np dot exp let's run the apple so there you go so finally we've got 1 340. 1066 so that's uh what we calculated here as well so we've just made it from a call and perspective so one dollar invested uh on the start of the day will go to 0. 94 and then 0. 87 it'll go down but then finally it kept on going up so we can plot these uh graph so i'm going to plot the graph of this so it'll be apple dot just going to copy paste that cumulative 10 stop plot we discussed this before plot fix size equals bracket 12 comma 8 let's give it a title title equals apple buy and hold buy and hold font size equals 12. then just do plt dot show so there you go that's the apple buy and hold cumulative return so one dollar invested in the beginning should give you all the way up to 1 300 something so now let's do the mean the annual mean return the annual uh standard deviation and things like that so we'll just need apple dot daily returns so that's the underscore returns the underscore returns dot mean astric 252 that'll give us the average um returns for the apple stock so that's annual average return is 17. 5 so let's also do the standard deviation for that as well so again that is also pretty simple we'll just change the std and then np asterisk np dot sqrt and then 252. so we've got a standard deviation of 45 which is quite high for apple but for the amount of returns you're getting on an annual basis this is expected so let's now calculate the maximum cumulative maximum uh the reason we're doing that is to calculate the drawdown so i'm just going to change the headlines here i mean the mark down here i'll just comment it how to calculate drawdowns calculate drawdowns so basically the way we calculate drawdowns is that we need to find the peak and the valley so different different uh methodologies have different different platforms i've got different methodologies so for instance trading view they calculate from the trade entry but the real drawdown should be calculated from the peak of your strategy or your peak of where the stock is so for example here the drawdown here in 2000 whenever that took place between 2010 and 2015 so we need to calculate the draw down from the high of that and then all the way to low similarly here we need to get the high of it and then all the way to the low so in order to do that we need to calculate the cumulative maximum so what's the maximum that it went high and then from that we can actually calculate the drawdowns so let's actually create a new column for the cumulative max so c-u-m-m-m-a-x equals a-a-p-a-p-p-l-e dot cumulative returns so we call kim returns kim returns dot human relative max so that function basically gives us the maximum maximum rate data framework series of access so i'm just going to run that and then what you see here is the cumulative maximum so for example here the maximum was 0. 94 the market went down to 0. 87 but the cumulative maximum stayed there so we can plot that in the um in the graph as well so what i'm going to do is i'm going to copy paste this one here the entirety of this but i'm going to plot both of these things i'm going to plot the cumulative maximum and also the cumulative returns so for that i need apple and i'm going to create a square bracket in that square bracket we need two things we need to get the that's already there so accumulator returns and then comma cumulative max and then close the bracket double close the bracket and then so apple buy-in cumulative max so plus cumulative max and we'll just plot this so there you go you see that height so we've actually plotted the high of each of the new high that it has created so this can also be beneficial for you in future if you're trying to come up with the 52-week high or breakout strategy so the approach is pretty much the same so now let's calculate the drawdowns so drawdown is pretty simple so all we need to see we've already got the cumulative maximum so we take the cumulative maximum and subtract the cumulative returns so we've got the cumulative maximum here and then we calculate the returns by cumulative returns by 0. 94 minus 0. 87 so apple i'll call it drawdown drawdown equals apple cumulative max minus cumulative returns now pull so there we go we've got the draw dance the first stage draw now is just to represent and then you can see the drawdowns here so for example here the drawdown is again 0. 00 but that happened because of uh the cumulative returns and cumulative max being the same so we've got those things sorted out now let's calculate the drawdown maximum drawdown uh we have we have in from a dollar perspective so apple dot drawdown dot max so 213 dollars is the maximum drawdown that we've had so let's see uh when this uh maximum drawdown took place i mean which date did it take place for that all we need to do is pull our drawdown. max and use the idx max function so that basically takes care of finding out which date happened so it happened on 2020 9 8. so one of the things i could so let's see i want to know the days where this draw don't happen so i can do is i can use a dot long dot lock thingy so so basically it's apple dot lock and then i can do a bracket here and then normal brackets and then apple dot index because this is the date data date time data is here so we'll do index equals just copy this one there copy and paste so there you go so invalid syntax where would i go wrong here oh it's actually equal to equal to so there you go so 2020 uh 0 9 18 so we got the daily returns of minus 0. 032 and there you go so let's let's get the data of less than equals so we get an idea what happened so as you can see the stock price uh went from all the way from 115 just kept on going down so you can see the drawdowns were picking up picking up picking up and reached a peak of 213. so that's a dollar expression of um the highest drawdown that has taken place but how about percentage-wise because we always have to deal with percentage-wise so let's calculate the percentage drawdown so apple and then drawdown drop down percentage will be equal to it's pretty basic calculation we just need to divide this thing by the cumulative max so i'm just going to copy this one here just create a square bracket there and then base that divided by i bought off cumulative maximum then if i do the apple basically you've got the draw down a percentage as well so similarly we can do the apple drawdown percentage maximum which is the highest fall we've had from a percentage basis so all i do is put a percentage here so the problem is because we've used the percentage and percentage kind of creates a problem so it's better off you do the because python kind of views percentage of something else so one of the things you could do is you could just do the square bracket here and then give some quotes and this should give you that's funny percentage and this should give you that 82 percent drawdown we had an 82 drawdown that's very high so let's let's find out when that took place that took place just by using the exact same thing we did before that took place on 1997 23rd of december so let's also calculate the location of that thing so just copy i'll just paste that so copy paste this one here so this is less than or equal to or equal to equal to it's like a conditional operator basically checks the condition uh the other thing the normal single equal to is assigning a certain condition like a equals five so five is assigned to a however when you say a equal to equal to five it's checking whether a is equal to equal to five so i'm going to run that so you can see the drawdown just kept on falling so now you know the difference between the uh drawdown percentage and normal drawdown so from a from a dollar perspective drawdown was higher 213 dollars but from a percentage perspective we had a bigger drawdown uh for this so now this is expected in apple because the amount of returns that you're getting is so high that massive drawdowns are expected so this are some of the common things that you actually check when you do quantitative analysis of a specific stock like you check the standard deviation you check the drawdown from a dollar perspective you check the drawdown percentage perspective and remember we said we compare that graph of correlation and covariance and also the annual return on annual standard deviation when we combat all those stocks apple was the best performing but it had come with a higher standard deviation the standard deviation is different from drawdown so standard deviation is like how far does it normally go from the mean so mean is like what are the typical values on a daily return and how far can that go where's the majority of the deviation from that mean so drawdown on the other hand is different or that is like how how far has the stock collapsed from the top of the uh top of of its prices so all these metrics are quite important when you analyze the stock but then what happens to most people so they don't bother doing all this research and luckily with coding you can actually just download the data and pick up all these things um with just few lines of code let's now create a first strategy it's going to be a simple moving average crossover but as we go through this you'll get a general idea on how to create uh better strategies so first let me just write it down uh sma strategy semi strategy i'm just going to do some astrology okay so we've got the apple returns right here so what i want to do is uh i don't want all these data so what i'll do is i just need now it's 20 21 so i think from 1991 uh 2001 it doesn't happen to the 21 so so i'll use the same thing and i'm going to copy paste it and i'm going to do greater than equal to 1991 0 1 0 1. so that's the data from 1991 2022 i'm going to save this to data so i also just want the close as well so so if i go and look at the data basically you've got data so i'm going to do convert that to data equals data dot to underscore frame to the data frame and let's see what the data is now so there we go we've got the data from 1991 to 2022 so let's create two moving averages so what i'm going to do is i'm going to create 50 moving average and a 100 day moving average so sma underscore s equals 50 and sma underscore l equals 100 so the short period moving average is 50 and the long period moving average is 100. so we've discussed how to create uh you know a moving average so that's basically by using the rolling function so let's create the first data sma underscore s equals data dot price dot rolling sma underscore s dot mean and we shall also create data sma underscore l it's also the same thing here we'll just copy paste that so it's copy let's fix that okay so we've got an error so yeah so it's not price it's actually close so close uh close so if you figured it out early congratulations you are in the right part of uh learning part of this video so let's see the data so you can see smas and small obviously the first few periods are uh can't be seen because there is no uh sma can be calculated unless the phase period comes into perspective so let's plot this now so we'll just do the data dot plot so obviously you know how to plot this before so fix size equals bracket two comma eight and then comma title equals apple um sma so i'm going to show you how to write uh some of the things on the title so we're going to do is we're going to do this specific curly bracket then i'm going to give it separation and then sma another curvy bracket there and then i'm going to do a format thing a format function and i'm going to type in this smas and smal so sma underscore s and sma underscore l which is basically these 250 100 here and then i'm going to give the font size as well so what this does is it replaces this apple sma and inside here there will be the sma 50 and sma that's where the curly brackets comes into perspective so font size equals 12 let's run that so there you go so if you've got the smas and sml i know it's like a very specific you know it's like you can't see it properly but what i'm gonna do is i'm gonna you can do another thing as well you can just copy paste it and then just specify which year you want to do it if i do data dot lock um and bracket let's say 2016 2016 so what's going to happen is we're going to get the only 2016 data so there you go you saw the 2016 status so this is the blue is the closing and then smas and smal is the orange and green line so you can basically test based on a specified year as well so we're just going to do the whole year for the past 20 years but i just want to show you how to do uh the other thing so anyways we've got n a here a lot so i'm going to delete off those data so it doesn't create any issues for us in the future so data dot drop n a in place equals true let's show the data now so there you go the n a values have been kicked out so when do we need a position so the position is only taken when the long period sma there's a short period resume so if smas is greater than sma l we go long otherwise we go short which is minus one so let's create another column called position data position equals so here we can use a numpass library and we can use the condition np where and where data of bracket sma underscore s is greater than data of sma underscore l then we go long so for that condition we put one and then if not we go minus one so let's run this and let's see the data now so as you can see here the smas is greater than esp1 so we go long so there'll be longs and minus ones as well so obviously it doesn't happen multiple times um so now let's plot this so what i'm going to do is i'm going to take this one here let's take this one here create a little lock so i'm going to copy this i'm going to make massive changes as such but what i'm going to show you is uh i'm gonna do the data. lock but instead of 2016 i don't want everything to be printed so i'm going to do this one and then the date and then i want the sma underscore yes comma underscore s comma sma underscore l sma underscore l comma position as well so i'm going to do position so i'm going to do data. log and underscore here some underscore l and position and then plot fixed size um for let's call it all smas smal let's see what we get so as you can see you can see the precision here is zero zero so it's it ranges from minus one to plus one so uh want to make a small change because because the graph is so big what i'm going to do is i'm going to do a secondary y position so you'll see what that is in a bit so what i'm going to do is i'm going to comma here comma secondary underscore y equals position so the reason why i did that is i want like a two separate thing so you see this minus one that's when we went short and you see this um plus one that's we that's where we went long so you can see we are changing the positions every now and then so if i can just put into a shorter time frame so this for all the data so if i just put in 2016 like i did before let's do 2016 let's see if it still goes through so there you go so in this case the sma um the short sma went down so we went short so that's a minus one here as you can see here and then we went along when this blue line crossed about the orange line and then similarly we went short and we went long and that's basically it so we've just plotted the graph and i just uh reduced the time frame to just 2016 for you guys to see visually what's going on so so far we've got the position now what we want to do is we need to backtest this so we need to know the returns uh and also we need to compare the returns as well so just like before what we're going to do is we're going to calculate the buy and hold returns so we know how to calculate the buy and hold returns it's just basically data off returns returns i'm going to say buy and hold so i'll get a b and h buying whole equals np. log b dot log data dot close dot divided by data dot close dot shift shift bracket one it's gonna run that so let's see the data there you go so we've got that now the data of the strategy as well is important so um of buy and hold so we need to know the uh buy and hold returns as well so um let's calculate the data of the strategy by and hold so i'm going to name it strategy bnh sorry so this is the strategy of the sma so we're just going to call it data of strategy so data of strategy is basically uh the data of returns of bnh into multiplied by the position so because we're going long we've got a specified position right so the data of returns for tens b and h and multiply by which is the daily returns and multiplied by data dot position which is basically this one dot shift one because it's the previous position we need to calculate for the returns so so far we're clear with the date of strategy so let's run the data so we've got the data of strategy and then the data of the um buy and hold as well so the reason why this is different is that in buy and hold is basically no different it's like you're going along continuously uh you're not going at short position on the other hand for the strategy which is the sma strategy we're actually going short when the smas is lower than the small so this kind of get depicted to this side of the fence so now let's uh drop dna values obviously so data dot drop n a in place equals true so that's done so we've dropped the n a so now let's calculate the sum absolute performance let's calculate the absolute performance of both these uh buy and hold and also the strategy and compare the two so we'll do the returns so we need two square brackets by the way so we need um returns b and h by and hold comma what's the other one strategy strategy so we've got that one dot s-u-m so some of both of them so strategy we had 1. 95 returns buy and hold we had 6. 05 which is pretty good because the buy and hold actually beat the strategy of 50 to 100 day moving average but we need to compare it with the other factors like the drawdowns and the standard deviation because that's quite important because remember when we studied this we really saw the drawdowns come back to almost 80 percent so just because the returns is higher for buy and hold doesn't mean it's the ideal strategy so we're going to do is we're going to calculate the absolute performance so for that all we need to do is we just do dot sum dot apply dot apply and p dot exp so i'm going to just give in a bracket to show you so what one dollar investment will be if i do that so one dollar investment 426 in the buy and hold and the strategy will be seven so that's the absolute uh absolute performance so let's also calculate the standard deviation of both of these so i'm just going to copy this and i'm going to paste that dot std um function we've done this before dot np dot sqrt 252. so that gives us the an old standard deviation i'm just going to type in there and all and all std so as you can see the buy and hold on the strategy has similar uh close by similar standard deviation so in this strategy the 50 crossing over 100 and we going long if the 50 cross 100 and we're going short if the 50 closes below the 100 strategy it's not really that beneficial so if i look data. close dot close dot plot fixed size equals market total comma eight so we've got a general bias to the upside so how about i create a strategy in such a way that i don't go short uh so that would be an interesting change so i'm going to create a new mark down here so strategy adjusted adjusted with long bias so i'm not going to take a short position because i believe that i there's no need to be participating in a short position because the fundamental bias is the long side why should i trade why should i expose myself to the choppiness of the short side so what i'm going to do is exactly the same thing that we did before except the position will be different so let's do data of position is np dot where sma square in smil just one or else zero so i'm going to call this position two so we'll run that so we've got the data position two now let's calculate the strategy returns as well so we'll call this strategy two so strategy two is return spy and whole into data dot position two uh dot shift one so let's run that so now we've got the strategy returns of the other variable as well so we're just going to drop the n a that will drop and then in place equals true so now let's compare them both so we've got the data of returns by and hold and we'll compare that with the strategy 2. so there you go strategy two has got slightly better returns um and also let's see what one dollar will be so intense buying hole and strategy two so we've got fifty three four ninety four nineteen as compared to four twenty six and seven uh so how about the standard deviation that's what we've been looking for right well where we where we able to reduce the risk by reducing the standard deviation so i'm going to go down and i'm going to place this here just calling standard deviation 2. so we had 44 standard deviation now our standard deviation is hey hey 34 so we were able to completely reduce the risk and by taking a long bias we were able to get much better returns as compared to the going going short and long together so from this we can actually conclude based on quantitative trading analysis that uh strategy two strategy two is better than strategy one so that's how you create great strategies by making certain biases making certain changes and this is where back testing and coding really helps you you can also compare different things like let's say instead of this comparing it to buy and hold we can actually compare it with strategy and strategy position so let's do here strategy so you can see forty four percent standard deviation for the first one thirty four percent standard deviation for the second one so um sma strategy is pretty decent the drawdowns might be smaller as well so you can also calculate the drawdowns for the buy and hold and the strategy too for the long only bias and see which one performs better i am pretty sure the drawdowns might be better uh for the long only bias because you're not expecting uh we're not going long if the markets uh yes compared to buying whole when we're always long it's only if we're above a certain moving average we're actually going long so the drawdown i think if i can remember our drawers was like 80 or something i think for the long only buyers the drawdown might be better or not might be better so you might have to research that so that's the other challenge that i'm gonna write down here so this is our other challenge as well okay so now let's move into creating a first function so you see many of these things like std function here or a mean function or a sum function or many of the functions there so we can create our own function so the advantage of creating our own function is remember we did this line by line for every single code every single strategy we can actually minimize that so i'm just going to change this markdown and call this creating function creating our first function okay so let's create a first function so it's basically everything that we just did before but containing it to the function so that that function does that job like i said before function is like just like your hand as a function your brain is a function uh your knees have a function to do so let's create a first function so basically syntax is just create depth so we'll call the function test strategy and i'll pass on some variables into it so it can be stock the name of the stock the start date the end date you can change the name as much as you like the sma we'll just get a call on here and then when you press enter you're basically gone inside uh trading that function so let's uh test this function um i mean let's write down the duties of this function so first we need to download whatever data we have so i'm going to do df equals uh you know the library the y finance library so we do the white finance library and we're gonna call it somewhat fine it's actually y f y f dot download we need a stock name so we pass on that stock because the stock name is written here so we pass on the stock we call the start equals start and end equals end so basically whatever uh the start date we feed into the start and end date we feed you know that gets stored into that start so then the df can download the data from the yf library and then we need to just get the data of the close so i'm going to write another variable data and i'm going to write df. close and then to underscore frame so we can convert that close to a data frame and then we need to calculate the return so data of returns daily returns equals we've done this before np dot log data dot close dot divided by data dot close dot shift bracket one so that's the date of return so now we've got a new column for data returns and then we're going to do the data smas and sma long so sma s equals data dot close dot rolling so the first one is the sma so let's say we're doing a 5200 so we need to pass the first 50 200 uh into it so i'm going to call that int so that it says convert so in this like an integer float is like decimal points um string is like alphabet so because 50 is like a number we need to pass the integer into it so sma zero so i'll tell you why we are doing this in a later stage but as of now just walk through this dot mean so basically the first moving average is calculated for the sma shot similarly we do it for the sma long as well so i'm just going to copy and paste this smal so instead here it'll be sma1 dot mean again i'll let you know how this works bit later so again we need to do the drop n a function so drop n a in place in place equals true and then we need to calculate the position so data of position position equals dot np. where where data of sma underscore s is greater than data of sma underscore l then return one else go short which is minus one so there you go for that one so now we need to find the strategy return so data of strategy equals data of returns multiplied by data dot position dot shift one the same philosophy that we did before um so you can just fast forward it if you want to but it's better to go through it line by line to understand what's going on again we need to drop in any cases of n a that happens so in place equals true and then we calculate the return so return i think we'll do the absolute performance so one dollar is invested what happens so it basically is np. exp data of strategy dot sum and then we've got the standard deviation as well so we'll turn the standard deviation as well so basically again it is data of strategy strategy oh my god strategy dot std function asterisk np dot sqrt 252 date of strategy dot stds triggering p so now we need to return these two values the ret and std so return ret comma std so that's it that's all we need to do for the function so i'm going to run this function then i'm going to use this function to uh test the strategy so so the best way to do is we need to name this strategy here so test strategy so which what stock do you want to do first so let's do microsoft so msft so the stock name is microsoft let's do the starting date to be 2000 0101 and the ending date to be 2020 0 1 0 1 and here is the thing that i was talking about 50 comma 200 so what basically happens here is you see this sma 0 and sma 1 that's like a raise so when sms 0 is mentioned it takes in 50 and when sma 1 is mentioned it takes 200. so smas calculates a 50-day moving average and small calculates the 200-day moving average so i'm going to run this hopefully we don't have any errors let's see what happens so let's download the data okay we do have an error so let's see where the error is the key error sma l so i think we mentioned a small letter l here so we'll run that again run this run that again so there you go so we're basically got a very poor return to the microsoft with this 50 crossover 200-day moving average one dollar became 41 0. 41 which is not really that great and the standard deviation is 29 so let's try this with apple instead so aapl so this was pretty good in apple apple actually converted one dollar to 16 with a 36 percent uh standard deviation which is not that bad so how about tesla say for instance tesla wasn't there from 2000 i don't i don't i don't think so but anyways we'll run this um so that one dollar became 1. 39 so it's like a 39 increase um and with 49 standard deviation that's not really good that's a massive standard deviation how about for sby index so let's see that so spy one dollar became four which is really nice and then the standard deviation is only eight which is expected because sby is like the largest 500 stocks so this is basically uh what creating a function is so remember we did a line by line for every single stock so you can actually just use this function and save it and then just back test it over multiple stocks and find out which is the ideal one so you can also play around with this 50 200 as well so i'm just going to walk you through again how the strategy works so when when a strategy s and this function works so when you pass this spy gets stored in the stock this 2000 uh january gets stolen to start the 2020 gets stored into end and sma is stored 5200 gets stored to sma and then we're using these values to download the data to calculate the returns to calculate the smas and smal and basically uh calculate the strategy returns and then we are returning the annual return i mean the one dollar return and the standard deviation you can actually calculate the drawdowns um and also the annual return as well we know the calculations we have discussed before you just have to plug it here and then run it so this is just a very beautiful function you can create all kinds of changes to it like remember like i said you can make changes to this instead of going long you can go shorts instead and or you can just take a long bias um like we discussed before or basically a short bite as well and you can back test multiple strategies for multiple strokes just with one line of code and that's the beauty of coding you can do multiple things in one go so hopefully you guys understood our first function then we'll now discuss about uh classes as well so let's create our first class since we have already discussed our first function so we'll actually create our first class so i'm just going to write it down so hashtag hashtag creating our first class now the reason why we're going to create a class is that we can use these functions in maybe some other python files you don't have to go through the whole process of writing down this strategy all the time of course you can always copy paste it but it's much more useful if you have got like a class and a python file stored somewhere so whenever you want to backtest you can just bring that up so let's create our first class so the syntax is pretty simple so it's class and let's call it sma back tester and basically we've got the function parentheses and then we have the column and then there we go so i'm gonna go um explain some of the things that we use uh it's more i don't want to define it to you and make it sound complicated if you want the pure definition you can always search it online but i just want you to understand uh from an example perspective what we're discussing so it look you can apply this when you code rather than learn from a definition perspective that you learn in schools normally so let's create a first function so it's def init so this is the only complicated function that you need to know about the in the class but i'll explain to you how it goes remember in the function we pass different variables so spy the dates and the sma so we're going to do the exact same thing in the init function so self is like a standard that's like a default and then obviously the symbol name and we're going to do the sma underscore short and then sma underscore long and then start date and then end date then obviously when we declare a function we need to have the colon and then here comes the use of self so what happens is basically self dot symbol so i store the symbol into self. simple similarly i store the self. smas is used to store sma underscore yes self underscore sma underscore l sorry it's not underscores here dot it's a mistake here apologies for that will be equal to sma underscore long similarly self dot start equals start self dot end equals end and initially the result is nothing so we're going to call self. results equals none and then self. getdata so basically we're creating a function to get the data so and we need to automatically start this whole thing so what happens here is essentially we use these um you know for these functions here like the data returns and dates of clause and close and then the starting date and the ending date and the sma 0. so here instead of using sma zero sma one we basically use the self. smas or self. sma one uh similarly instead of using the symbol name here uh we actually use like stock here we actually use self. simple so that's all you have to do here and the self. getdata is a function that will declare which gets automatically initialized when the when we call the sma backtester class so first let's create the data the function for getdata to get underscore data so what i'm going to do is i'm going to copy all the thing that we hear the first uh small paragraph because that's where we actually uh download the codes so i'm going to copy this i'm going to paste that i'm going to make some minor changes which you will see in the course so the first change you need to do is you need to make sure it's all in line so again df physical yf download stock so instead of talk what do you do we do self. simple self. symbol and instead of start what do i do self. start and instead of end what do i do self dot end so the reason is i can use this in many of the functions which is there in a class so class is like lots of functions in one thing so we don't have to do all these functions separately so now you've got all the things necessary for downloading the data but here we need to make a few changes so here it's going to be self dot sma underscore underscore yes and self dot sma underscore l dot mean so yeah and let's also store this data somewhere so i'm going to call it self. data2 i don't know if i might use it later in the future so i'm going to call it data and i'm going to return the data as well so now the data gets returned from the getdata function now we can use the data anywhere else we want so let's create another function for a test result so test underscore results i'm going to call it self meanwhile there's itself here as well which is also part of the syntax and then again here we're just gonna copy paste what we did here but with the minor changes as well so i'm gonna copy this one here return standard deviation gonna copy paste that there let's make sure everything is in line okay so remember we stored the data to self. data2 so now we can actually use that so we can actually call data equals self. data2 dot copy so we're going to copy whatever the values in it and then obviously you're going to drop any uh any problems there as well so again here what are the other things we need to do data of return data observation shift one that seems okay but let's add something exciting as well let's add the comparison of a buy and hold with respect to the strategy so let's create a new column we'll call it uh returns ph which is the buy and hold returns ph equals uh data of returns returns dot com dot apply bracket here it comes from dot apply np. exp and obviously the data of the strategy strategy let's call it strategy results data of strategy dot com dot apply np. exp it's data strategy results and intensify and hold we call return strategy return strategy strategy okay so let's also calculate the performance and the outperformance as well so that will be much more better than the just to return the standard deviation obviously you can actually return anything that you want but i just want to give another example so i'll just leave that here um so let's see the performance the performance is basically performance equals um data of the return strategy so it's basically this one dot i log of minus one so i lock or minus one of the last um last call last row to basically get the final value of that and then out performance equals basically uh performance minus we need to find the performance of the buy hole as well as the data of uh this one here let's return spy and hold which is the last digit dot i lock minus one so basically it just subtracts the final value of the buy and hold and the final value of the strategy and subtracts that and what we get is basically the performance um so again let's store the self dot results the data to self dot results so we might use it somewhere else so what i'm going to do is rather than returning this annual return the standard deviation i'll rather return this time the performance so i can return the performance and also the out performance now obviously a number will be so big so i can actually round that number so you can do round performance comma six and out performance again i can round this i'll perform comma six so that's the function for test result so let's also create another function to plot the results so i'm going to do plot underscore results that'll be self so first let's um talk about a thing that we didn't do the entire video and that's essentially an if or else statement i'm pretty sure we did an np dot where statement um but we haven't done like an a4l statement it's basically pretty simple um the np dot where is right here so if if analysis basically if certain conditions are met do that and let's do something else so in this situation i'm just going to add an if condition so that you guys understand the default statement but also it'll be beneficial for you in this function so if say for instance we haven't got any data or we haven't got any results yet there's no point in plotting the graph so when somebody does use the plot results function we don't want it to plot anything so we have to give them a notification saying hey dude listen you haven't run the strategy function yet so if self dot results which is the self results here equals none so if um is none is is none then then print run the test please run the test please and else so you go back and then you put again an else and then you put a column there as well uh you give let's say i'll give it title here so title will be um we'll do that you know the braces bracket that we decided before um sma underscore yes so it's a title for the graph uh equals this one and we'll give another another line and then sma underscore l l another brackets and then obviously we need to fill up this pattern this is area um so what i'll do is we'll just give another bracket here this would play in here as well so dot format so we need the first sma short that's self. simple so we the first one will be self. simple here and then sfself. sma short and then self. sma long so basically format and then self. symbol that will be the first brackets and then self. sma underscore yes comma self dot s sma underscore l so that's sorted and now let's plot the graph so that'll be um self dot results which is a results uh table and then we'll give two brackets and that will be the returns by and hold because we i want to plot both the returns by and hold and also the returns uh of the strategy as well so return strategy as well copy and then we need to put quotes in it which i'll do in a bit so let's go it's there and then codes here and then obviously the plot functions of plot bracket title equals title which is the title here and fixed size pick size equals 12 comma eight which you've done multiple times before 12 comma eight another bracket as well so yeah so i think we should be ready to go hopefully we don't have any errors but then we'll see how it goes so let's run this okay unmatching line 16 is line 16 data close rolling okay smal oh yeah there's additional brackets here so let's run this class so tester equals sma um we'll just copy paste it so it'll be much more easier we don't have to go through the whole process uh somewhere back tester and then we'll just give it a symbol i think i'll give spy s p y and obviously uh or the format that gave we gave the smas small self is not included so simple smas small start and end so i'm going to give it 50 comma 100 and the start i'll give ss 2000 0101 and then um 2020 0101 so hopefully we don't have any area so let's see what happens okay so we have downloaded the data and i assume uh this def dot get data function has been uh worked out that's why we see this hundred percent one upon completed because normally we see that when the yf download takes place so now let's see the test results so in order to call the test results what we need is we need to do tester dot tester is this one here dot uh test results so i'm just going to copy that test results let's say yes as well and then let's see hopefully we don't have any errors okay we do have an error date two day two so oh yeah it's data two okay so here we go again round two we downloaded it okay so here we go we've got 2. 6349 that's the um performance and the outperformance is by 0. 3 so let's plot the graph as well so again tester. test. plot results copy that i'm gonna paste that there and then i'm gonna run again we've got an error title reference before assignment so that's here where did i go wrong title equal style oh yeah so here it's equal to not colon again we have to run the whole class again so let's downloaded that test error results plot results so there you go so returns of the strategy is there which is in the um orange graph and then returns of the blue is the buy and hold of the spy since 2000 to 2020. so in this strategy the sma 50 and sma crossing sma 5100 that seems to work very well in the sp why but maybe some other stock it won't be working that well so now you've got an idea on how the class works i've created a class and then i've created a tester to store the class there and then i've used the functions in that class to run and compare so since we've created this whole function and this class you can actually use it in future for your reference rather than writing the code all the time so one of the things i'll do here is i'll give you a sample on how that goes so i'll create a new notebook so i'll give a new python one and i'll call that class sma python notebook and then i'm going to copy this entire class and i am going to place it here and i'm going to save it so once you save it you download as a python file dot by so this one is normally a pi n b file so we need to save it as dot pi so we click on dot pi and we'll get a file here so sma python notebook so i'm gonna rename this one as as sma back tester so sm a little bit smaller sma back test so sma backtest. buy so i've saved it so now i have to copy this and paste it in the same place where my um jupyter notebook is so in this place it's basically an untitled folder too so i'm going to paste it here so then i can use it so sma backtest. pi is there so now if i go to untitled folder two and click on sma backtest dot by you basically see the whole of sma backtester uh file that's here so uh regardless we will need many of the uh libraries as well like uh the import wi-fi notes and pandas and numpy so i'm gonna copy that and also paste it here and then i'm just going to save it so we've actually created a python file sma back this so imagine you are creating a new file or a new notebook and you feel like in this place you need to create a strategy and you want to back this strategy and you want to back this nurse and maybe test so rather than coding it whole over again you can actually just with a few lines of code do it yourself so i'm going to call it sma check sma class check and what you do is you know the file name of this that's sma backtest. by so what i'm going to do from sma back test sma back test import the class sma back tester so i'm going to run that so yeah so we have now imported the sma maybach tester class here so now i can run the exact same thing that i ran at the bottom of this thing here so here so i can do this thing here desktop equals sma back tester hopefully it will work awesome so it has downloaded that file let's see what we get for the test results can see the performance and the out performance you can always put in the standard deviation and the drawdowns and annual returns and all those other things but this is just an example for you guys to understand i can also do the plot results as well so there you go so you've got the uh returns the strategy and the returns of buy and hold so this is the beauty about storing it in a pie file of having a class and storing in a platform you can use it whenever you want wherever you want you don't have to go through the codes all over again obviously you can always copy paste it but this is more of a professional coding way of doing things so let's try out another maybe like apple let's see whether it did beat the market uh that's results so this one not really it didn't uh beat the market i guess so let's see so the return of the strategy was extremely poor uh the buy and hold strategy obviously beat the uh 50 crossover of 100 strategies how about i do one and 200. tested our results test our plot results oh there you go here the tester strategy has performed uh much better than the buy and hold strategy so you can actually try out different combinations and permutations remember this is something which has both the um long and the short side so remember we discussed about just having a long bias in stocks so that's a really good idea as well so so i think we've reached the peak of our coding side of things now we'll discuss more about apis and things like that uh this is the crux of most of the things i think we've done with will dealt with many other things as well so uh we'll actually give you another uh challenge as well so this challenge is um so watch our youtube channel youtube channel there's a video called stan weinstein's trading strategy so so watch stan weinstein strategy in youtube in our youtube channel quant program youtube channel uh you'll see a strategy by stan weinstein which i've coded and back tested so i've done this here in trading view the code is also freely available in the description so what i want you to do is i want you to back test it here on python so whatever you've learned you've got the tools necessary i've taught you all the tools necessary you see what the rules are in that video in that video here for a standard procedure you can actually check out our downloaded from our trading view codes if you want to otherwise you can code it right here and then back test and see what you get see what the results are for different stocks this strategy has worked tremendously well since uh the day i put it in so i think i put in april 14 some there have been lots of great comments lots of great feedback of people saying the strategy worked very well across the financial markets this year so take a look at it and i want you to code that and i want you to backtest this create a class save that class somewhere in a python file so i'm going to write it here so yeah so once you get that you'll get a flow of okay because there are lots of things we deal with in the standard monster strategy so not only are we dealing with close we're also dealing with weekly data so here we're done with daily data i've showed you how to download weekly data and also we deal with the moving averages which have dealt here already we also deal there with volume so that's a really good addition we know we can already get the volume from the y finance data so you can actually use that as well so then you can create the strategy this one this time once a strategy is a long buy strategy so it will be really interesting how the results are you would be shocked with how amazing some of the results are but regardless i hope you guys got an idea on how to code in python and back just in python so let's now discuss about apis so um i don't like the whole definition approach towards learning anything i think that's one of the biggest problems with regards to learning anything even in schooling most of the time we focus on learning as compared to a practical experience we tend to understand the definition so all to this video the way i've taught is basically through the process of practical examples so we'll do the same thing with apis as well so the definition of api is essentially um application programming interface you can get the details completely online on the actual definition but theoretically from a practical example it's like talking between two people so it's like you asking a friend for an apple and then the friend giving you the apple or you going to a bar or restaurant and looking at the menu and ordering a pint of beer and then the waitress or the bar attend are giving you back applying the b so that's basically what an api does it's like talking and exchange of data and communication so there are many apis depending on a broker apis can change like their process or their functions can change so there is apis for fxcm there's also apis for interactive brokers so depending on your broker if you can go to their platform and then find out the details of their api then you can actually uh do it yourself but regardless uh it's easy to go through it by just making a few statements i'll run through an example as well so i'll give you an example of alpha vantage and i'll go through that process so you guys get an idea on how the api process works so alpha vantage is just google alpha advantage and if you can go to they give you data for um practically all the stocks and the cryptocurrencies and the technical indicators and everything and you can actually download it you can download the api key so what you do is you go to the alpha manager website and then you get your free api uh code so you just enter the details and they'll give you the api key so once you get the api key uh what you need to do is you need to install the api in your anaconda so similar to the way we did for the wi-fi notes we can actually do it in the anaconda navigator so just go to base root there and open terminal and just write in pip install alpha underscore vantage and just click enter and there you go so now alpha vantage is now installed um in the anaconda navigator and in your system so you just go to the um your python file create a new python file and then similar to what we did in importing the class we need to import the alpha vantage time series as well so for that we just do from alpha underscore vantage dot time series import time capital series and just click shift and enter just wait for that start to go away so meanwhile when the star goes away i'm going to put in my api key so i've got the api key so similar to yourself you guys will also get an api key so i'm going to fill in my api key which is h45 6 said l c o c h 7 c h 1 0. so i'm going to delete so off this api but you guys have to create and put your own api in that system and once you enter that shift and enter so now the api key is stored in that api key so now i need to store it using the time series uh thingy here just as we called that class before so again it'll be time series and then key equals api key which we just did so i'm just going to copy paste that and then output format so you can actually get in different formats so i want to do it in uh pandas formats we've been discussing pandas uh considerably here so we'll just do pandas format so output underscore format equals pandas so if i just click here and do shift and tab basically you'll get all the details of the default values and also what kind of things to be put in the indexing type is date and things like that so by default indexing type is date so you can actually change that and all those other things so anyways we'll just do the basic stuff and then i'm gonna do shift and tab and then comes the downloading of the data so if you can go to the um maybe in the support section you could actually see what kind of data you can get we can get intraday data daily data daily adjusted data and you could also see what kind of functions to use um and all the other details but i'm just gonna go some basic downloading of daily data so i'm gonna call data equals ts which is a ts right here ts oh it's called blacker there so ts dot get underscore daily and we'll just write let's download apple and let's see whether we get the data okay and let's see whether we have the data so there you go we've got the data entirely even the volume the close and the highs and the lows um and then let's see the just the panthers one so i'm gonna just do data of zero so we basically get in pandas format so there you go uh we've got a data frame uh format and then i'm just going to do is i'm gonna store this into a different variable so then we can actually work with it so there you go so now i can find out what are the columns available i mean the same processes are pretty much the same data2. columns and then if you want to just choose the close value you can just do data2 to bracket and then make sure you just don't write close because the columns is this is the column so then you just copy and then you just paste there so basically you've got the data2. close and you can actually convert that to data frame and all those uh things that you have done before so to underscore frame so there you go so these are some of the things that you could do and then once you get that then you can basically send the strategy so enough advantage is just basically for downloading so similarly when you when you do it for fxcm or interactive brokers and things like that just like you have to get daily uh you'll have another function to pass on the trade so you can download the data you can backtest the data and then you can also send the information to buy if certain conditions are met so if you can see here most of the data is from 2021 to 202. the data is quite small but if you want more and more data you need to have paid api services so there's another company called polygon dot ai i think it's called polygon dot air [Music] polygon dot io sorry so it's called polygon. io and you can basically get all kinds of uh quality data i mean it's used by many of the big companies out there uh they also got stock api and crypto api you also get tick biting data i get by tickers and then level 2 data things like that so again most of these functions can change depending upon which broker you use but i hope you guys got an idea on how apis generally work but it's really important that you invest lots of time in getting quality data because quality data comes with a price so another platform i generally use is nor gate data which i use for back testing but it's quite expensive and but it gives you the best data out there so in my course for the qual program course for the portfolio back testing and everything what i did was use the uh norgay data so i use that for army broker but again it comes with expensive price but then if you want to backtest proper you need to get the expensive data but if you just want basic stuff uh you just download why finance so anyways regardless of where you get the data once you get the api basic idea it's just this you use the functions to send the information and also receive the information so i guess that kind of concludes our entirety of the course uh you can download all the things from my description if you want to check out our quant program trading course that's always in the website and feel free to ask any questions through our email oneprogram gmail. com or at the comment section and i'll try to respond as quickly as possible hope you liked it have a great day
