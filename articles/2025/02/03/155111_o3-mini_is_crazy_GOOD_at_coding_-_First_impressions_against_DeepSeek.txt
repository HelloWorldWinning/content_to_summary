Timestamp: 2025-02-03T15:51:11.507081
Title: o3-mini is crazy GOOD at coding - First impressions against DeepSeek
URL: https://www.youtube.com/watch?v=Lc4F6obTiMw&ab_channel=GosuCoder
Status: success
Duration: 16:56

Description:
**核心总结：**

1.  **核心观点：**  O3 Mini 模型在价格和性能上都取得了显著进步，尽管在复杂任务和物理模拟方面仍有改进空间，但它在成本效率方面表现出色。
2.  **基本观点：**  尽管 DeepSeek R1 在某些方面表现出色，尤其在物理模拟方面，但总体而言，O3 Mini 在多个测试中展现出了更好的性能和成本效益，使其成为一个更具吸引力的选择。

3.  **总体框架:**
    *   **引言：** 介绍 O3 Mini 的强大之处，特别是其在科学、数学和编码方面的能力以及显著降低的成本。
    *   **第一个测试：** 使用一个复古的 2D 弹球碰撞游戏进行测试，比较 O3 Mini 的 low, medium, high 三个版本以及 DeepSeek R1 和 V3 的表现。
    *   **第二个测试：** 使用 AWS Athena 构建一个复杂的 LTV 查询，并测试 O3 Mini 和 DeepSeek R1 和 V3。
    *   **后续测试：** 要求模型构建查询，找出新用户购买最多的三项商品。
    *   **结论：**  总结 O3 Mini 的优势（价格、速度），并探讨未来测试方向。

<Mermaid_Diagram>
graph LR
    subgraph "整体框架"
    A[开始] --> B(引言);
    B --> C(第一个测试: 弹球游戏);
     C --> D(第二个测试: AWS Athena 查询);
    D --> E(后续测试: 最受欢迎商品查询);
     E --> F(结论);
    end
    
    subgraph "第一个测试: 弹球游戏"
     C --> C1[O3 Mini Low <br> <span style='color:grey'>低成本, 快速</span>];
     C --> C2[O3 Mini Medium <br> <span style='color:orange'>平衡性能</span>];
     C --> C3[O3 Mini High <br> <span style='color:darkgreen'>较高成本, 更好物理效果</span>];
    C --> C4[DeepSeek R1 <br> <span style='color:purple'>最佳物理效果, 但其他方面较差</span>];
   C --> C5[DeepSeek V3 <br> <span style='color:lightblue'>尝试不同方法, 效果不佳</span>];
    end

    subgraph "第二个测试: AWS Athena 查询"
    D --> D1[O3 Mini (各版本) <br> <span style='color:green'>生成相同准确查询</span>];
    D --> D2[DeepSeek V3 <br> <span style='color:orange'>生成相同准确查询</span>];
     D --> D3[DeepSeek R1 <br> <span style='color:red'>API错误, 无法完成</span>];

    end
    
    subgraph "后续测试: 最受欢迎商品查询"
    E --> E1[O3 Mini Medium <br> <span style='color:green'>成功生成准确查询</span>];
    E --> E2[O3 Mini High <br> <span style='color:orange'>查询错误, 需手动修复</span>];
   E --> E3[DeepSeek V3 <br> <span style='color:red'>生成不正确查询, 假设了不存在的表</span>];

    end
     F --> F1[O3 Mini <br> <span style='color:green'>性价比高, 值得进一步测试</span>];
     F --> F2[DeepSeek R1 <br> <span style='color:red'>物理效果好, 但其他方面表现不佳</span>];
     F --> F3[DeepSeek V3 <br> <span style='color:red'>表现不佳, API不稳定</span>];

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#ccf,stroke:#333,stroke-width:2px
    style F fill:#ccf,stroke:#333,stroke-width:2px
    style C fill:#aed,stroke:#333,stroke-width:2px
    style D fill:#eea,stroke:#333,stroke-width:2px
    style E fill:#eac,stroke:#333,stroke-width:2px
   style C1 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style C2 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style C3 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style C4 fill:#f0f0f0,stroke:#333,stroke-width:1px
   style C5 fill:#f0f0f0,stroke:#333,stroke-width:1px
  style D1 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style D2 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style D3 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style E1 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style E2 fill:#f0f0f0,stroke:#333,stroke-width:1px
     style E3 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style F1 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style F2 fill:#f0f0f0,stroke:#333,stroke-width:1px
    style F3 fill:#f0f0f0,stroke:#333,stroke-width:1px
</Mermaid_Diagram>


Content:
hey everyone welcome back today I'm going to be digging into 03 mini in particular I'm going to be putting it through two major tests one a fun game that uh I haven't seen many other people try to reproduce with AI yet so I'm hoping that'll be fun and then two what I want to do is I actually want to use a problem that I'm currently working on which is a fairly complex query that I need to build in AWS Athena so I'm going to give it all the information and I'm going to run it through it in low medium high and I'm also going to do it in deep seek as well and just see which one of them actually comes up with a better query before I jump into too much I just want to talk a little bit about the post that open AI did on 03 mini what they claim is that it has exceptional stem capabilities with particular strength in science math and coding this model continues on track of driving down the cost of intelligence reducing per token pricing by 95% since launching GPT 4 that's the most that's the thing I'm most excited about we need to get the cost down so we can use it in more places so first let's start off with the game so the game I want to do is pull and the reason I want to do this is because back in 2003 this is something that I I worked on a decent amount I was a pretty much uh a math nerd at the time I really really love dealing with like physics and I worked on physics systems and things like that and I had just been kind of learning how to code you know maybe for about two years at this point and I spent so much time trying to get like the perfect realistic pull effects uh so balls bounce off each other correctly multiple balls can hit each other and all the momentum and everything transfers correctly and if you look at the code today yes there's things that I would change it was all written C++ using direct X9 but it really did teach me a lot and I realized at the time like how complicated it was to actually build the math behind the Collision of two balls which is relatively simple but being able to even pick up the edge of so say you're hitting one of the pockets of where the pool balls go in being able to get the right angle back by doing the right type of M there it's just super super fun all right now let's take a look at 03 mini low what I did is gave it a very simple prompt which says please include the necessary physics Collision detection and scoring the ball should be able to go into the pockets etc etc and the response time of this was actually mind-blowing to me and if you look at the API cost we're looking at about a penny to do this with 03 mini low and then okay so now it jumped up to 3 cents so three cents to actually do this and now what it's going to do so I'm going to run the game I'm just going to see how far off it is as you can see the board is not bad I can actually move around the Q Ball but the C Ball's yellow but the physics are kind of really messed up here which is kind of unfortunate the next one I wanted to do is the 03 medium version the O3 mini medium version giving it the exact same prompt that I did in the last one this one you could tell is taking a little bit longer to actually generate the code but I'm hoping that the results will be slightly better that we should be able to get a better version of the game I would be really impressed if one of these could come up with something that actually had the physics working correctly on the first shot CU again like I said I spent a lot of time in that first one that I showed you actually building that making it work I know that game looks like garbage right now but I was very proud of that back in my younger days all right so it look like about 235 is line to code I missed exactly what it said but pretty close now we're going to run it we run it this game immediately looks better oh you can actually pull you see oh but the physics are pretty bad here so the balls kind of like stick to each other uh but they bounce off the walls really well and what I wanted to see now is like does it actually go into a pocket so what I tried to do is like send it into pocket and it does and it's funny because it doesn't actually give you the wall back to play but definitely better than the Mini version so let's go ahead and jump over to the High version now the High version we're going to do the exact same prompt again and you immediately can kind of see that this is taking a bit longer so the API request is already running one thing I also want to look at is the cost of this one and how they compare to each other because the low version was about 3 cents and that actually is just mind-blowing to me that you're able to to pull something like that off for three CS now with open AI so I'm excited about seeing the cost come down but I will say at the same time um I think they were kind of forced into it because of deep seek releasing R1 so I bet you anything all of these timelines moved up so I think I think really what we do is we have deep seek to think for giving us a better uh open AI model to play around with in my work that I've done so Friday and today I've been working with O3 quite a bit and I've been very impressed with it I do bounce between the low medium and high quite a bit and I found the medium one to be mostly good at everything I need to do okay so we're finally getting some code here I do want to pay attention to the cost and I want to pay attention to the number of lines here so this one cost about 8 cents so 7. 68 cents so here we go got 221 lines to code it's actually less than the other one that we had but the game looks pretty good let's see if anything works oh the physics are better but still struggling unfortunately I bet you I could work on this with a couple more prompts and get this working pretty well but it looks like the ball went into the corner or maybe I just imagined that but yeah the bouncing up between balls was just totally off compared to that first one that I worked on that I showed okay so now let's jump into the deep seek R1 version and I gave it the exact same prompt and I just want to see how it compare part of me thought that this was actually going to do better than 03 mini I think like this would probably be more akin to like the 03 big big boy model um not the Mini version but I really went into this with very little expectation one thing I will note is I have a lot of problems lately with a deep seek API so I do just want to add a full trans experienc you say that this is my second attempt that I actually was able to capture my first attempt I kept getting API errors which was super unfortunate now this one is immediately a lot slower and it's super like kind of painful coming from the fast like 03 mini to kind of sit here and wait for this code to come in and we're we're almost up to about 200 lines or so uh by time it finishes it looked like and the cost of it though was a penny which is also pretty incredible I also like that uh deep seek R1 talked about installing like Pi game to make sure that was set up properly I thought that was a great touch which did not happen with O3 mini it didn't talk about like setting up your environment so that that is probably a Plus on the R1 side for sure and I also really like this update to rot code where they show you the reasoning and you can see that updating I thought that was kind of a nice touch most recently so looking at this I was surprised honestly it looks awful the balls aren't in the right place they're all in the middle I did it took me a minute to actually realize there's a power meter in the top left I don't know if you're even kind of like noticing that but the ball Collision significantly better so they all kind of failed in their own way I put the QQ ball in the hole and it went in the hole but didn't actually give it back to me and I won't put you through the pain of this one but I wanted to run through deep seek V3 in particular just real quick one of the things is again the API kept failing on me so often that it was actually it's one took me a few traps but this what was really interesting about way V3 worked the R1 version and the mini models were kind of like one and done but V3 actually built itself like a list of things it needed to do and then it would go through one by one and actually do it I thought that was actually pretty fascinating and then ultimately what ended up coming up uh was a I would say a pretty bad version of Po uh we it did have like some of the mechanics that you would expect to be there where you could actually pull the CQ ball back but none of the collision and stuff worked well at all so super unfortunate I but again I do think I could get all of these to work well with just a little maybe five or six more prompts kind of telling it what it needs to do so before I jump into the next problem what do you guys think do you think what any of these worked better than another one uh in my head I feel like the Deep seek R1 physics were by far the best I don't think there's a a debate there in my mind but I will say the rest of it around the Deep SE car one version was kind of bad so it's kind of a tossup I I could go anyway but it is still impressive that they were able to do what they did for pennies basically to generate that all right so let's move on to the second problem this is one that I was working on today and I want I got to thinking like it'd be really cool to just see how good it is at taking a fairly complex query and doing it in AWS Athena and then I'll show you it running we're going to start with just the regular O3 mini and we'll do the O3 mini high and then we'll also do deep seek R1 and deeps V3 if those are working so the problem here is what we want to do is we want to get the LTV which is a lifetime value for newly acquired users I give it some details saying let's define newly acquired users as users that have been acquired in the last 60 days meaning they have made their first purchase within the last 60 days I Define the LTV as a total spend let's also say that we want the metric to Output the average LTV of all newly acquired users combined so really what we're looking for is like a basically a group of all the newly acquired users and we want to see what the average LTV is in that group so we can compare it against another group for example then we take a look at the table definition we have this table called order exclusions which basically excludes orders that shouldn't be included uh for various reasons I won't get into the complexity there and I give it one of my test ORS to actually work with and then I also outlined one of the issues one of the issues is that the table actually includes line items for each order for each item in the order rather so we need to make sure that we're looking at ID and basic grouping on that ID and not summing on total price because total price already is the total price of the order so for example I if you bought two items you would have two entries in this table You' use the ID to determine the the order ID and you could look at total price of any one of those to determine how much the user spent it's kind of interesting because this is just raw data stored in paret that we're quering against in Big Data because we have just an enormous amount of data here so let's go a and kick off O3 mini and then I'm going to go pull up uh AWS Athena Okay so we have our query and it thought for 5 seconds and here's what it came up with so it dded the orders I like that curious how it did this uh okay yeah it did a distinct on ID so let's go ahead and grab AWS Athena grab this particular query and run it and see what happens so $56 seems about right that is pretty good honestly L that it came up with that now we're going to give the same query to 03 mini high and just see what it comes up with here doing a bunch of thinking I thought for one second more so not much more now it's the duplicating came up with the same answer there yep yep I don't like that it didn't give me all the query together uh that is kind of unfortunate so but anyway let's go ahead and just C copy that in one by one I I did I do like the regular one that just gave it to me to put in here let's see if this actually runs it's not that big a deal just recopied 56. 59 56. 59 absolutely perfect okay we're going to now attempt in deep seek V3 and just see what it comes up with and how it Compares I hope that it's Working Poor deep SE just feels like it's been falling apart lately interesting I'm actually surprised that they all came up with the same DD orders here fascinating this one also did not give me the exact uh the whole query together so go ahead and make a new one and we'll copy it over just to see how that works and then when this is done what I'll do is I'll compare it with the one that I have that I know working correctly if I were to ask it to give me the full query I wonder if that would resolve it here yes so now it's doing it yep it put the comma there properly that's what I I should have done when I was changing it go ahead and run that now it's running we get the same answer 56. 59 great and then with R1 do the ex think but deep think on and fire it off I'm so curious if this does the exact same query again I was expecting to be a little bit more variance here than what we're getting thinking for quite a bit we're not even getting the internal monologue yet that's happening so that means this is probably going to fail unfortunately this is what happens because then what it'll do is it'll end up just like timing out here yeah that's unfortunate the server is busy we can try again later all right I feel like all three of the tests I did here actually went really well so let's do a little bit of a A Different Twist here we're going to do a follow-up to the question I just gave it because it should have all of the table information and now what I want to do is I want it to build me a query that gives me the most popular three items that these newly acquired users purchase let's fire this off this is the regular 03 mini the medium one I think that's what that means here just to show you I'm using this one the O3 mini one they' only give you this one and high in the UI the low one I can get in the API when I run it so here is the the query and I am so curious what this is actually going to end up coming up as so we're running and sure enough that ended up working quite well very very impressive now just for fun I'm going to try that same thing in O3 mini High I love that open AI has started doing this I think they're doing this again because of R1 which I think is really cool let's come into here and I'm just going to run that that one ended up giving me an error that's unfortunate so I'm not going to kind of debug that a little bit more because I know exactly what the problem is is because like Athena's not great I bet you they did something as OE up here let me just search I'm just out of curiosity yeah as OE I found that like Athena just doesn't do this really well when it's in the same query so what they would need to do is just change this to item and quit doing the the simplified version so it's not bad but they definitely should have changed that and ideally it would have known that in the model because Athena is kind of picky about that all right and then let's do that also in deep seek and see what it comes up with this is the V3 version not the R1 version so again we're going to end up with okay we're going to run the query from Deep seek we also got an error it ended up to like making up a table which does not exist so it took in took in and made some assumptions on it that ended up not working um so in this particular one the 03 mini one did the absolute best here but I'd say other than deep O3 mini O3 mini did fantastic here I've done a lot more testing than I'm able to show in a single video but I I do want to call out a few quick points one the price of O3 mini seems way better 01 was just very expensive anytime I used it two I actually want to try O3 mini with some of my my grading stuff that I particularly have built over time so I'll let you know kind of how that works and three I've only been testing O3 mini in existing code bases a little bit and so far it's doing pretty good ultimately I keep falling back to Claude though because of the computer use capabilities that it has built into R code uh but anyway I do want to like maybe Monday I'll commit to using just 03 mini all day for coding so I can give a better impression on how that in particular works but I think that's going to close out this video if you don't mind hitting the like or subscribe button that would mean the world to me I think we're almost to 3, 000 subscribers already which is just phenomenal till next time peace out
