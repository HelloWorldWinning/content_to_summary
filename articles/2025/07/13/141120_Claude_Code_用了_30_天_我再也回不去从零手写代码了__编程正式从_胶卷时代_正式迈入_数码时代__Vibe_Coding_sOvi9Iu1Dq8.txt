Timestamp: 2025-07-13T14:11:20.953500
Title: Claude Code 用了 30 天，我再也回不去从零手写代码了  编程正式从「胶卷时代」正式迈入「数码时代」 Vibe Coding sOvi9Iu1Dq8
URL: https://youtube.com/watch?v=sOvi9Iu1Dq8&si=XfeeiZ6JVuH3vGvZ
Status: success
Duration: 15:24

Description:
好的，这是对原文内容的总结和分析。

**核心要点单句总结：**

Klow Code 的终端界面设计服务于人与 AI 高效协作的核心目标，体现了编程从传统手工艺向数码化伙伴模式的转变。

**总体框架 (Overarching Framework):**

理解 AI 编程能力的“大模型 + 工程工具 + 人”三要素分析框架。

**概要和结构化总结：**

1.  **引言与 Klow Code 初印象：**
    *   Klow Code (即 Claude Code) 虽高效，但其黑框终端界面引发两极分化评价，初看原始，使用后发现其效率。
    *   作者（海老的编程客）使用 Klow Code 完成多个项目（硬件服务端、写作软件、视频动画），分享经验和体验。
    *   视频将分五部分探讨 Klow Code 的深层原因、使用技巧、局限与未来。

2.  **编程的进化历程：**
    *   从 2000 年代的手敲代码、基本代码片段补全。
    *   2018 年 TabNine (基于 GPT-2) 实现整行补全、理解意图，是重要突破。
    *   2020-2023 年 GPT 大爆发，ChatGPT/GPT-4 时代：复制粘贴优化代码（“代码搬运工”）。
    *   2024 年 AI 整合进编辑器。
    *   2025 年进入 AI 编程工具“神仙打架”时代：AI 理解项目、拆解任务、适配风格，成为编程伙伴（智能体：感知、规划、行动、编码）。

3.  **Klow Code 选择终端界面的原因：**
    *   主要原因有两个：
        *   **编辑器碎片化：** 兼容用户使用的多种编辑器（VS Code, Emacs 等）。
        *   **UI 限制 AI 能力：** 华丽界面反而限制 AI 核心的感知、规划、行动能力，终端是“返璞归真”。
    *   终端优势：最大自由度（调用系统能力）、最小认知负担（直接表达需求）、与开发工具天然契合。
    *   效率提升是终端受认可的关键。
    *   赠送大量 Token 是其另一大优势。

4.  **Klow Code 高效使用技巧：“谋定动”三字诀**
    *   **谋 (规划需求)：** 充分与 AI 沟通、确保思路清晰、让 AI 复述需求、使用 Opus 模型、外部记录需求，减少后期返工。
    *   **定 (拆解计划)：** 让 AI 将任务拆分成步骤、标明可并行任务，形成渐进组织。
    *   **动 (快速执行)：** 基于清晰计划全速执行，出错时可中断或微调、利用“Gear”回滚（推测是内部机制）、清理记忆、使用 todo 文档作为上下文。
    *   **其他技巧：** `init` 扫项目生成记忆文档、利用注释与 AI 沟通、自定义命令、利用脚手架、将长上下文放前指令放后。

5.  **提示词技巧：**
    *   核心原则：“把话说清楚”，简单直接最优，避免复杂框架。
    *   利用“想一想”触发深度思考模式 (Think Hard, Oltron Sync)，应对复杂任务需拆解。
    *   使用正面表达（告诉 AI 做什么）而非负面（告诉 AI 不要做什么）。
    *   指定详细标准要求 AI 写出更健壮代码。

6.  **AI 编程的局限与边界：**
    *   能力上限由“大模型 + 工程工具 + 人”三要素决定。
    *   大模型：决定能力天花板。
    *   工程工具：优化交互、管理上下文、集成流程，但不突破模型限制（Klow Code 在缩短人与模型距离上做得好）。
    *   人：扮演定义者（明确需求）、把关者（审核）、创新者（处理新问题）的关键角色。
    *   AI 擅长常规功能、重构、测试、文档，是程序人的“超级助手”，非替代者。理解局限才能更好使用。

7.  **总结与感悟：**
    *   编程正在经历从“胶片时代”（匠人、深思熟虑、依赖经验直觉）向“数码时代”（快速生成、迭代、核心能力转向识别好代码、提示词、审美）的转变。
    *   基础原理仍重要，但创作方式、思考路径、解决问题手段已改变。
    *   作者亲身体验无 AI 时效率下降，更深刻理解到习惯已变，AI 编程已成为新常态。

<Mermaid_Diagram>
graph TD
    A["编程进化历程"] --> B["AI 编程工具涌现 (2025+)"];
    B --> C{"Klow Code"};
    C --> D["终端界面"];
    D --> E["高效协作"];
    E --> C;
    E --> F["AI 编程能力上限"];

    subgraph "Klow Code 高效使用"
        G["'谋定动' 技巧框架"] --> H["谋: 规划需求"];
        G --> I["定: 拆解计划"];
        G --> J["动: 快速执行"];
        H --> E;
        I --> E;
        J --> E;
        K["提示词技巧"] --> E;
    end

    subgraph "AI 编程核心框架"
        L["大模型"] --> F;
        M["工程工具"] --> F;
        N["人 (工程师)"] --> F;
        M --> C;
        N --> E;
        N --> O["时代转变 (数码化)"];
    end

    D --> M;
    N --> G;
    N --> K;
    F --> P["理解局限，更好使用"];
    B --> O;
    O --> N;

    style C fill:#ADD8E6,stroke:#333,stroke-width:2px,color:#333;
    style D fill:#FFFFCC,stroke:#333,stroke-width:1px,color:#333;
    style E fill:#90EE90,stroke:#333,stroke-width:2px,color:#333;
    style F fill:#FFB6C1,stroke:#333,stroke-width:2px,color:#333;
    style G fill:#D3D3D3,stroke:#333,stroke-width:1px,color:#333;
    style K fill:#D3D3D3,stroke:#333,stroke-width:1px,color:#333;
    style L fill:#F9F7D8,stroke:#333,stroke-width:2px,color:#333;
    style M fill:#F9F7D8,stroke:#333,stroke-width:1px,color:#333;
    style N fill:#F9F7D8,stroke:#333,stroke-width:2px,color:#333;
    style O fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style P fill:#FFFFCC,stroke:#333,stroke-width:1px,color:#333;

    linkStyle 0 stroke:#333,stroke-width:1px;
    linkStyle 1 stroke:#333,stroke-width:1px;
    linkStyle 2 stroke:#333,stroke-width:1px;
    linkStyle 3 stroke:#008000,stroke-width:2px;
    linkStyle 4 stroke:#333,stroke-width:1px;

</Mermaid_Diagram>

Content:
Klow的扣的火了但是大部分人对他的品价却两级分化2015年了最强的AI变成工具居然是个黑框这也太原始了吧我还是用Klow的至少有一个正常的介面别人家都是套壳他连壳都不想套我承认第一次看到Klow的扣的我也是个反应这黑互互的介面怎么看都不像2015年的产品直到我用他完成了三个项目重够了一个智能硬件服务端搭建了一个方便我写作的软件还有你们现在看到的这个视频这个视频里面的所有动画效果都是我和Klow的扣的一起写的代码仓库总计7万行大家好我是海老的编程客用Klow的一个月了我想把我的一些经验和体验分享给大家如果你也想知道为什么最强的AI变成工具偏偏选了一个土地掉渣的中端怎么样让AI变成效率翻倍AI变成了天花板到底在哪那这个视频一定要看完本期视频封A5部分第一部分刘耀编细的进化式从手敲代码到AI帮你写最后揭秘为什么Klow的偏偏选择了一个中端第二部分是Klow扣的一些使用技巧不会分享最有效的实战技巧包括我的某定动三字绝让AI变成效率翻倍这技巧不仅是用于Klow的扣的其他的AI变成工具同样有效第三部分会交给你几个提示词技巧让你的AI瞬间开吓效率起飞第四部分我们聊一聊AI的编辑和限制聊一聊AI变成到底能干什么不能干什么我总结了一套人工程大模型的分析框架帮你来看清楚AI变成的编辑和上线第五部分是我自己的总结和感悟从程序人的交据时代到数码时代聊一聊我真实的感受另外本视频可以搭配我之前的视频帮你更好的理解Klow的扣的好那我们现在开始在讲Klow的扣的技巧之前我们先聊一聊编辑系是怎么进化的我们把时间退回到2000年我大概是从2015年开始编程的在那个时候我写代码主要靠手打我会用代码片段捕权那个时候的捕权很简单写一个优责对象他有内幕和AJ属性当你敲优责点的时候冰气会自动谈出内幕AJ让你选这是最早的代码捕权手敲代码捕权代码副指摄杰贴是常态2018年TapNight诞生了他能捕权整航代码还能理解你想写什么韩述在当时可算一个大的突破而TapNight背后的模型是GPT2做GPT2的OpenAI四年后将会彻底地改变这个世界20年变革开始加速到了年底恰的GPT更是引爆了整个科技圈2030初GPT4发布那就要一个震撼我记得当时的感觉是不少场景下这玩意写的代码比我6多了那段时间我天天干什么呢副指摄杰账沾贴到恰的GPT中让他优化在沾贴回来来回倒痛人程代码倒业我们不生产代码我们只是代码的班运工2024年AI住进了边气里想了就了再也不用副指摄杰贴了而到了2025年AI编程工具简直是神仙打架他们不光会帮你捕权代码还能看懂整个项目知道你想干什么帮你拆解复杂的任务我做了一个简单的颗色演示比如说我想要一个落地液他立马就懂了不光理解我的需求他还能是被我的代码风格文件盖件的件代码盖鞋的鞋一气合成而这个时候AI不再是个工具而是一个真正的编程伙伴不管是Klaude codeCrosser还是Archiemon code他们都在重新定义我们写代码的方式智能体编程听起来很酷但是其实四个字你就能理解编程伙伴你的AI编程伙伴像个人一样他能感知代码酷理解你的需求制定计划自主编码但问题来了Klaude code这么强为什么偏偏就选用了一个黑框我查评了一些资料看了一些访台终于找到了答案主要原因有两个低编辑器的碎片化问题Aceropic内部什么编辑都有人用BS codeWaymaxintire件颗色如果只支持某个编辑其他人就被排除在外了第二Ui反而成为了AI最大的加速大家都在拼命地做漂亮的界面各种差践独立的应用层出不侨但慢慢大家都会发现一个致命的问题Ui限制了AI的能力为了看一看JenticCoding的核心寻传他有感知他有规划他有行动但是你发现了没有他跟界面票漂亮没关系华历的界面复杂的交互反而是负担而处到极致的中端确实反普规征中端有三大又是第一自由度最大AI可以调用一些系统能力不受Ui框架的限制第二对用户来说认知负担最小你只需要说我想要什么不认学习复杂的界面操作第三不许令天然如何地产偏刀可所有的开发工具本来就是命令行的别觉得这是倒退恰恰想法这是反普规征当然很多人吐槽CodeCode太简陋了界面没有我承认漂亮的界面确实能够让人心情愚恋我个人体验下来CodeCode在理解代码能力上要超过其他同类工具很多很多人觉得中端难用是因为没有长到效率的甜头一旦长到效率的甜头你就会觉得什么UI不重要除此之外CodeCode还有一个最大的杀气是偷恨额度简直是不要钱一样的给它在我一天要烧掉多少如果折算成API的话我一天的烧掉价值200美元的偷恨它给的实在是太多了接下来我们讲一讲CodeCode使用技巧技巧有很多但是我会把我觉得最有用的交给你这些技巧按照我的三字绝可以分为谋 定 动 谋 定 而后动用自动价史来类比你就懂了谋就是把需求了头就像开车前你得确定的目的地是从河南欣赏到山东德州而不是从纽约到德州定是规划倾讯路线像导航一样把每个关键路线和节点都标记好动就是要快速执行路线清晰游门踩到底当然不要超速看路部队要打方向盘不要跑偏了那我们展开一下谋就是把需求了头把需求稳当的话为什么要这样做因为首先你要不停的和AI聊确保自己的思路是清晰的然后让AI完全理解你的意图仅接着让AI复数一遍你的需求为什么要复数因为确保咱们的理解和AI的理解是对其的如果后面执行错了您的快速定位是理解上的问题还是执行上的问题这里有一些小机械我可以分享给大家第一首先要切到opus模型因为opus处理复杂需求会更靠谱一些仅接着我会用手机在背望路中输入我的需求不需要实现支付功能请你帮我完成定按支付通知的会购买我需要支持这会为新支付通知核心本来你要实现一个支付通知然后要处理一些支付通知会较处理支付的通知比如说全合会支付通知还可以当的为什么这个阶段这么重要因为首先咱们要确保自己的脑子是清楚的然后和AI不停的聊它会发现你的一些逻辑上的漏洞接着把需求系统画之后后期出问题能够快速回数需求了头了反攻率会降低80%接着我们到了第二阶段定定这个阶段接下来需求了头了就需要把任务拆分一下这一步很关键让Kalala code把步骤列出来我通常会这么说即使需求稳当请你帮我执行一个计划标明哪些任务是可以做的哪些任务是可以并行的形成一个渐进的组织立好这个计划之后就可以进入动这一个环节了因为前面我们已经聊得很透了那么到第三步我就可以让Kalala code开启狂标模式这个时候别犹豫速度拉满因为有Geart帮你都抵出了问题可以回滚到code有的时候在缺速形式的过程中会执行错误那么如何解决呢一种方法是直接踩杀车按ESA中段任务然后重新输入你的需求第二种没有跑得很偏那这个时候你只需要继续输入一些微小的补充就可以让Kalala code的识别出在下一个调整中方理调整另外Kalala code的执行任务多了有的时候会显得不太聪明这个时候可以输入可利用命令把记忆清楚调还记得我们之前做的土度吗我们把这个土度引用一下然后输入继续执行回车那么它就会先读取这个土度文档继续执行单字性法讲完了我们再补充一些小技巧Init可以快速扫掉项目形成一个Cloud MD技稳档每次操作的时候它Cloud都会把这个记忆记在心里场应了一些命令怎么起动前端怎么编一后端如何查看错日制所以要让它善用注视因为注视是给Cloud的code读的并不是给人读的有的人会怀念Case of the Applied Rejection方案你可以在对应ID或者BG系安装对应的插件卷重蛋码片段进行挑战当然其实就我个人而言我大部分情况下我也不需要选重我直接嘴炮描述就好了Cloud还有一些快捷操作比如说你可以在输入框中输入你帮我提交蛋码生成规范的考虑没关系你也可以直接敲考虑有的人不希望Cloud在蛋码里面输名这个时候你可以在Satins里面设置这一个参数这样蛋码就都是你的了在我写我的动画效果的时候我沉淀了一些修复布局做动画然后打标签的命令这些命令的话比较长但是每次输入的话确实比较占用时间这个时候我建议创建自己的命令如果有些体式词我已经用了三四次而且每次都需要输入比较长的文本那么我就会创建一个自订命令另外如果你是一个新手想写项目的话我建议使用一些线程的脚手架这样可以帮你审去大量的时间聊完了Cloud Code的一些技巧我们来聊一聊提示词技巧先说清楚我讲的是提示词技巧不是提示词工程技巧一些复杂的提示词工程技巧那得让工程师们去研究咱们只要记住一点把话说清楚别让有人问我你需要套用什么提示词框架吗答案是完全不需要你只需要专注把你的任务说清楚简单反而更好因为Cloud Code已经足够聪明了一些辅罗的框架反而会让它产生一定的露导这里要讲一个有意思的点我不知道你们有没有对AI发过比如说急了又回去你给我好好想想结果AI它就突然变得聪明了这个不是选学在Cloud里但是实大时的技术Excended Syncing功能让AI进入深度思考模式更觉得是Cloud Code里面藏着几个魔法咒语Bounce on ThinkThink HardThink HardOltron Sync为什么当你说你给我好好想想它就突然有用因为它调用了Think Hard的这个咒语AI想得越久答案越准确就像人一样深思属绿它总比Torco还出靠深度思考对一些辅罚的任务非常有必要行李分析这个支付模块的评计并且给出宠购方案你选Oltron Sync的时候你会发现服务器不停的超时这个时候你需要搭配接下来的技巧使用并是思考把辅罚的问题让它自己思考尝试拆解一下比如说支付功能它可能会拆解理解业务系统对接支付渠道设计订单状态机进件事思考之后你的Oltron Sync很少会超时接下来的技巧是当你写提示词的时候尽量使用正面的表达说用AI做什么而不是说AI别做什么之前教小孩子一样太多这也不能做那也不能做反而会把小孩子限制住他不知道自己该怎么做反面的案例是不要使用案例类型不要写重复代不要忘记粗粗理正面的类型是使用明确的TypeScript类型提取公共逻辑为寒树增加TryCatch粗粗理看到区别没有正面的表达让AI知道该往哪里走还不是处处设防当你需要深战节的代码的时候请提前说清楚你的标准比如说你要实现一个通用的缓成系统要求是适用于所有合法的输入不只是测试用力不要硬编码要实现真正的逻达器代码要建装可围护可扩展如果需求不合理请直接告诉这样能够一定程度上降低AI投机取巧只写出应付测试的代码还有一个小机巧是常闻美优化内容在前指令在后问你要粘贴很长的错日制或者是稳当记住这个法则先把错日制贴上去然后输入指令继续上面的错日制帮我分析崩溃的原因并提供修复方案把大论的文本放在前把指令放在后面AI的理解效果会好很多这是模型价格决定的不是选须我们来聊一聊AI编程的编辨在哪我把它总结为三个核心要素大模型工程人首先是大模型大模型决定了AI编程的这个天花板简单来说如果按Cloud Code机密来2.5 Pro这些顶级的模型都写不出的代码那么当前的AI编程就是写不出那些代码就像在好的赛车手它也不可能让普通叫车跑出F1的速度模型能力就是那位进行的限制工程是让能力落地的壳Cloud CodeCursorCopali的这些工具本质上都是大模型的一个套壳它的作用是优化交互体验管理上下文集成到你的开发流程但是工具再好它也突破不了底层模型的限制Cloud Code作为这个套壳这一层它做的比较好的事它缩短了人与大模型中间的距离也就是说你下发指令它尽量地帮你把一切做好这一点是它做的比较好的当然像Argument Code做的也不错第三是人也就是工程师工程师在AI编程中半眼三个关键的角色第一是定义者能清晰描述需求AI才能准确输出第二是把关者审核代码质量业务逻辑性能表现三是创新者并不是所有的代码所有的需求都被AI充分讯业那么有一些关键的价格设计算马上的创新还需要人类的创造力AI编程现在能做好的是一些常规功能的实现代码的重够测试编写文道深层理解是三样素就能跟理性的看待AI编程模型有多强能力就有多强工具有多好体验就有多好人有多专业结果就有多专业AI编程它不是替代程序它成为了程序人的超级助手任亲AI的编辑才能更好的使用它几天前Cloud Code突然当机了那个下午不被迫手搓袋吗没有AI的辅助纯手敲手指在键板上由于不绝大闹疯狂的运感却总觉得少了练什么一个简单的功能以前用Cloud Code可能十分钟就搞定现在刻刻办办写了20多分钟不是说语法欺负清楚而是整个习惯变了我已经习惯了描述需求而不是从零开始实现细节更让我震惊的是当我写完蛋码的时候我的第一反应居然是想让Cloud Code的帮我检查一下这一刻我就突然明白了可能我们正在经历编程界的交据到数码的革命还记得交据时代吗摄影师爱一次快门都要深思熟绪36张底片张张都正位而构图光圈快门全在脑中床充洗一步错步步错没有山厨重拍只有一次机会而数码时代摄影又变了中处卡管构随意创作细拍极看不停的蝶带核心技能变成了你的神美和眼光后期处理成为了必修课变成的变革好像也是这样传统陈续员向交据摄影师一样美行代码都要深思熟绿办靠经验和直觉定位底层的原理必须烂熟于心AI时代的陈续员更像是数码摄影师AI可以快速生成多个版本则其善者还从之其不善者还改直直是验证快速迭代核心的能力变成了十别好代提示词成为了基本功也误会我不是说基础不重要的就像摄影师依然需要懂光影懂构图陈续员依然需要理解核心原理是我们创作的方式思考的路径解决问题的手段都已经彻底改变了那一个下午有点失落也有点激动失落的是时代变了我们回不去了激动的是有这么一个时代你们不必回去好今天的节目到此为止我是海岛楼边陈克AI永不明我会下期节目再见拜拜
