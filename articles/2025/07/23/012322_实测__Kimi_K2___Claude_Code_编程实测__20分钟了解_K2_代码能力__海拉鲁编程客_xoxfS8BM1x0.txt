Timestamp: 2025-07-23T01:23:22.243630
Title: 实测! Kimi K2 + Claude Code 编程实测! 20分钟了解 K2 代码能力  海拉鲁编程客 xoxfS8BM1x0
URL: https://youtube.com/watch?v=xoxfS8BM1x0&si=v8Mmyj2WL1cBq7_v
Status: success
Duration: 19:03

Description:
以下是对文本内容的总结：

**核心观点：**
KIMI模型作为继DipSync V3之后最令人惊喜的开源模型，展现出超越预期的任务执行和编码能力，使其成为高性价比的Sony模型替代选择，尽管当前版本在速度和复杂推理方面仍有提升空间。

**整体框架：AI编程助手评测框架**
本内容围绕一个全面的AI编程助手评测框架展开，涵盖以下几个关键维度：
*   **环境搭建与集成（Setup & Integration）**：探讨模型如何轻松地在开发环境中安装、配置与使用。
*   **任务执行能力（Task Execution Capability）**：通过多领域案例（前端、后端、图形、语言转换）测试AI完成实际编程任务的广度和深度。
*   **代码理解与推理（Code Comprehension & Reasoning）**：评估AI对现有代码库的理解、架构分析及复杂逻辑推理能力。
*   **迭代与调试协作（Iteration & Debugging Collaboration）**：考察AI在遇到问题时，与用户协作进行错误诊断和修复的效率。
*   **模型对比分析（Comparative Analysis）**：将KIMI与其他领先模型（如Opus、Signate）进行横向比较，定位其市场竞争力。
*   **实用性与价值评估（Practicality & Value）**：总结KIMI的优缺点、性价比，并对其未来发展进行展望。

---

**一、引言**
    A. KIMI模型发布背景与评价争议
        1. 模型发布后市场评价两极分化。
        2. 评测者“海南的编程客”通过五个案例进行深度测试。
    B. 评测目的与结论概览
        1. 目的：分享实际测试结果，提供真实价值。
        2. 结论：KIMI距闭源模型仍有距离，但已是DipSync V3后最惊喜的开源模型。

**二、环境配置与使用**
    A. 安装与配置KIMI模型
        1. 前置条件：安装Node.js。
        2. 核心步骤：安装KR Code，运行Claw的Migrating Stoller安装Claw命令。
        3. API接入：申请KR API key并在Claw Code中配置接入。
    B. KIMI与Claw模型使用体验对比
        1. 命令别名：配置Kimi和Claw命令别名，方便切换。
        2. 使用反馈：Kimi显示Token使用量，Claw不显示；Kimi速度偏慢，可配置声音提醒。

**三、案例评测**
    A. 案例一：3D建筑爆破拆除模拟器 (前端/图形)
        1. 场景与技术栈：模拟3D建筑爆破，使用Three.js和Kino.js。
        2. 初始表现与问题：Kimi生成代码步骤与Claw类似，但Kimi更倾向于一次性完成所有待办事项。重置功能出现Bug。
        3. 修复过程与结果：经过数次对话，Kimi修复了重置Bug，但又引入新问题。最终用户识别出“清理屏幕”逻辑问题并引导Kimi解决。
        4. 结论：Kimi生成代码相对准确，物理效果合理，小Bug可快速解决。

    B. 案例二：黑客帝国数字雨动画 (后端/语言转换)
        1. Python开发能力测试：Kimi生成Python数字雨动画代码，并运行测试、捕获输出（表现良好）。
        2. Golang语言转换能力测试：将Python程序转换为Golang，Kimi提供了专业的技术实现对比，转换速度快，准确率高。
        3. 修复过程与结果：Python动画播放问题经多次对话解决（需用户识别“清理屏幕”问题）；Golang转换后有小错误（未定义变量、未使用的导入），但通过粘贴错误信息可快速修复。
        4. 结论：Kimi在Python调试与Golang转换方面表现出色，解决问题虽有曲折但最终高效。

    C. 案例三：React管理后台前端能力 (前端/框架)
        1. 场景与技术栈：基于Ant Design Pro，React，TypeScript的后台管理系统。
        2. 修改用户信息与水印：将“Siritma”替换为“海浪编程客”。
        3. 新增订单列表页面：生成带Mock数据的订单列表页，并提示未完成功能。
        4. 环境问题与AI表现：初期因环境配置（本地/远程Mock数据源混淆，API地址硬编码）导致修改未生效，经用户排查并引导Kimi处理后解决。
        5. 结论：前端能力表现不错，AI操作精准，虽有环境折腾，但感觉已接近Sony 3.5。

    D. 案例四：代码仓库理解 (理解力对比)
        1. 评测标准：架构理解、数据流分析、接口与字段识别。
        2. 各模型表现对比：
            *   Opus (1100)：表现卓越，得分最高（接近25分以上），系统架构图、接口设计、流程细节均准确。
            *   Signate：表现逊色，缺少宏观系统设计，接口错误多。
            *   K2/KIMI：与Signate接近，焦点列出，接口字段接近但不完全正确，部分技术选型与实际不符但提供官方替代方案。
        3. 结论与KIMI 2.5 Pro的启示：Opus遥遥领先KIMI和Signate。KIMI 2.5 Pro在“优务模式”下性能接近Opus，但在非优务模式下垫底，暗示KIMI CLI可能存在工程问题。

    E. 案例五：核心魔方解析 (失败案例分析)
        1. 任务目标：Coding一个魔方解析器，包括网页设计、数据结构、SVG映射和旋转动画。
        2. 失败原因分析：核心数据结构与SVG映射动画部分失败。评测者本人缺乏魔方解析经验，无法有效指导AI深入解决问题。
        3. 启示：凸显AI编程的局限性，在用户缺乏领域知识时，AI难以独立完成复杂任务。

**四、整体评价**
    A. 优点
        1. 任务执行能力：KIMI能真正执行任务而非仅回答问题。
        2. 编码能力与驱动力：在编码方面表现良好，能驱动Code LLM。
        3. 接近一线闭源模型：超出预期，感觉接近Sony 3.5，是DipSync V3后最令人兴奋的开源模型。
        4. 高性价比：API成本低，若Sony能解决开发任务，KIMI是极具性价比的选择。
    B. 缺点
        1. 速度慢：比官方模型慢约一倍（KIMI 10分钟 vs 官方 5分钟），体验急躁。
        2. 复杂推理能力局限：在处理核心数据结构和算法等复杂推理时，不如Opus和KIMI 2.5 Pro。
        3. 多步骤协调待提升：在多步骤任务中，有时会中途停止且无报错。
    C. 价格优势与未来展望
        1. 价格良心：API成本约为KIMI的十分之一，具备高性价比。
        2. 未来展望：对即将到来的KIMI推力版充满期待，有望带来更多惊喜。

**五、结论**
KIMI模型作为继DipSync V3之后最令人惊喜的开源模型，展现出超越预期的任务执行和编码能力，使其成为高性价比的Sony模型替代选择，尽管当前版本在速度和复杂推理方面仍有提升空间。

<Mermaid_Diagram>
graph TD
    A["KIMI模型评测"] --> B["评测目标与核心结论"];

    subgraph "I. 评测框架与准备"
        B --> C["环境配置与模型接入"];
        C --> C1("Node.js, KR Code安装");
        C --> C2("Claw命令与API Key");
        C --> C3("KIMI/Claw别名配置");
        C --> C4("KIMI体验特点 (Token, 速度, 声音提示)");
    end

    subgraph "II. 案例分析"
        C --> D["案例1: 3D建筑爆破模拟器"];
        D --> D1("前端/Three.js, Kino.js");
        D --> D2("表现: 代码相对准确, 物理效果合理");
        D --> D3("挑战: Bug修复与用户引导");

        C --> E["案例2: 黑客帝国数字雨动画"];
        E --> E1("后端/Python与Golang转换");
        E --> E2("表现: Python调试能力, Golang高效转换");
        E --> E3("挑战: 初始播放问题, 清理屏幕逻辑");

        C --> F["案例3: React管理后台"];
        F --> F1("前端/Ant Design Pro, TypeScript");
        F --> F2("表现: 修改UI, 新增页面, 搜索功能");
        F --> F3("挑战: 本地/远程数据源混淆, 环境配置");

        C --> G["案例4: 代码仓库理解"];
        G --> G1("复杂代码库分析能力");
        G --> G2("对比: Opus >> KIMI ≈ Signate");
        G --> G3("发现: KIMI 2.5 Pro在优务模式下表现优异");

        C --> H["案例5: 核心魔方解析 (失败案例)"];
        H --> H1("目标: 复杂图形动画编程");
        H --> H2("原因: 用户经验不足导致AI无法深入");
        H --> H3("启示: AI编程局限性");
    end

    subgraph "III. 综合评价"
        D3 & E3 & F3 & G3 & H3 --> I["KIMI模型优缺点"];
        I --> J("优点: 执行力强, 编码能力佳, 接近Sony 3.5, 性价比高");
        I --> K("缺点: 速度偏慢, 复杂推理仍有局限, 多步骤协调待提升");
    end

    J & K --> L["结论与展望"];
    L --> L1("核心结论: KIMI是极具潜力的开源模型");
    L --> L2("未来展望: 期待KIMI推力版");

    style A fill:#FFDDC1,stroke:#333,stroke-width:2px,color:#333;
    style B fill:#C1FFDD,stroke:#333,stroke-width:2px,color:#333;
    style L fill:#FFDDC1,stroke:#333,stroke-width:2px,color:#333;
    style L1 fill:#C1FFDD,stroke:#333,stroke-width:1px,color:#333;
    style L2 fill:#C1FFDD,stroke:#333,stroke-width:1px,color:#333;

    style C fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style C1 fill:#E0FFFF,stroke:#333,stroke-width:1px,color:#333;
    style C2 fill:#E0FFFF,stroke:#333,stroke-width:1px,color:#333;
    style C3 fill:#E0FFFF,stroke:#333,stroke-width:1px,color:#333;
    style C4 fill:#E0FFFF,stroke:#333,stroke-width:1px,color:#333;

    style D fill:#D8BFD8,stroke:#333,stroke-width:1px,color:#333;
    style D1 fill:#E6E6FA,stroke:#333,stroke-width:1px,color:#333;
    style D2 fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style D3 fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;

    style E fill:#D8BFD8,stroke:#333,stroke-width:1px,color:#333;
    style E1 fill:#E6E6FA,stroke:#333,stroke-width:1px,color:#333;
    style E2 fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style E3 fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;

    style F fill:#D8BFD8,stroke:#333,stroke-width:1px,color:#333;
    style F1 fill:#E6E6FA,stroke:#333,stroke-width:1px,color:#333;
    style F2 fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style F3 fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;

    style G fill:#D8BFD8,stroke:#333,stroke-width:1px,color:#333;
    style G1 fill:#E6E6FA,stroke:#333,stroke-width:1px,color:#333;
    style G2 fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;
    style G3 fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;

    style H fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;
    style H1 fill:#E6E6FA,stroke:#333,stroke-width:1px,color:#333;
    style H2 fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;
    style H3 fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;

    style I fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style J fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style K fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;
</Mermaid_Diagram>

Content:
KIMI发布了新模型KR在家包饼不一有人把它吹到天上有人把它踩到地里那么实际情况究竟如何呢我竟选了五个案例策略一下我想把这个结果分享给你哈喽大家好我是海南的编程客前几天我在KR的code中测试了KR模型写了五个案例结果出货的意料先说结论距离闭缘模型还有一段距离但KR是dipc一个v3之后最让我惊喜的一个开源模型本期视频分为四五份匹粉是安装和使用在KR的code中使用KR模型电视部分是精选五个案例有三地建筑爆炸可识图有黑客地国中端特效由React管理后台有复杂代码仓库的理解当然也会分享一个我做失败的案例第三份是整体的品价第四份结果评测很难做的全面但希望我的评测能给你带来更真实的价值首先我们要确保安装Note接着我们输入这行命令来安装KR的code安装完KR的code之后我建议运行Claw的Megraating Stoller将Claw的命令安装在本地就要申请KR的API key然后在Claw code配置接入我建议你使用这三行配置一下这里你可以看到我做了两个命令一个是Kimi命令一个是Claw的命令如果我敲的命令是Kimi那么就默认使用Kimi的模型如果我敲的命令是Claw的那么就使用Claw的模型这两个别名方便我在不同的模型之间切换当你从Kimi进入的时候你会发现有一个月制安面的练结退出的时候会有一个偷肯使用量当你使用Claw的时候并不会有证明的东西当前版本的Kimi速度还是偏慢一些的我这里加了一个配置Kimi在后台帮你干完火的时候给你一个声音喂我已经先往台骂了你怎样所有的代码和体试词都会放到给它们练结上而且我真去不熟写代码只通过体试词来修改代码低干力是3D建筑爆破拆除模拟器这个例子来自推有牙衣3D建筑爆破拆除的模拟重置引爆切换视角这些案例使用了随Ds和KinoDs来模拟最后以一个文件输出我们现在把它复制一下打开Kimi独占贴回车而这个时候我在加速它会形成一系列的屠度这个和我们使用官方的Claw的像Sony的OPUS模型式一样的因为官方目前的速度是偏慢的大家如果在使用Claw的Claw的时候需要多一点耐心好 它现在已经把天白文件伸成了我们可以看到在Claw的官方的模型中它的屠度似乎是一行一行一行完成的而在Kimi的模型中它似乎是先完成了第一个修的一下把所有的屠度都完成了这是一个比较914的点好 接下来我们打开这一个网页我们点击重视引爆当我们点击引爆的时候我们可以看到下面开始有一个简单的爆炸效果一点点不明显现在我们点击重置我们可以看到点击重置之后它就出现Bug了因为我们最开始是一个建筑物而现在不是我们现在测试一下视角切换视角一切都正常包括我们在积动的时候也是既然是重置出现了问题我们就来修复一下重置我们打字重置没有真正的重置请你检查一下你修复好 它加了一些代码我们来看一下有没有效果点击重置好了 现在出现新的Bug点了以后没有任何反应它包了一个错把错沾贴进去我们点击引爆点击完引爆之后我们立马点重置看起来是可以的Keya深层的代码相对准确一些物理效果也比较合理一些小Bug但是几次对话后就解决了第二个案例是模拟黑客地国数字语的动画就可以骗证Keya在命令上的开发能力这里我会用两门语一门是Person一门是勾浪来一做演示这边提示会有一些核心的视觉效果有一些动画行为我们把它复制然后我们使用Keyme 沾贴回车大概三万万左右它就已经深层了这里面还有点做得不错的是它居然跑了一个测试把这个测试的输出内容给它捕货也出来呈现给我们看我觉得它这个做得挺好但是它好像并没有停止这个时候我们需要用ESC中段接着我们执行命令来看看一下对中效果怎么样我打错了看一下Match Extreme我们看好像什么都没有我们可以看到中端上都是空白的不对 空黑的什么都没有那这应该是哪里出了问题我们问一下哎它怎么没有自动播放我在退出的时候好像就发现了些自负但是不管怎么样我们先问一下哎他们为什么没有自动播放我们看一下但是它好像并没有解决问题我们先耐心等待一下还是没有看到自负还有点奇怪它改了一些东西但是苹果的直觉上来说我觉得它改动的这些应该没有往正确的方向上改我们可以看到它改的很用心哎它真的很努力你知道它有多努力吗个人感觉它可能还是改错了因为不太像但是再试一下再给它一次机会还是没有好像确实有一些自负再试一下你们发现没有到网上滑动的时候它这里就出现自负了所以说我觉得它可能是在清理屏幕这边出现了问题当你觉得清理屏幕的逻辑问题的时候你只给它它立马就清楚了所以说有的时候对一些常规的基础操作如果AI犯错了你能大致清楚是哪里出现了问题给它点一下那它基本上就应该能解决了应该能解决它说清理屏幕确实有问题那我们再给它一次机会看一看我觉得这次它大概率应该能解决这里我发现了一个问题是动画没有自动播放但是当我敲回车件的时候它就自动播放了那我继续追问一下上次给它一次机会还是没有还是差一点意思当然其实最好的情况还是你懂这些代码因为你如果懂这些代码的话你大致看眼睛就知道问题在哪但是说如果你对所有的可能性都不了解你写出来的逻辑很可能是很难以定位的就是不知其所以然一往来情深再说再来解好这次应该比较接近正确的案子这次做的相当不错我觉得可以点个赞那接下来我们要做的事情是前面我们测试了这个PASSIN这个能力接着我们想测一下K2模型对GOLAM的这个了解程度我们让它把PASSIN的程序给它转成GOLAM的程序而给我们来看一下效果怎么样当然这里面在往程度偏短一些如果代往程度比较大的话你肯定做不到整个仓库的翻译但是一段一段的翻译应该是可以做到的单纯从任务的插分上面我们可以看出来还挺专业的它给了一个技术实现的对比还蛮贴心的好那我们执行一下说meacing那我们执行一下高默的tidy把对应的依赖包给下的下来我们再运行一下看这里有几个小错有的是没有定义有的是倒入了但是没有使用另外我想说的是GOLAM其实买适合大远模型的因为它相对来说比较螺索没有太多的花铃巩烧的这种斜仿而且编一速度奇快无比我们把错复制沾贴到和烧客户的中看一下效果好 处理完了我们来看一下回车那么第二个案子我们就测过了其实相对来说前面走了一些弯路但是我们用Pyson把它转一程GOLAM的时候你发现速度特别快一会儿就搞定了这个命令如果认真真写的话应该是还有不少可以扩展的地方的本期视频就不做过多的扩展虽然有一些小问题但是如果你反亏的比较精确基本上都可以快速的解决Pyson转一程GOLAM的时候发现很快并且比较准确第三个项目我们来测一下它的前端能力我们会先用DiPro来做演示做两个修改第一个是修改用户信息和水应这我们测一下它只拿拿的本事接下来我们新增一个页面并且填充一下数据这里面我们会进到React TypeScript我们会使用安DiPro所有的数据都在前端冒凯如果看过我的视频的话我是非常不见你从零开始写一个项目所以我一般会建议你使用一个脚手下那现在我们使用安DiPro我们装一下安DiPro的命令行接着我们创建一个应用我们接下来的命使用Synchle我们不要权量的接着我们进入Ether命开启Q命令行在这里我并不像前面的按理一样切一个很长的提示词在这里我建议大家先使用Emet命令要用KR模型深层Cloud M.D这样Cloud Code会更懂这个项目一些我们大致看一下Emet命令的效果怎么样有一个大致的描述有一些关键的命令有一个项目结构真起来说还是很清晰的接下来我们直接要用NPM Star起动的前段图案这里大家需要注意一下NPM Star会默认使用本地的默克数据我们打开流暖器看一下这一个线程的页面接下来我们要做一件事情前面的页面里面有一个LITMA我们把它换成海浪流编程客我们可以看到它这里发现了3号里面有SIRITMA把它替换成海浪流编程客它说已经完成了我们看一下效果怎么样还是SIRITMA那我觉得这里面可能拿到还结出现的问题刷新一下看看没有变化我们看一下这个数据的来源是什么我猜测它是不是访问了其他的接口我们看一下果然它这里面使用的是一个叫ROABI这里我们可以看到它其实并没有请求本地的这个数据所以我改了本地的文件并不会反亏在界面上那我们让它检查一下这一个预名它建议我们把地址改一下使用MP&RONG STALE DEV那看一下感觉不太对还是访问这里那这时候我可能需要查看一下带码那边是怎么写的思维一下我们可以看到在APP.TSX4中它把BSU.L给印边码了这一点不是很好它印边码之后那所有的请求都会访问哪一个接口这里有点尴尬其实我只需要把这一行给它智空就行了但是因为我不能直接写代码所以我得回到TL的扣子中告诉它让它自己来处理那我们直接把这一个东西给它沾过来让它自己改我们的看一下它感效果怎么样需要登物那我们输入一下admin.design404因为我们之前切换了一个命令找这默格环境失效了你先看一下404看一下当我使用MP&R的时候我可以看到有很多这个默克的窝栏它好像并没有启用这些服货这里需要使用MP&R on Start还不是MP&R on Start DevMP&R on Start会默认的访问默克的数据不是真实的数据你看到我们使用MP&R on Start的时候就可以看到这里面有一些默克的数据它告诉你API500 is duplicative像这些东西是我们需要的那我们的看一下anvidan等我还挺Nice的可以看到在水印上和这个右上方都已经出现海浪的编程客了还不是之前缓问外固环境的sirotima我们前面折腾了这么多走的一些弯路但其实更多的是花在折腾环境上但是我们之前的改动我们做了一个sirotima改向海浪浪编程客这一个AI的操作是非常的准确的这点是让我有些意外的那我们接下来我们再做一个操作我们让它把我们新增一些订单列表然后呢点冲一些mok信息方便我们展示这里面还有一个点是当我们新增这个列表业面的时候如果有一些功能是没有做的那当我点击那个按钮的时候它需要提示我这个功能没有完成接下来我们可以看到它列了一个取就开始执行我们加速一下完成了它还会说如果你点击新建地宝查战相请答应定单退款捣出批量删除的时候都会谈出消息就共带正在开发中我看看它做的好不好需要重新登录一下订单管理看起来有那么一点事订单后客户名称客户电话商品名称数量金额状态创建时间操作好看起来都还不错那么点击下新建点击下倒数我们顺便再测一下这个搜索吧001长选尽管是mok数据它顺便帮你把搜索给做了还是挺 nice的前面走的一些关路但基本上都是在环境配置上而前端能力的表现还是不错的感觉上比较接近sony 3.5四个项目我们简单测试一下小智ESP的带码仓库这里稍微演示一下你好小智傻子辣子是小子吗老娘是骁辣椒你厉害静猛不是弄的老口猴头切了高庭处啊猫还丑了对比不同模型的理解能力不设定了打分标准第一架构上的理解领导十分数据流的分析领导十分还有接口以及接口里面自断的识别如果它识别出来了那我们就给更高的分数也是领导十分首先毫无疑问的是opus 1100先我们可以看一下不管是系统架构图还是接口设计准确度已经比较高了当然也不是百分百准确顿应的设备认证流程语音交互流程做的都比较小细还有一个设备控制流程写的也比较好以及OTAPS不管是在架构设计上还是在接口自断的理解上已经每个模块的流程都做得相当的出色这个时候我们切到signate来看一下signate相对来说就表现得有点迅色我们可以看出来它缺少也非常红关的一系统设计然后接口呢错了在认证流程这一块是对的音交互持续这一块也是对的控制流程这一边大体是对的给了一个网络一场恢复我觉得这个没有必要因为我并没有在体试词里面可以强调这个东西接下来我们看一下K2模型的表现K2模型前边和signate还是有点像一些焦点都列出来了接口的自断比较接近但是并不正确设备了启动流程这一块它用的是mqTT但是其实我要求的是websok看起来也还ok因为小智官方确实提供了mqTT的方案云时边的流程基本上是对的IT的控制流程也是对的在后面看都是一些细致墨减的东西那么我们可以看出来OPWS如果打分的话它应该是能拿到接近25分以上而signatekey-me基本上也能够拿个数分左右但没有刻意优化体试词的情况下OPWS4也要领先signate和K2模型基本上持平当然也有朋友让我测试了一下机密来2.5 Pro在开启优务模式下使用机密来2.5 Pro它的表现能力和opwas4基本持平如果没有使用优务模式的话那么它的表现能力却垫底这个我感觉更多是因为机密来命令航它本身可能存在一些工程上的问题我觉得2.5 Pro的能力是接近OPWS4的不应该相差这么大第五个是核心的模仿球解析这是一个失败的案例为什么要给大家分享失败的案例我也想借这个机会和大家聊一聊AI编程的限制原本是想coding一个模仿球解析首先是一个技术的网页的设计接着是模仿这一个数据结构然后使用swgs跟这一个核心的数据结构硬设成对应的y到我点击打乱模仿或者是面选转的时候这一个模仿能够播放一个选转的动画但这个肯定是失败了核心数据结构这一块的设计没有太大的问题在网页设计和cgs展示上也没有问题问题就在于播放动画之后模仿的数据结构和模仿随gs它的对应上面出现了一个问题因为我本人没有写过模仿球解析我并不能确定是因为KR模型无法深任这个任务还是由于我本人没有写过模仿球解析没有办法进到AI来解决这个问题我知道我关注礼物不藏龙如果你可以通过体势词来解决这个问题不管什么模型只要在cloud code里面里能把它解决欢迎联系我我会给你发一个小礼物先到先得特事的这五案例可以看出来其实效果还行我觉得算的上是比较前眼的模型看一下官方不可上前面都是一些常规的介绍价格、参数亮点就在这个地方KIMINDESNOTDESTS ANSELEATER X它的意思就是说它不仅能回答问题它能真正的执行任务这个是蛮有意思的通过前面的五案例KR在它的编码的能力上确实还不错我们知道智能体编辨的流程它需要有感知它需要有规划它需要有行动而这一切必须大模型自身为中心离开了这个巧悍的引进一切都无从难起而能够驱动CLOLE的扣夺的模型并不多KR是其中之一它也有点超错的预期跟着感觉上它接近Sony 3.5虽然Sony 3.5是24年的模型但是世界上能和Sony 3.5打得有才有回到模型很少所以我说KR是Gi-Dipsig V3之后最令我兴奋的开源模型之一配算的上是开源、Sony模型聊完了一些优点我们再聊聊缺点最大的缺点我觉得是慢在官方的模型中可能5分钟左右能完成但是KIMIK可能在10分钟左右完成尼管它的表现和Sony的比较接近但是速度真的比Sony它要慢个2分之一左右这意味着有的时候我下达了提示自命令我得出去多6月会当然这可能客观上也保护了我的眼睛希望KIMIK官方能把这个素材提起真的有些让人觉得急躁在复杂推理的时候依然会有一些举线性让我在拆解第五个案例的核心数据也够和算法上它的表现并不如OP-S和今年的2.5%好另外还有一个点是多步骤鞋条的能力还是有在提升的特别是在我鞋第五个项目的时候有的时候直行任务直行到一半突然就停住了但也没有任何报错我觉得它可能是在一些鞋条性上出现了一些小瑕疵也可能是和KIMIK的本身有些水涂服我觉得它的价格相对来说就已经比较良心了API的成本偏低很本大致为KIMIK的1分之一如果你是开发者的任务大致是Sony可以解决的那么KR会是你的一个极高性价比的选择如果前文所说这是一个让人兴奋的开源大模型KR采用了类似DipSync V3的价格设计这正是开源的Meltic Suicide技术的进步它不是零合游戏它是你追我感的镇象循环最终设计的是我每个用户对于想体验KR的code但是预算相对有限的朋友KR是一个非常具备性价比的选择不是KR的Max用不起还是KIMIK更有性价比这让我对即将到来的KR推力版出满期待推力模型通常会比非推力模型更强大一些相信你会带来更多的惊喜如果你也在使用KIMIK K2欢迎在评论区分享你的体验我是海南伙编程哥AI永不明我们下节目再见拜拜
