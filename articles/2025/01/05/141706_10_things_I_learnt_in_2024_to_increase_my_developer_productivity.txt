Timestamp: 2025-01-05T14:17:06.088884
Title: 10 things I learnt in 2024 to increase my developer productivity.
URL: https://youtube.com/watch?v=A_3MP_V-kB4&si=94lRuNg7mp9oiJRw
Status: success
Duration: 18:46

Description:
好的，以下是根据您的要求对文本进行的总结：

**Summary Outline:**

1.  **Introduction:**
    *   The author stopped using AI coding assistants due to concerns about skill atrophy and "copy-paste" development.
    *   AI is acknowledged to boost productivity, especially with boilerplate code generation.
    *   This led the author to find other ways to improve coding performance.

2.  **Key Productivity Improvements in 2024:**
    *   **Touch Typing:**
        *   Relearned touch typing after using a split keyboard (Zsa Moonlander/Voyager).
        *   Improved typing speed and accuracy.
    *   **Split Keyboard:**
        *   Improved ergonomics and allowed for longer coding sessions.
        *   Forced proper touch typing technique.
    *   **Custom Keyboard Layouts (Home Row Mods):**
        *   Improved keyboard navigation and efficiency (control, shift, alt, super keys).
        *   Enhanced navigation within software development environments.
    *   **Optimized Development Environment:**
        *   Focus on the importance of knowing your dev environment.
        *   Improved file system navigation with `zoxide`.
        *   Utilizing terminal-based editors (Neovim) and multiplexers (Tmux).
    *   **Custom Snippets:**
        *   Creating custom snippets to quickly generate repeated code blocks, especially for error handling.
        *   Advanced snippets that are context-aware (using Neovim's tree-sitter).
    *   **Relearning Foundational Skills:**
        *   Relearning how to deploy to VPS rather than relying on platforms.
        *   Preventing skill atrophy and exercising cognitive skills.
    *   **Embracing Code Generation Tools:**
        *   Using `sqlc` to generate repository code from SQL queries.
        *   Increased development speed through automation
    *   **Prioritizing Automation:**
        *   Reapplying automation processes to local and deployment workflows.
        *   Utilizing Docker, CI/CD, hot reloading for frontend with Go.
    *   **Stick to One Core Language and Framework (Go):**
        *   Reduced choice paralysis and allowed deep dives into language features.
        *   Increased productivity and language expertise.
        *   Building a framework for enhanced workflow.
    *   **Build Starter Kits:**
        *   Creating personal starter kits with essential features to accelerate project start-up.
        *   Making development and shipping more efficient and enjoyable.

3.  **Conclusion:**
    *   The author shares 10 key things learned in 2024, focusing on improving productivity without relying on AI.

**Core Point (One Sentence):**
The author's journey away from AI coding assistance led to the discovery of multiple productivity improvements through focused learning and customized tools.

**Fundamental Point (One Sentence):**
By actively engaging with core development principles and tools, developers can achieve a deeper understanding and increased productivity, counteracting the potential skill stagnation that can come from relying on AI.

**Overarching Framework:**
This content is framed as a journey of discovery, prompted by a deliberate decision to move away from AI coding assistants, leading to the exploration and adoption of diverse strategies to enhance personal productivity in software development.

**Conceptual Map (Tree-Branch Style):**

```
Productivity Enhancement
│
├─── Decision to stop using AI
│    └─── Concerns: Skill atrophy, "copy-paste" development
│
├─── Core Improvements
│    ├─── Typing and Keyboard
│    │   ├─── Touch Typing
│    │   └─── Split Keyboard (Ergonomics, Forcing Function)
│    │       └─── Custom Keyboard Layout (Home Row Mods, Navigation)
│    ├─── Development Environment
│    │    ├─── Optimized Workflow (zoxide, Neovim, Tmux)
│    │    └─── Custom Snippets (Boilerplate, Context Awareness)
│    ├─── Fundamental Knowledge
│    │    └─── Relearning Foundations (VPS deployment, Preventing atrophy)
│    ├─── Code Generation
│    │    └─── sqlc (SQL, Repository Generation)
│    ├─── Automation
│    │    └─── Local dev, Deployment (Docker, CI/CD, Hot Reloading)
│    ├─── Language
│    │    └─── One Core Language (Go, Reduce choice paralysis, Deep Dive)
│    │        └─── Framework & Tooling
│    └─── Starter Kits
│         └───Personal Template (Fast Project Startups, End-to-End)

└─── Result: Improved Productivity without AI dependence
```


Content:
it's been almost a full year now since I stopped using an AI assistant when it comes to writing code I actually have a whole video as to why I stopped using one but in case you haven't seen it the main reasons were to do with concerns about skill atrophy and that by using one it made me feel like I was doing copy and paste software development ultimately I'm really happy with my decision to move away from using an AI coding assistant however there's no denying that AI does provide a productivity boost when it comes to certain tasks with writing code with the most major one being how good it is at generating boiler plate whilst this wasn't enough for me to consider reverting my decision to no longer use AI it did cause me to start looking at other ways I could bridge that performance gap which ended up causing me to discover a number of different ways to improve my performance when it comes to writing code therefore in order to round of the year I thought I would share 10 of the biggest things I've learned in 2024 that have not only helped me to bridge the gap from no longer using AI but have also helped me to improve my general performance when it comes to software development the first way that I improved my own developer productivity and one that I would recommend to anyone looking to add a little speed boost to their own skills is to learn to touch type if you don't know how to do so already for the longest time I pretty much maintained my own touch typing Fork which involved my fingers jumping around the keyboard as fast as possible whilst this approach sort of worked it wasn't exactly efficient and certainly wasn't accurate initially I tried to learn to touch type using the Fantastic gtypist tool which is an interactive touch typing tutor for the terminal however despite my attempts to learn it was always an incredibly painful process when trying to refactor my muscle memory and I would always end up reverting to my own unique style however this all changed for me when I purchased a split keep keboard as my own personal flavor of touch typing was no longer compatible this acted as a sort of forcing function in order to push myself into relearning how to touch type and I'm really glad that I did as it's not only improved my own typing skills causing me to be both faster and more accurate but it's also enabled me to use my next productivity boost learning how to use a split keyboard I actually first tried to learn how to use a split keyboard back in 2018 18 when I picked up the kin's free style which I absolutely hated so much so that I ended up returning it within a week however fast forwarding onto the end of last year I once again decided to give split keyboards a go and opted to try out the Zsa moonlander which was actually recommended to me by one of my good friends who recently just got married congrats dude learning to use a split keyboard is difficult no matter which model you choose and as great as it is these Zsa moonlander was certainly no exception taking me around 2 weeks in order to become productive however in the end the time investment from doing so ended up paying off in dividends this is because not only did it force me to learn good touch typing technique but I've also found that using one provides much better ergonomics compared to traditional keyboards and by having improved ergonomics it's allowed me to code harder better faster for longer in case you're interested the keyboard that I'm currently using the most is the Zsa Voyager which I absolutely love this is because it forces you to think about custom keyboard layouts which has actually been the third major thing that I've learned this year I've actually done a couple of videos on this topic on dreams of code starting by looking at the first custom keyboard change that I made back in 2016 which was when I modified my caps lock key to act as Escape when tapped and left control when held this year however I took my keymap customization a step further and went down the rabbit hole of learning how to use home row mods which has managed to improve my overall productivity when it comes to using a keyboard I've actually done a whole dedicated video on home row mods however if you haven't watched it the general idea is that it allows you to use the modifier keys of control shift alt and super which helps to both speed up typing performance as well as accuracy whilst home R mods aren't for everyone I do believe that anyone can find Improvement by custom iing their keyboard layout in order to meet their own needs in my case one of the biggest things that I found from having a custom keyboard layout specifically home row mods is that it allows me to better navigate my software development environment enabling me to jump across windows open up terminal shells or even just navigating my actual code in fact whilst we're on this subject this actually brings me on to the next thing that I learned in 2024 how to better optimize my development environment when it comes to learning new things I believe there's a bit of a bias towards learning new technologies such as programming languages or Frameworks the reason that I believe that this bias exists is due to the fact that these skills are more likely going to be prioritized when it comes to hiring managers which means there's an added weight in order to know these skills compared to just knowing your development environment despite this however I still think it's worthwhile spending time learning how to improve your environment as it's perhaps one of the most most impactful ways you can really improve your own productivity whether it's knowing how to navigate your file system committing partial changes handling merge conflicts in your code or even just building and running your own software as for how to improve your own development environments this is going to come down to what your specific setup is as for my own environment I pretty much work exclusively inside of a Linux terminal using a terminal-based text editor such as neovim and a multiplexer such as t-o one of the biggest improvements that I've made to in my environment this year was the ability to navigate my file system in a much quicker way through the use of Z oxide in case you're unaware Z oxide is a sort of dropin replacement for the CD command that makes it incredibly easy to navigate to any folder you've already visited inside of your file system without having to remember the full path if you're interested in how it works I actually have an entire video dedicated to it on my second Channel dreams of autonomy by learning how to improve my own developer environment by integrating zo oxide it's helped increase my overall productivity when it comes to working in the terminal and subsequently when it comes to building software as well as zoox side one of the other big improvements that I've learned this year has been related to my text editor specifically when it comes to writing my own custom Snippets out of all of the things that I've learned this year writing my own custom Snippets is the one that I'm most excited about going into 2025 this is because I've started to my toes into what's possible when it comes to using Snippets and as it turns out I think there's a lot of untapped potential in case you're unaware Snippets are a feature found in most modern text editors that let you quickly generate boilerplate codes by typing the snippet's name and selecting it from the autocomplete suggestions using Snippets can really help you to save time whenever it comes to writing code especially when it comes to code that is often repeated such as the infamous if error block when it comes to error handling in go in my case I've not only been learning to use Snippets more often when it comes to writing my own code but also been learning to create my own custom ones whenever I notice that I'm repeating the same lines of code over again for example as I mentioned before when it comes to writing go code error handling can often be tedious to write so I've been pushing myself into making a few custom Snippets in order for me to easily generate the various error handling code that I often encounter such as generating the if error block that I mentioned before or the ability to wrap an error using the fmt error F function as well as these I've also pushed myself into learning how to create more advanced Snippets such as one that I've created in order to print out an error message using the slog logger the reason this one is more advanced is that it has some contextual awareness through the use of the treeit package in neovim which allows me to pass my code as an as to show what I mean if I go ahead and run my SLO error Snippets inside of a method of a type it will automatically pull out the receiver's name from the method's function signature and prefix it into the line of code however if I call the snippet in a normal function then this Behavior doesn't actually occur as it doesn't have a receiver to pull from this is all done using the following neovim low Snippets pulling the relevant information out of the as provided by tree sitter for me this is why I'm really excited to learn more about Snippets in 2025 and I think this could be a viable option for Bridging the Gap when it comes to generating boiler plate I'll definitely be doing a dedicated video on this in the future as well as learning new things such as advanced Snippets I've also spent a lot of time in 2024 relearning some of the things that I haven't done in a while when it comes to software development in 2024 we're living at what I would consider the Golden Age of shipping fast as there are a number of tools and services to enable you to develop and deploy your code in a matter of hours handling things such as authentication payments and even the deployment of your application without you needing to worry about setting up any infrastructure all of this enables you to focus on building your actual product rather than worrying about the context that comes with it this is in stark contrast to how it used to be 15 years ago where it was much more common to roll your own authentication rendering HTML on the server or to deploy your application onto a VPS server that you managed whilst having all of these tools makes shipping much easier and more accessible by using them part of me did start to feel like I was losing some foundational knowledge when it came to building and shipping my own services so throughout this year I decided to spend some time relearning how I used to build software 10 years ago whilst also making sure to apply some Modern Concepts one particular thing that I've really focused on recently has been how to deploy applications to a VPS instead of preferring to use platforms such as Vel netlify or railway. apppp by relearning some of these more foundational Concepts when it comes to Building Services it has helped me to not only get a better understanding of my own code but I believe it also helps to reduce my risk of skill atrophy that often comes when Outsourcing two thirdparty Services perhaps most importantly however is that it encourages me to use my brain which is important for exercising my thinking muscles in fact one way that you can ensure that your own thinking skills are kept up to date is to make use of a learning platform fortunately that that's where the sponsor of today's video comes in brilliant.org if you're looking to learn math data science or programming then brilliant.org can help brilliant is where you learn by doing with thousands of interactive lessons in math data analysis programming and AI learning a little every day is one important habit you can make as it not only helps to keep your brain active but can also make you a better thinker by using brilliant you can achieve this in just minutes every day the platform helps you to build critical thinking skills through problem solving rather than just by memorization so whilst You're Building real knowledge on a specific topic you'll also improve your thinking skills if you're looking to advance your learning in software development in a simple and interactive way brilliant has you covered with a number of courses to help you get started these include both the thinking en code and creative coding courses which will help you to learn essential coding elements from loops and variables to nesting and conditionals so to try everything that brilliant has to offer free for 30 days visit brilliant.org dreams of code either by scanning the QR code on screen or clicking the link in the description down below by doing so you'll also get 20% of brilliant's annual premium subscription a big thank you to brilliant for sponsoring this video the next big thing that I've learned this year is to embrace the use of code generation tools this one is always something I was a little skeptical of in the past as I've often found that generated code can sometimes be a pain to maintain however since discovering the Fantastic SQL C project I've really warmed up to the idea of using Code generation in my own projects in case you're unfamiliar with how sqlc works I do have a whole dedicated video on it that I did a couple of months ago however the general gist is that it allows you to easily generate code that matches the repository design pattern from defined SQL queries and does so in a way that considers your existing database schema for me seqy has been a huge timesaver and I've been using it with every project since discovering it one project that I've recently been using it with has actually been my new course platform which I plan on releasing with my first course in 2025 something I'm really excited about in fact the process of building this course platform has taught me a few other things with perhaps the most notable one being to rior prioritize automation this is something I've been a fan of for a number of years however since becoming a full-time content creator SLS software developer I've mostly been writing code to solve my own problems although that has started to change because of this however it means that I fell short of my usual standard when it comes to automation instead I pretty much re-entered the world of manual process especially when it came to rebuilding my code whenever developing locally refreshing my web browser whenever I made a change to my front ends or manually sshing in and redeploying my application when deploying on a VPS fortunately I've managed to find my way back into the light and have started reapplying automation whenever I can to speed up my process for example when it comes to deploying my code I now make use of both Docker stack and Docker context to ensure that I'm able to deploy my VPS on a cicd pipeline without needing to manually ssh in as for automating my local development experience when it comes to my course platform I've been making use of both the air packaging goal as well as the ability to perform hot reloading when it comes to working with temple which is what I've been using for rendering HTML this has sort of given me a nextjs like experience when it comes to building my front end but with the added benefit of using go which is actually another thing that I've learned to embrace in 2024 having only one preferred language or framework this is perhaps going to be the most controversial take in this video and tends to be at odds with the general idea of picking the best tool for the job however personally I found this to be a much better approach for my own productivity to explain why it All Began earlier this year when I was starting to build out a new SAS tool one that I actually use in my own video production workflow actually I started to do so on stream and ran into perhaps what is a very common issue when it comes to front-end software development which framework to use much to the dismay of chat I spent a lot of time Deli op ating over each of the potential Frameworks I was considering as they all had their own pros and cons for me this is actually one of the first times that I've really experienced such strong Choice paralysis when it comes to software development and it's something I didn't really want to experience ever again when starting a new project so I decided for the rest of 2024 to only pick one language and make use of it as the default language and framework for all of my future projects only ever deviating if the language itself had a technical limitation that meant it couldn't be used as for which language to choose well I had one last decision I needed to make which was to choose between either go or rust which are perhaps my two favorite modern languages in the end I decided to choose go which is probably the language I've used the most over the past 5 years but I think I would have been happy using either one in fact I want to try and do the same experience at some point throughout 2025 when it comes to rust perhaps adding it to a core language tool belt that I use for various different tasks however since pick and go it's become the main language that I've used for nearly every task since which has not only removed Choice paralysis for me at least when it comes to building software but it has also allowed me to spend time really dedicated to diving deep into the languages features this means I've gained a better understanding of the language to solve some of the more Niche problems I've typically encountered such as using the embed package to solve some issues I had when it came to deployments or being able to make full use of the newer features of the language such as the HTTP Advanced routing feature released earlier in 2024 personally I'm really glad that I've dedicated time into using a single language and in doing so it's actually encouraged me to build a framework in order to become more productive when using it this was something inspired by a lot of the enthusiasm for laravel and how the framework allows developers to become productive as quickly as possible which actually brings me onto to my 10th and final lesson of 2024 learning to both build and use my own starter kits this is perhaps the most recent thing that I've learned this year in my case rather than purchasing or forking an open- Source starter kit I've instead been building out my own suweet of code in order to build up a decent template for my preferred Tech stack the goal of this starter kit is for me to be able to begin a project at the start of the day and have it up and running by the end of the evening complete with payments Authentication configuration emails HTML rendering and even be fully deployed by building this kit it's not only allowed me to be more productive with my chosen language but has made shipping and idea a much more enjoyable experience something that I want to keep on with in 20125 if you're interested in what my starter kit looks like then let me know in the comments down below and I'll put some time into figuring out how I can make it available for other people to use in any case that wraps up the 10 things that I've learned in 2024 in order to improve my productivity without relying on AI with that this will probably be my last video of 2024 so I hope you all have a great New Year and I'll see you in the next one
