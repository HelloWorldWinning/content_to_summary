Timestamp: 2025-01-30T14:41:19.821358
Title: Get Started with DeepSeek in 10 Minutes n9Ir-nDZxy4
URL: https://youtube.com/watch?v=n9Ir-nDZxy4&si=8xlI0Sx5Or3eXDmf
Status: success
Duration: 10:08

Description:
**1. 核心要点（Core Point）:**

DeepSeek模型提供了多种使用方式，从在线平台到本地部署，满足了不同用户在研究、编码和离线环境下的需求。

**2. 基本要点（Fundamental Point）:**

DeepSeek模型因其高性能和推理速度引起关注，但同时面临着服务器负载压力和不同部署方式下的性能差异。

**3. 总体框架（Overarching Framework）:**

该内容概述了DeepSeek模型的多种访问和使用方式，包括：
    * **在线平台:** deepseek.com, GitHub Marketplace, Perplexity, Grok.
    * **本地部署:** Olama, LM Studio, Jan.
    * **代码集成:** IDEs (VS Code + Continue, Klein, Adert).
    * **性能分析:** Artificial Analysis 提供的模型速度和成本比较。
    
**4. 概念图 (Conceptual Map):**
<Mermaid_Diagram>
graph LR
    subgraph DeepSeek模型使用方式
      A[在线平台]:::online --> B(deepseek.com);
      A --> C(GitHub Marketplace);
      A --> D(Perplexity);
      A --> E(Grok);

      F[本地部署]:::local --> G(Olama);
      F --> H(LM Studio);
      F --> I(Jan);

      J[代码集成]:::ide --> K(VS Code + Continue);
      J --> L(Klein);
      J --> M(Adert);

      N[性能分析]:::analysis --> O(Artificial Analysis);
     end

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style F fill:#ccf,stroke:#333,stroke-width:2px
     style J fill:#cfc,stroke:#333,stroke-width:2px
    style N fill:#fcc,stroke:#333,stroke-width:2px

    B--在线交互-->|R1模型|A;
    C--云端模型服务-->|速度较慢|A;
    D--搜索及推理-->|集成R1|A;
    E--快速推理服务-->|70B参数模型|A;

    G--本地部署模型-->|命令行|F;
    H--本地部署模型-->|界面操作|F;
    I--本地部署模型-->|提供本地服务|F;

    K--IDE集成-->|本地/云端模型|J;
    L--IDE集成-->|多模型支持|J;
    M--终端集成-->|自然语言编码|J;

    O--模型评估及选择-->|速度/成本/质量对比|N;
</Mermaid_Diagram>


Content:
 In this video, I'm going to do a quick overview on the different places on where you can get started with deep-seek, whether you want to do research, if you want to use it within a coding context, if you want to just use it locally, I'll show you all of the different options that are available right now. The first one, and this is probably the one that you might have already visited, and this is Chad.deepseek.com. This is the hosted interface where you can interact with the model, so you do have to enable DeepThink R1 to access the R1 model. What's interesting with this model is you can ask it about recent events. You can say, tell me about today's AI news. What it will do is it will actually perform that search functionality for you before feeding it to the model. Now, mind you, one thing that's interesting right now is they seem to be having troubles with actually the inference and serving up the amount of demand right now. I think that is in part why we've started to see a bit of a decrease, especially over the past day, not being able to handle the amount of requests that there are. So GitHub has a marketplace. If you go to git.com slash marketplace, you'll be able to see the different models here. So there's DeepSeek R1, there's O1, you can go in and you can try this. And for instance, just if I show you this, now this is running on Azure's infrastructure. And when you compare this to the DeepSeek hosted model, if you have been able to try it, you will notice this model is very slow in comparison. That's one thing to note, if you are going to be using this through GitHub or on Azure, it does seem at least at time of recording, it is going to be a little bit of a slower option. Now, the next one is going to be for local models. So, Olama is a really great option. You can go to Olama.com, you can pull this down. And to get started for the models, you can go to the models page here. And on the specific DeepSeek R1 page, now there's a number of different sizes of models. If you're less familiar with language models, they're going to come in various sizes oftentimes. Now, what's different with this release is the main R1 model with all of the performance that people are touting and comparing to the O1 model from OpenAI. This is that 671 billion parameter model. This model is not going to run on standard hardware. You're going to have to have NVIDIA GPUs, or you're definitely going to have to have some specialized hardware to be able to run that. So now, in terms of the most common sizes of what you'll be able to likely run on your machine are generally speaking, I'd probably recommend you start somewhere with the SAP variance of the model. You could go as small as 1.5B. Generally speaking, I think most people should be okay with 7 or 8B. Now, if you do have a decent computer, you should be able to run 14B. Now, the one thing that will vary machine to machine is the tokens per second rate will definitely fluctuate a fair bit depending on your machine. Now, if you have a really good machine with a lot of RAM, you should be able to go up a little bit on the spectrum here as well if you want to try some of these more powerful models. Next up, another great option is LM Studio. This is a great one where you can download it on Mac, Windows, or Linux similar to Olamma. But what's different with this is you actually have an interface. As soon as you download it, you'll be able to pull all of the different models that you want from hugging face that are supported. And you'll be able to have this nice little interface and be able to run it all locally. That's the big benefit of both Olamma and LM Studio is you could just turn off Wi-Fi on your computer and no information is going to be sent across the network. You can use these completely offline. So next up is Jan. And I really feel like this one sort of sits in between the capabilities of Olamma and LM Studio. The great thing with this is you have a really nice chat interface, but they've also added the ability where you can use this and serve it up as a server that you can access. Say if you have local applications and you want to integrate, you can just make request to your local server to be able to use those. Where that can be useful is if you're using a coding IDE and you want to make requests to a language model that you have locally, you can do that with things like Jan, LM Studio as well as Olamma. Next, I want to show you a really great implementation within the application layer that came out very quickly. Perplexity rolled out deep-seek R1 seemingly in record time. And what you're able to do with this is if you ask a queries in this, let's just say the news today was opening eye claims deep-seek used its model. What this will do is you will see it will go through the research step. And what's great with perplexity is it's actually built for research by being able to incorporate a quote unquote reasoning model. It can reason about all of the different information that it's searching for and it can go and think through it. So you'll see, okay, let's tackle this query. The user has asked about opening eyes claim that deep-seek used its models. First I need to go through all the provided search results to gather key points, so on and so forth. Then within here we can see these sources and then it gives us this aggregate response with all the citations in line and everything. Kudos to the team perplexity for integrating this. It is definitely a really slick look and being able to use these reasoning models that can access the internet. In my opinion is like the killer use case right now with this model. There's definitely a genteq use cases that I think we're going to see over the coming weeks. But right now the thing that works really well is that search and reasoning capability combined. The next up is grok. So grok is serving up the 70 billion parameter model, which is the second biggest model. You're going to be able to use the model incredibly fast. If I just say write a short story and I'll submit this. This is hosted and served up and what they use to make it so fast is right now at time of recording the inference speed from grok is about 275 tokens per second. And now this is on the 70 billion parameter model. This is a distilled version of that model, which is still very powerful. Just to demonstrate it here, I put out a really quick demo when they put this out and to show you how this can work is this is effectively a clone or a light clone of anthropics artifacts feature. And as you can see here, it is very quick to render everything. It just ran through the answer. It followed all of the system instructions that I've had in place and it was able to give this coherent response without any syntax breaking or anything. Now the next thing within this next where I want to point you and this is definitely a good one to keep your eye on is artificial analysis within artificial analysis. What's great with this is they rank all of the different models across quality speed as well as price. You can see all of the different hosting providers as well as the rate of things like the latency, their particular context window and all of these different metrics such as cost, which do very considerably platform to platform. And what's interesting with this is actually the cost in comparison with the speed across the board for the deep-seek hosted version. Now mind you, this has really been hammered the past several days, but it's going to be interesting to see if they're able to keep the prices this low because it might be a little too much to actually be able to serve up this model, especially with the amount of attention that it has right now. Now in terms of the output speeds for the deep-seek interface, it is actually very fast. It is an interesting question considering what they might actually be doing not just on the training front, but also on the inference front to be able to serve this up on GPUs at a speed like this. Because when you compare it to some of these other providers like Hyperbolic, Sentinel, fireworks together AI, these are all the infrastructure companies that run with NVIDIA GPUs. And for the second best contender to have performance that's less than half of what deep-seek has achieved, it's an interesting question there. On how deep-seek was able to get the inference speed as fast, there are a ton of other metrics here that you can check out. They do track the output speed over time. When a model comes out, you have to see that the API speeds do degrade a little bit, especially after a major release. And this can just be helpful overall for helping you determine what might be a good provider to use or potentially if you're going to be using multiple providers. Next I just wanted to point you to a couple other options. You can set this up in a number of different IDEs right now. One that I personally quite like is continue. You can use this in VS code. And what you'll be able to do with it is essentially have a cursor-like experience where you have this panel on the right hand side and you'll be able to make edits and suggestions to your code with natural language. What's great with this actually is you can integrate it with Olama for instance. I believe you should be able to integrate it quite easily with LM Studio as well as Jan if you like. And what you can do with this is not only just leverage local models, but you could also use a provider like Grop if you wanted, or if you wanted to use any of those providers like I showed you within artificial analysis. Now in terms of some other IDEs, I've had recommendations to check out Klein. This is one that I've heard more and more about. I haven't checked it out myself, so I can't say too much on it just quite yet. But this is an increasingly popular option that people like for being able to use this across a number of different models within VS Code. Now another option that you can try this out in is Adert. Personally, I haven't tried this quite yet, but I know a lot of people do quite enjoy this experience. You'll be able to use this within your terminal and be able to build out your application with natural language. They also have some really great benchmarks for coding on how well these different models perform when they come out. I've definitely touched on those before, but this is another potential option that you could use if you're looking to use it within a coding context. Otherwise, that's pretty much it for this video. I just wanted to show you a number of different options, especially if you wanted to try deep seek, but maybe you haven't been able to try out the deep seek interface quite yet because it is just being hammered by the looks of it. Otherwise, that's pretty much it for this video. If you found this video useful, please like, comment, share, and subscribe. Otherwise, until the next one.
