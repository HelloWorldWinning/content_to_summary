Timestamp: 2025-08-30T02:03:02.484394
Title: 实测对比：GoRust vs Python 的运行速度，如何精准抓住 Python 的优势？ BV1nQJxzGEFF
URL: https://b23.tv/sNEO9S0
Status: success
Duration: 9:53

Description:
### 后端API服务性能评估与语言选择策略总结

**1. 概述与目的**

本评测旨在比较不同编程语言和框架在构建API后台服务器时的性能表现，主要关注响应时间和吞吐量，以指导产品开发中的语言选择。

**2. 测试方法与环境**

*   **被测语言与框架：**
    *   Python: FastAPI
    *   Go: Fiber
    *   Rust: Axum
    *   .NET: ASP.NET Core (视频中称作 "Don't light")
*   **测试工具：** 基于AIOHTTP的HTTP客户端（“ISINISINGoRust”），采用异步I/O模型进行压力测试。
*   **优化程度：** 所有测试均基于各框架的初步、非深度优化的基础实现，力求公平对比。
*   **未测试项：** 多线程/多进程同步模型，因其性能明显低于异步I/O模型，故未纳入测试范围。

**3. 性能测试结果**

*   **响应时间（秒）：**
    *   Python (FastAPI): 约 **14秒**
    *   Go (Fiber): 约 **2秒**
    *   Rust (Axum): 约 **2.5秒**
    *   .NET (ASP.NET Core): 约 **2.53秒**
    *   **结论：** Go、Rust、.NET 的响应时间大致相似，远快于 Python。

*   **吞吐量（QPS - “通通量”）：**
    *   Rust: **最高**
    *   Go: **居中**，表现“比较均衡”
    *   .NET: **最低**（在Linux环境下测试结果为107.78/2.6，具体数值可能与运行环境有关，但相对最低）
    *   **结论：** 在响应时间相似的前提下，Rust 的吞吐量表现最佳。

**4. 核心结论与建议**

*   **Python 的优势与劣势：**
    *   **优势：** 开发速度快，适合快速原型开发。
    *   **劣势：** 性能“拉垮”，在生产环境性能要求高时表现不佳。
*   **Go、Rust、.NET 的优势：**
    *   **优势：** 性能表现卓越，远超 Python，适合作为高性能后端服务的生产级选择。
    *   **细分：** 虽然响应时间相近，但 Rust 在吞吐量方面表现突出。
*   **语言选择策略：**
    *   **快速原型开发：** 可优先考虑 Python，实现快速迭代和验证。
    *   **生产环境对性能要求高：** 应考虑将 Python 代码重构为 Go、Rust 或 .NET。
*   **选择 Go/Rust/.NET 的考量因素：** 生态系统成熟度、团队成员对语言的掌握能力、学习曲线。
*   **其他语言提及：**
    *   **Node.js：** 性能优于 Python，但仍远逊于 Go、Rust、.NET。
    *   **Java：** 性能也属于优秀梯队。

---

**核心观点：**
在后端API服务器开发中，Python适合快速原型开发，但在生产环境对性能要求高时，Go、Rust和.NET是更优的选择，它们在响应时间上表现相似，但在吞吐量上Rust表现最佳。

---

**Overarching Framework (总体框架):**
后端API服务性能评估与语言选择策略

---

<Mermaid_Diagram>
graph TD
    A["后端API服务性能评估与语言选择策略"]

    subgraph "测试方法与环境"
        B["测试目标: 后端API服务器性能"]
        C["被测语言/框架"]
        D["测试工具: 基于AIOHTTP的HTTP客户端"]
        B --> C
        B --> D
    end

    subgraph "语言与框架 (初步实现)"
        E["Python (FastAPI)"]
        F["Go (Fiber)"]
        G["Rust (Axum)"]
        H[".NET (ASP.NET Core)"]
        C --> E
        C --> F
        C --> G
        C --> H
    end

    subgraph "性能测试结果"
        I["响应时间 (秒)"]
        J["吞吐量 (QPS)"]
        E -- "14+秒" --> I
        F -- "2+秒" --> I
        G -- "2.5+秒" --> I
        H -- "2.53+秒" --> I

        J_R["Rust (最高)"]
        J_G["Go (居中)"]
        J_D[".NET (最低)"]
        J --> J_R
        J --> J_G
        J --> J_D
    end

    subgraph "核心结论与建议"
        K["Python: 性能劣势 (拉垮)"]
        L["Go/Rust/.NET: 性能优势 (响应时间相似)"]
        M["Rust: 吞吐量最优"]
        N["Go: 吞吐量均衡"]
        O[".NET: 吞吐量最低"]
        P["策略: 快速原型 -> Python"]
        Q["策略: 生产环境 -> Go/Rust/.NET"]
        R["选择考量: 生态/掌握度/团队能力"]
        K --> P
        L --> Q
        M --> L
        N --> L
        O --> L
    end

    A --> B
    D --> I
    I --> K
    I --> L
    J --> J_R
    J --> J_G
    J --> J_D
    J_R --> M
    J_G --> N
    J_D --> O
    P --> R
    Q --> R

    subgraph "其他语言提及"
        S["Node.js (优于Python, 劣于Go/Rust/.NET)"]
        T["Java (性能良好)"]
        Q --> S
        Q --> T
    end

    style A fill:#FFEBEE,stroke:#333,stroke-width:2px;
    style B fill:#E0FFFF,stroke:#333;
    style C fill:#E0FFFF,stroke:#333;
    style D fill:#E0FFFF,stroke:#333;

    style E fill:#FFDDC1,stroke:#FF4500;
    style F fill:#D4EDDA,stroke:#28A745;
    style G fill:#D4EDDA,stroke:#28A745;
    style H fill:#D4EDDA,stroke:#28A745;

    style I fill:#ADD8E6,stroke:#333;
    style J fill:#ADD8E6,stroke:#333;
    style J_R fill:#90EE90,stroke:#333;
    style J_G fill:#FFFFCC,stroke:#333;
    style J_D fill:#FFC0CB,stroke:#333;

    style K fill:#FFB6C1,stroke:#FF0000,stroke-width:2px;
    style L fill:#90EE99,stroke:#008000,stroke-width:2px;
    style M fill:#7CFC00,stroke:#006400,stroke-width:2px;
    style N fill:#FFD700,stroke:#DAA520,stroke-width:2px;
    style O fill:#FF6347,stroke:#FF0000,stroke-width:2px;
    style P fill:#FFE4B5,stroke:#FFA500;
    style Q fill:#A2D9CE,stroke:#1ABC9C;
    style R fill:#DCDCDC,stroke:#808080;

    style S fill:#F0E68C,stroke:#B8860B;
    style T fill:#F0E68C,stroke:#B8860B;
</Mermaid_Diagram>

Content:
各位网友大家早上好我现在理今天给大家评测一下PySyncGoRustDonightBug同样做一个API后台服务器我们看一下它的性能方面的一些表现首先我对这个代码做一些介绍那这个Serve.py这个文件呢我是用了一个Fast API做了一个构建了一个后台的API韩署一个API服务通过这个API服务我们对它在性能进行压测然后这是一个客服装这个ISINISINGoRust这是一个E-B的一个AIO那一个HTTP的一个E-B Cool通过ISINISINAIO来对这个服务器做了一个压力的测试那这里还有一些主赛事的主赛的和多信诚的主赛的和多信诚的它的性能可能是比较差肯定是没有E-B的快所以我这里就不对这两个性能做一些测试了我主要是考察了这个E-B的测试那首先我们将这个服务器给运行起来怎么去运行这个服务器呢是这样的OK那服务器运行起来了运行起来之后我们通过模拟一个客服装来对它进行一个测试那么我们这个客服装是叫做ISIN这个那我们对它进行一个压力的测试那最后呢我们来看一下这个时间是多少大家稍等一下我们可以看到这个时间是14秒多这个后面什么秒单位什么秒是14秒多那这是一个拍成的一个数据14秒多我们可以再将它进入一下来好那这个时候呢我们再来看一下购物园的这个购物园在这里我们去看一下购物园的把这个设备给关掉那我们看一下这个购物是准备写的我们这个购物园是通过另外一个宽家叫Fabre这个这个宽家写的然后这里我们使用那个购物园也就是购的那个写成在哪里呢我们看一下对对这里后面再说我们来现在测试一下它的性能我们先把这个服务被跑起来那这时候Fabre这个服务已经请到了然后这个服务我们又做了对它做一些任何的优化就是比较出照的然后我们再来对它进行一个测试好那我们可以看一下这个时间它是只是花会在2秒多弄然后我们可以在这里进入一下够浪的事件那我们再来看一下这个RustRust我们这样简单运行一下一下它Rust wrong very nice好这个服务已经请到了我们再来测试一下看一下我们Rust它是使用那2.5秒多的时间Rust它是产源的一个也是产源的一个外部宽家它产源的宽家是这个Ike Tx这个我用的比较少它这个软件这个这段代表的话也没有做过度的区域优化也没有采用什么其他的什么TOKIO这些一部一部的宽家什么的比较负责然后我这个就是做了一些初步的一个就是直接做了一个宽家外面的一个比较出照的没有做一些过度的优化了但是我们可以看它实现它是运了大概12.5秒的时间然后这个实现的基本上是和和够辣是差不多的最后一个还有一个Don't light我们看一个Don't light它的表现怎么样我们进入它进步了看一下怎么长这就是一个伏器音跑起来了然后我们来测试一下让等一下这点好像出错了然后刚才那个启动伏杰你小问题我们来看一下重新来把这个Don't light的伏器启动一下这样子启动好启动了然后我们来测试一下那我们可以看到它后来的时间是2.530我们给你进入一下我们可以看一下这个出了拍绳之外其他的这个其他的这个主比较主流的语言比如说够辣Rush的和Don't light它的性能想像你的时间花会的时间据来说都大增长差不多这个时间这个程序我没有做据这类企划其实比较出找一个评测但是他们来说的话是比拍绳是快很多的比拍绳这个14的话是要快很多的还有一个就是我要给告诉大家一个结论这个结论是什么呢就是这个结论就是虽然他们的想因想因的时间这个想因的时间呢大致残来所多差不多但是他们呢发现他一个问题他就是说他们的那个通通量可能会有一些差异性那这里首先说结论就是Don't light它的那个通通量是最低的你看在这里是107.78要要2.6因为这个Don't light他是运行程Linux下面的我不知道跟这个有没有关系运行程序运动程序上面会不会好一点不太清楚其次就是那个Gol-LangGol-Lang的通通量呢它是在RUSH的和抖来的字尖的Gol-Lang它是够远的话它是比较均衡一点然后通通量最高的话RUSH的通通量最高的是RUSH的所以这是告诉大家一个结论就是我们在做产品的时候或者是做软件方案的时候然后我们首先考虑的是产品运行再来产品运行我们要快速够紧传命运行的社我们可以采用PythonPython来做但是我们也必须清楚Python的性能呢就是比较拉垮的Python的性能是比较拉垮的它这个性能的话是比较差的在生产条件下的话我们有条件的话还是尽量这样这个Python的代码重构成Gol-Lang RUSH的这两个或者是Dol-Light这个GT看大家在学球了也要看这个生态了也要看大家的对这个集中语源的掌握的能力了另外还有其他的一些外版的一些一些宽价比如说NoteNote的GISNoteGIS的性能其实比Python好拉麦一点点但是跟Gol-Lang RUSHDol-Light的比起来的话也会差很多抓完的话也是在这个踢队里面的性能外面跟外面也是比较好的好吧那今天就跟大家分享在这里这个代码只可以给大家做一个仓口如果有什么问题的话可以平常去留言告诉我喜欢我的视频的话可以点阅订阅我好了今天就分享在这里再见
