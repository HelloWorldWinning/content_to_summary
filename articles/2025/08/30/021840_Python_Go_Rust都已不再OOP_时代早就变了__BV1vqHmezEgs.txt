Timestamp: 2025-08-30T02:18:40.363603
Title: Python、Go、Rust都已不再OOP。时代早就变了。 BV1vqHmezEgs
URL: https://b23.tv/7qNmFyz
Status: success
Duration: 29:11

Description:
### 核心观点

尽管Java等语言最初基于严格的面向对象继承原则，但现代软件开发实践和新兴语言正倾向于通过接口实现多态和组合优于继承，以规避传统继承带来的耦合和维护难题，从而实现更灵活、可扩展的设计。

### 宏观框架 (Overarching Framework)

本内容的核心宏观框架是：**对传统面向对象编程（OOP）核心原则，特别是继承，进行批判性分析，并通过对比现代编程实践和新兴语言（如Go、Python、Rust）的特点，揭示软件设计范式从强继承向弱继承、重组合、轻量级多态演进的趋势。**

---

### 总结大纲

I. **对当前Java开发实践的反思**
    A. **数据与方法的隔离**
        1.  普遍使用DTO/VO/BO等数据传输对象（“撞数据的类”），这些类通常仅包含属性和Getter/Setter方法。
        2.  业务逻辑和数据操作（如DAO层）与数据模型（POJO/Bean）分离，形成“一对函数加一对结构体”的模式。
        3.  **核心批评：** 这种实践与传统OOP思想（属性与方法应封装在同一类中）相悖，更接近面向过程的数据结构与函数分离模式（如C语言的结构体）。

II. **对OOP核心原则——继承的批判**
    A. **继承的“深耦合”问题**
        1.  继承被视为一种“深耦合”，一旦建立便难以修改或解耦。
        2.  **“父类弱智，儿子100%弱智”：** 基类设计上的任何缺陷或不合理之处，会直接传递给所有子类，导致整个继承体系的脆弱性，难以进行回头修正（“只能做加法，不能动”）。
    B. **`Object.clone()` 方法的案例分析**
        1.  Java `Object` 类中默认的 `clone()` 方法实现的是浅拷贝，其语义和实际用途受到质疑（“面包我弄出来一个，你咬一口我这也没一口啊？”）。
        2.  在继承体系中实现深拷贝面临挑战：覆盖基类的 `clone()` 方法可能改变其预设语义，或导致与团队既定认知的冲突。
        3.  **提出改进：** 使用接口（如 `Cloneable`、`DeepCloneable` 等）而非基类中的具体方法，能提供更清晰、灵活的实现选择，避免基类固化设计带来的问题。
    C. **多重继承难题**
        1.  Java不支持类的多重继承，但现实业务（如油电混动汽车）常有多个维度（如“油动力”和“电动力”，并非单纯能源类型，而是发动机类型）的需求。
        2.  在Java中，通常通过继承一个类并实现多个接口来模拟多重特性，但这并非真正的多重继承，设计上仍显复杂和不自然。

III. **新兴语言的发展趋势与对OOP的再审视**
    A. **弱化继承，推崇组合**
        1.  Python、Go、Rust等新一代语言普遍弱化了类继承的概念，甚至在Go语言中没有类的概念。
        2.  强调“组合优于继承” (Composition over Inheritance)，通过组合不同的组件或结构体来构建功能，而非层层继承。
    B. **Go语言的实践**
        1.  Go语言通过“结构体” (struct) 封装数据，并允许方法绑定到结构体。
        2.  接口在Go语言中用于实现多态性，这与Java中通过继承实现多态不同。
        3.  **核心观点：** Go语言的设计被认为是谷歌针对Java多年开发中遇到的痛点所提出的解决方案，它以更灵活、低耦合的方式实现了OOP的核心价值。
    C. **OOP的真正价值：多态**
        1.  OOP三大特性中，封装是通用原则；继承因其耦合性而引发诸多问题。
        2.  多态 (Polymorphism)，尤其是通过接口实现的向上转型，被认为是OOP最强大和最有价值的特性。
        3.  新兴语言通过接口机制有效地实现了多态，从而规避了继承的弊端。

IV. **Java的未来与JVM的作用**
    A. **Java自身的包袱**
        1.  Java语言历史悠久，随着时间积累，其设计上存在一些“历史包袱”和“难返之重”。
        2.  Java语言为适应发展，不断引入新特性（如Lambda表达式、函数式编程），可能使其与最初的OOP风格渐行渐远。
    B. **JVM的强大与开放性**
        1.  Java虚拟机（JVM）是Java生态系统最强大的资产，它是一个高性能的运行时环境，支持多种语言（如Scala、Kotlin、Clojure等）。
        2.  **未来趋势：** 随着JVM上语言的多样化和新范式的兴起，未来可能出现更多在JVM上运行的新语言，而“Java”这个语言本身的地位和意义可能不再是核心，JVM才是关键。

---
<Mermaid_Diagram>
graph TD
    A["OOP范式批判与演进"] --> B("Java开发现状与反思");
    A --> C("OOP核心原则审视");
    A --> D("新兴语言与新范式");
    A --> E("Java的未来");

    subgraph "Java开发现状与反思"
        B1["'撞数据'类 (DTO/VO/BO)"] --> B2("仅含属性/Getter/Setter");
        B2 --> B3("数据与方法分离");
        B3 -- "被视为" --> B4["反OOP实践"];
        B4 -- "类比" --> B5("C语言结构体+函数");
    end

    subgraph "OOP核心原则审视"
        C1["封装"] --> C1_1("通用原则");
        C2["继承"] --> C2_1("深耦合");
        C2_1 --> C2_2("基类缺陷传递");
        C2_1 --> C2_3("克隆方法示例");
        C2_1 --> C2_4("多重继承难题");
        C2_4 -- "如" --> C2_5("油电混动汽车");
        C3["多态"] --> C3_1("OOP最爽之处");
    end

    subgraph "新兴语言与新范式"
        D1["弱化继承"] --> D2("组合优于继承");
        D2 -- "通过" --> D3("接口");
        D3 -- "实现" --> C3;
        D4["Go语言实践"] --> D5("无类概念");
        D5 --> D6("结构体 + 方法绑定");
        D6 --> D3;
        D4 -- "特点" --> D7("解决Java痛点");
        D1 --> D8("Python / Rust");
        D8 --> D2;
    end

    subgraph "Java的未来"
        E1["JVM作为核心优势"] --> E2("支持多语言运行");
        E2 --> E3("Java语言包袱重");
        E3 --> E4("引入函数式/Lambda");
        E4 --> E5("与传统OOP渐行渐远");
        E1 --> E6("未来：Java可能不重要，JVM是关键");
    end

    C2 -- "导致问题" --> D1;
    B3 -- "不符合" --> C1_1;
    C3_1 -- "通过" --> D3;

    style A fill:#E0FFFF,stroke:#36454F,stroke-width:2px,color:#36454F;
    style B fill:#FFF8DC,stroke:#A0522D,stroke-width:1px,color:#A0522D;
    style B1 fill:#F0E68C,stroke:#B8860B,stroke-width:1px,color:#B8860B;
    style B2 fill:#F0E68C,stroke:#B8860B,stroke-width:1px,color:#B8860B;
    style B3 fill:#F0E68C,stroke:#B8860B,stroke-width:1px,color:#B8860B;
    style B4 fill:#FFB6C1,stroke:#FF6347,stroke-width:2px,color:#FF6347;
    style B5 fill:#F0E68C,stroke:#B8860B,stroke-width:1px,color:#B8860B;

    style C fill:#FFFFCC,stroke:#DAA520,stroke-width:1px,color:#DAA520;
    style C1 fill:#90EE90,stroke:#228B22,stroke-width:1px,color:#228B22;
    style C1_1 fill:#90EE90,stroke:#228B22,stroke-width:1px,color:#228B22;
    style C2 fill:#FFB6C1,stroke:#FF6347,stroke-width:2px,color:#FF6347;
    style C2_1 fill:#FFB6C1,stroke:#FF6347,stroke-width:1px,color:#FF6347;
    style C2_2 fill:#FFB6C1,stroke:#FF6347,stroke-width:1px,color:#FF6347;
    style C2_3 fill:#FFB6C1,stroke:#FF6347,stroke-width:1px,color:#FF6347;
    style C2_4 fill:#FFB6C1,stroke:#FF6347,stroke-width:1px,color:#FF6347;
    style C2_5 fill:#FFB6C1,stroke:#FF6347,stroke-width:1px,color:#FF6347;
    style C3 fill:#ADD8E6,stroke:#4682B4,stroke-width:2px,color:#4682B4;
    style C3_1 fill:#ADD8E6,stroke:#4682B4,stroke-width:1px,color:#4682B4;

    style D fill:#D8F8D8,stroke:#006400,stroke-width:1px,color:#006400;
    style D1 fill:#ADD8E6,stroke:#4682B4,stroke-width:1px,color:#4682B4;
    style D2 fill:#ADD8E6,stroke:#4682B4,stroke-width:1px,color:#4682B4;
    style D3 fill:#ADD8E6,stroke:#4682B4,stroke-width:1px,color:#4682B4;
    style D4 fill:#B0E0E6,stroke:#6A5ACD,stroke-width:1px,color:#6A5ACD;
    style D5 fill:#B0E0E6,stroke:#6A5ACD,stroke-width:1px,color:#6A5ACD;
    style D6 fill:#B0E0E6,stroke:#6A5ACD,stroke-width:1px,color:#6A5ACD;
    style D7 fill:#ADD8E6,stroke:#4682B4,stroke-width:1px,color:#4682B4;
    style D8 fill:#B0E0E6,stroke:#6A5ACD,stroke-width:1px,color:#6A5ACD;

    style E fill:#F5DEB3,stroke:#8B4513,stroke-width:1px,color:#8B4513;
    style E1 fill:#B0C4DE,stroke:#5F9EA0,stroke-width:1px,color:#5F9EA0;
    style E2 fill:#B0C4DE,stroke:#5F9EA0,stroke-width:1px,color:#5F9EA0;
    style E3 fill:#F0E68C,stroke:#B8860B,stroke-width:1px,color:#B8860B;
    style E4 fill:#F0E68C,stroke:#B8860B,stroke-width:1px,color:#B8860B;
    style E5 fill:#F0E68C,stroke:#B8860B,stroke-width:1px,color:#B8860B;
    style E6 fill:#B0C4DE,stroke:#5F9EA0,stroke-width:1px,color:#5F9EA0;
</Mermaid_Diagram>

Content:
就是指撞数据的那个类为什么我们涉及一个类却指撞数据呢就该说在我连带就OP真正流行的时候就国内就两个语言要么是扎网要么就用点赖子点赖子还有语言过一整儿我不知道大家知不知道就是金融早期生有点赖的写到并且我说这个早期有好几年甚至于说他都已经已经说重则终之了还是用点赖子呢金融时有点赖的写的后转的招是这个情况甚至于金融在后期还有这种原来因为有点赖的用的是似不似偶尔的数据过还有一些老的数据在似不似偶尔上没人敢动因为那是核心数据动了可能会出问题所以没人敢动还有老的数据过呢是这个情况当你来这个时候OP的思想就就很跟神经病然后慢慢的就就搞出了这个就是不知道为什么不知道为什么就我说的是我们在工作上不知道为什么大家就同意了习惯都是这个 PLL或者是B存数据的B也就是什么 PLL我就就用思想不知道是他录给了录给了不知道从核实而起大家的思想就被统一了然后呢PLLPLL操作这个PLL就是我们从数据库存取的方法他是叫PLL我们PLL里基本上没有属性对吗对吧就是PLL我们都是方法然后PLL里都是数据对将这个方法和数据隔离和数据分开那这还是他符合这个OP思想吗这个意思就是我们现在做的这种他他不符合OP思想OP没数你要疯狂对吧应该有属性有方法这才是一个类我们有属性除了赛德盖的方法以外没有其他的那个操作这不对味对吧就这种就这种是什么这种原来就有话你比如说C率远里边存装数据的面条过程也有数据面条过程的数据结构叫啥啊就是我们写的这个POG也好别也好在这个面条过程的原理叫什么大家知道吗基本功啊机功大学都学样C原理是不是有一个东西叫结构体啊C原理是不是有中英教我怎么好我我把我的剑盘当打开了头一次误触了一个拜见这个C原对死罢他死死罚C原理有结构体制吧结构体那就是对然后如果说你说我们用杀了写的那玩意是不是结构体就是我们在杀了零兵我们在杀了零兵是不是结构体对吧因为站在我里边那个纯的POG这种那种病就是结构体啊那他还都是啥是吧就是只是刚在数据的然后呢也有是啥也有就是一对韩述啊因为他不是一对数据啊我们现在叫方法方法或者韩述那其实我们现在的玩法是说用一对韩述加一对结构体是吧我们服务端都是这么开发的现在大家的认知都已经被统一了那OK我们就是用这个这个这个DL然后操作这个取出距离取安数距离装到这个壁里边然后结构体分析种有什么这个有VO是吧VO这个就是是是是是是是是是是是是啊是是是是图的数据啊数据模型原来我们叫必有就是就是商业数据模型就从数据顾取出来那个啊我不知道现在你们怎么叫了啊就这东西叫不叫必有从数据顾取出来是个必有必有可能还在转VO然后现在好像还有一个叫什么地T有地T有是吧我进入我看大家有人在权利说还有这玩意儿就就我都感觉不不过用了啊这各种偶尔有点多啊是吧你也这么转转去也反正也挺好的也挺好的那为什么这个这个必有跟VO它是不是应该有有什么关系啊对吧就咱们现在做的都是说完全都分开了跟这个类似机程和这个也体系都没有关系是吧就是我们这个VO和VO之间是一个在马转换的关系其实两个类之间没有关系是不是那我们其实我们在实际的这个业务实现里边我们这种喜带版的方式其实已经不受OP了如果真正的OP那这个操作这个一个操作一个数据的方法不应该在一起吗就是D也有跟死抓的对吧就是数据跟数据属性跟操作为什么是分开到就一个类里边我们把属性跟方法拆开了拆到两类里面这是反OP的对吧我为什么说把同一个同一个同一个比如说我们现在有一个有一个有一个优付表优点有个优点表然后有的优点病是吧还有个优点地有为什么是两类呢是吧应该有一个优点的类吗然后优点所有关于优点的东西是不是都应该在一起就就就就分开了还受OP吗就是分开随从两类是吧只一张就是一个类拆两类的把这个属性跟操作的方法把它分开了是吧其实我们实际上这么高已经是在一种这个反OP的思想里边再去运作了我们的服务段期待吗我们现在写的服务段在吗其实不是基于这个OP思想家的东西要不我说这个这个现在这个扎瓦特其实它是反已经慢慢地离开了它的初中了对吧包括这个后来不停的去搞这个接口不停的去加这个新的接口慢慢地又讲这个组合优于基层其实现在基本不基层了全是各种接口然后倒立到去嘛对吧这边也是这边的要回找步好多这个机内设计有问题那我就加接口然后通过这个不同的这个往回倒接口去去找然后我不知道大家有没有如果你放开自己的这个试叫比如说这个拍扫比如说这个拍扫多少拍扫过RUSH的对首先我先把结论说了就是刚才说那么多然后实际上就是拍扫过和RUSH的都是这个结果企业加接口这个不管是如果说在国务系的那个它这边里面没有用购的同学如果用购的话它那个定义没有类的这个东西它就是太棒了然后这个是个死抓的它只能是它定义的那个东西主要结果体而没有这个概念你可以定义一个结果体然后你可以定义一个接口然后这个结果体可以跟跟一个方法绑定然后方法可以实验一个接口什么意思呢什么转然后这个什么意思呢其实已经基本上就弱化了这种继承的就是继承的这种概念就是类的这种概念其实是什么你包括组装什么组装有一纪层那不就是说不让你纪层了吗就多通过组装了几句问题不要通过纪层了几句问题其实你像拍扫过RUSH的都在弱化纪层这个东西就是类的纪层这个东西现在新星的语言全弱化它了就没有这个纪层这个东西了你可以继承一个结果体因为继承这个东西就是我觉得说的对就是继承这个东西就是一种偶合而且是一个深偶合就是你一旦说这个继承字一个类之后这个东西你就永远就没法没办法就改了对吧然后有个最大的问题如果你说如果别弱智了儿子100%弱智合理吗就是咱先不说这个单纪层和多纪层的问题就是如果你是这个这个跌弱智了儿子就100%没办法就是类的纪层不像我们人不像这个所谓的人类比如说你人类这个东西你可能你父亲至常不高但不代表你至常不高这个东西不是完美纪层的不是说爸爸弱智儿子就一定弱智对吧急于是急于上不一定我说咱那个从渣王上来说渣王上来说所以当然你说你看但现实当中肯定不可理但如果说你渣王上类的设计你如果说付类上有个缺陷全世界都会死对吧是这个意思吧我要说这个是这个意思就是如果说跌弱智了儿子100%弱智因为你纪层自积类积类对赤这么设计的所以我说这个这么设计有问题吗就是当时就这么设计的但是对渣王就这样然后架构你说架构这个东西架构这个东西不管是多牛的大牛做架构有人能做到说就完全100%没有这个1.15%你在类的体系上设计一旦说在这个积类当中有一些东西设计不可理这东西就没法往回转现在这个渣王也是激重难反就是他原来的设计那你想想谁也不能说在这个20年前的设计在20年前的设计就能处把这个20年后全建设计一点问题没有不管是什么架构是什么水平也做不到这种设计你怎么可能说设计上一点问题没有了但是如果说有了问题在积类上你根本就没法往回找捕是不是你怎么找捕那现在我去取个例子比如说这个这个捕的那个Hobits上有个这个克龙方法是吧那个捣到Hobits上是有一个这个克龙方法的就是这个克龙方法呢你看GTK的实现我 大家应该都知道就是克龙这个东西有两种一种叫浅克龙一种叫深克龙是吧就是深考卫浅考卫那个东那个是是不是那如果说这个它已经有一个默认的克龙方法那默认的克龙方法应该是深考卫还是应该是浅考卫如果说我想加一个这个低深考卫那这时候这玩意就就很难理解了这个克龙方法本身没有上面没有彩虎它只有一个方法叫克龙是吧然后大家都知道这个默认的克龙是不肯是浅考卫我也不明白这种你说浅考卫这种克龙一意合在呢比如说你们手里有个面包我考卫走你的面包我还没等吃你咬一口面包少一口这叫克龙吗就是不敢去偷换概念了这个浅考卫的意义在哪呢这面包我我弄出来一个是吧我弄出来一个之后你咬一口我这也没一口啊那我不玩克龙了吗就克龙应该它不应该是说你咬一口我没了呀那它默认的时间就是这个时间啊但是我要想加一个深刻龙的方法那这个就很怪我寄成自己一个克龙那你说我要我要把这个克龙实现成深刻龙那这个味也变了就是说我可以自己写个类企实现一个深刻龙是吧那到底这个克龙方法代表深刻龙还请克龙呢你不写这个你不写都试谁也不知道了是吧对 只能知续可以但是这种变成一种约定了大家不觉得就是这个克龙普来的一定只能读出去那我要实现一个深刻龙出去我怎么跟其他人去图目呢就让咱咱是一个团队就是这个克龙方法到底是深刻龙还是浅刻龙大家都认为GDP是一个浅刻龙我不能改是吧那我要是写了跟类伏盖了实现了一个深刻龙出来那我得告诉全世界我这可是深刻龙用是吧你大家脑子里已经已经形成的固化思想是浅刻龙你这东西怎么弄了对您要不然你说你是浅刻龙方法还是形成新界口我的意思是这个就是咱是从这个从这个奥战的记忆上下来把这个克龙方法覆盖掉还是要单写一个深刻微距控就这怎么说的可以的如果浅刻龙可能就大家认为说这个不知道里边到底是个龙小龙是吧那你可能还需要再加一个方法再加一个方法原来的克龙方法又有个暖用啊原来这个积累上这方法干嘛用呢是吧这就很看而且积累的实现咱也不用了那你说积累里边它写了个东西咱也不用这是不是个错误实现是不是应该有个克龙接口啊比如说它如果是一个克龙的接口然后呢我们每个类去实现克龙接口是不是就好一点然后就大家说在这个多重机场了比如说有两个接口一个深刻龙一个浅刻龙我们就可以自己去实现这个接口我这个类实现的是深刻龙还是浅刻龙这样就比较清晰是不是就如果说这个咱是用接口接口的方式那不是在这个积累里面干了一个积程那这事儿好解决了就原来有个克龙接口我们再弄一个地步克龙接口然后我实现一个地步克龙这个合理就大家一阵子也能统一是不是你从这个角度来说这个当年为什么要在这个最高身上整一个克龙方法呢但是你退过退回20年那当然咱是上帝使角嘛退回20年让咱是个集咱也没那么不一定能想到这么多但是你OoP这种东西改不了积累谁敢动吗咱说这个这几个积累啊这几个秘密的加工师它也不敢动啊这晚上你动了之后对接口里可以做个组合呀其实组合接口也相当于说变相多重积程吗那个OoP里边还有一个很大的问题就是我们很难去做组织积程但是你又有这个需求啊你说这个混动汽车有加电混动是由于加电的是吧这个大家都知道这个这个油电汶那你说现实生活当中就有这玩意油电混动的汽车那你说油电混动的汽车我是不是一个多重积程的需求呢我既有油油电那你说这玩意儿不就是就是这个事吗你要说时间俩接口就好了好事件时间一个油级在时间一个电机但是你要机成类这玩意儿怎么这么就是按扎吧现在的玩法就是比如我机成的油舌我在实现一个电的接口是吧所谓的那个就是咱和OoP里边的多重积程时间就是语言级别让不可给你提供这种东西那么变相实现就是我机成自一个类的喜气在实现一个电口去也怪关系的我到底应该从油机成下来再加个电呢但是它不止燃料啊它发动机一步一样了就是那个油车的是气然有发动机电车是电发动机它不是说这个燃料是油和电对吧它是这个有油机有电机它发动机也还不一样它不是说只是说能源不一样是不是我以举个例子就这种多重积程你再扎在里边想就是用类的喜气也很难解决这种问题我刚才举着克隆的例例子是说在牛的人也很难在OOP的类的机程设计里边你做一个积类真的很容易积类的这是实质的位积这可惜你这种意很难去当区就有变化的时候在类的积程体系里边你没办法做这个检码你只能做家吧永远家还要去一直不曾拥有是吧因为你只能做家法不能动吗类的机程体系哪个动物啊所以从这个角度来讲这个OOP的是是是有这种这种问题存在的是吧所以我们在右上也不这么干更灵活对吗就我右上没有说这个说我进于一个很激烈然后再再拍成类然后再怎么搞对你右上咱们就觉得说这个数据是数据方法是方法不叫我们家数据要我们家方法简单粗暴有效是吧其实就没有什么干然后你像这个拍son go wash的都是这个你可以认为说它有点半面就是它说过我觉得它是面向对象里边其实面向对象里边OP里边最有用的是什么大家觉着一顾其实风装它有三个三大特点嘛风装多太继承其实风装是废话那谁不风装呢就是把这个这个细节隐藏起来是吧那这个风装这个东西你可能面向过程面向啥它都得风装然后呢就是继承刚才说了就是继承导致了现在这么多问题而其实OP最爽的地方在于多太对吧就是向上转型多太算的话这时候OP最爽了对吧就是多太比较爽其实你继承咋用的最多的性格就是多太所以这个拍son go wash的利用接口来实现多太然后用这个结构体来装出去他们全都是在这个玩法上若化继承其实从语言层面就是让你阻装不让你不让你去搞这么多的趣趣继承了这些东西去了从它的设计性上上有了接口你就能多太有接口之后你就可以多太了然后你要写并你就搞这个结构体就行了然后像这种通过这种设计是从语言层面上你也就不会去搞什么这个继承这个东西了然后其实这样的话你自觉的就会搞这个说这个组装优异级成但从其他语言的特性来说你就默认就会这么搞而不会去搞继承因为它继承不了啥结构体和结构体之间是可以这个所谓的继承了它所谓的继承也是组合从这种角度来讲其实这个因为购物是相对的来说购物是相对来说后出的语言吗然后如果你越了解购你会发现明显是说这个因为购是谷歌厨的谷歌对于加娃方面的投入很大的对加娃语言的这个了解你吃极其神谷了然后你当你生了了解后之后你会发现完全是针对加娃所有的缺点就是加娃有的基本上就是我能感觉感受到痛点够里边都没有就是它就是它的产生就是谷歌就是谷歌那么多年加娃的节然后它觉得加娃不爽它搞了个东西就在我的感觉是搞了个东西就完全把这个加娃的弱点全部给你干掉了我觉得购就是这么来的当你生了解之后你会发现测它娘的就是被针对了就感觉就是完全针对了这捣娃里边非常不爽这一块当地都爽了就是一下就爽了这种感觉特别明显然后因为谷歌在加娃方面有很多好用的东西比如说谷歌的那个光啊那个基础包里边有太多太多岭约最低的东西就谷歌的那个基础包是在过去过去我那个点点那岭约可以好几个版本了当你不知道这个有些发行的是什么的时候谷歌的那个东西都已经有了就在这个也没出之前好多这DK的未来的功能是超谷歌写的包的然后在早期这个便器的那个时候便器全单用这个谷歌的基础包在开发就大场都在用这个刮法来开发而不是金约这DK比如说即可那些东西也这么刺这些东西也都是金约这个谷歌的基础包去搞要不然就是这个再用一些这个阿发奇令的UtelsUtels里边也有不少这个好用的基础还是基础的方法吧是这样的所以那个Google在Java上面是很深度的甚至于这个便器然后谷歌还有一个这个我之前讲过这个WT谷歌甚至于说你写Java它给你便器成GS就是你可以用Java开发前后段全程杖Java开发开发完它把Java在外面便器成GS你想那个是它在我上学的时候就用它就已经有这种型了在我上学的时候它已经可以把Java写完了便器成GS后段是Java写前段也是Java写写完阿董就已经是这个水平了然后从这个设计上来讲我说了这个刚才说的这个就是结构体加方法加接口了这么一个模式实际我们现在使Java也是这么式然后再一个就是我之前也出了一个视频说了说这个Java的事就是实际上现在能跑在这位M上的语言可不少了就以后是不是Java其实都无忠要了对这GS是一个动态类型语言可以它是可以动态类型的就是我随意复职就可以变成了和类型然后以后在这位M上跑可以就是现在已经支持跑给动语言了然后你未来是不是Java其实你在这位M上可以写各种各样的语言我觉得搞不好后期的玩法师说Java现在这个背的包包太重了你会踩上新的语言来去搞但是搞完之后还在这个M上跑你说这都一叫不要Java可能都无所谓因为现在就有好一种各种语法藏的动器像Java现在不停的融入各种动器比如说这个B包你看有了浪达之后Java有这个B包有一些韩束式变成但是你说韩束式变成跟OK有关系吗这是个很大的问题就是我越来越觉得我写这个东西跟那个原来的味道越来越隔离对对口里还有个什么斯杀了是吧就是我感觉写的东西在晚越来越隔离了对就是口里还有一个什么斯杀了啊好像也是在这个M上跑的我记得好像是那个扛卡是那个原来的那是什么斯杀了那个什么斯杀了家扎往和对天对是不是这么多是不是我这个独一对对我记得扛卡就是用这个原来但是他也是跑在这个M上之上对吧Loss对对这位M现在扎瓦最厉害的是他的这位M随机就是在这个虚米机上跑就是拉地规则我也好这位M也好这位M也足够的证明自己就在虚米机上的性能扎瓦条的已经是非常
