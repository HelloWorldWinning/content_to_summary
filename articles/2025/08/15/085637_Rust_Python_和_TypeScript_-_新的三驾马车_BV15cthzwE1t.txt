Timestamp: 2025-08-15T08:56:37.174095
Title: Rust、Python 和 TypeScript - 新的三驾马车 BV15cthzwE1t
URL: https://b23.tv/l3gjajk
Status: success
Duration: 11:23

Description:
以下是对文本内容的总结与提炼：

### 核心要点总结

**核心观点：**
AI 的兴起正驱动软件开发向理念导向编程范式转变，开发者将与AI协同，聚焦高层设计与问题解决，而Rust、Python和TypeScript凭借其强大的内省与生态系统，成为这一新范式下的核心语言。

**总括框架：**
本文论述了人工智能的崛起如何引发软件开发范式的根本性转变，从传统的以代码为中心转向以“理念导向编程”(IOP)为主导的模型。这种转变重新定义了编程语言的选择标准、开发者的角色，并凸显了工具内省能力和生态系统支持的重要性。

---

### 详细内容提纲

**一、未来编程语言新“三驾马车”：Rust、Python 与 TypeScript (RPT)**

1.  **预测与背景：** 作者（引用Nikker Masakis）预测Rust、Python和TypeScript将成为未来的主流主导语言（排除利基市场）。
2.  **驱动因素：** AI的日益普及将削弱开发者对单一语言的“忠诚度”，语言选择将转向基于“基本原理”的决策。
3.  **RPT 的强大基本原理：**
    *   **Rust：** 适用于系统软件及对效率至关重要的领域。
    *   **Python：** 拥有强大的数学和数字库，非常适合实验和研究开发。
    *   **TypeScript：** 适用于浏览器端、后端（如Node.js）及其他许多领域，可原生运行。
    *   **共同优势：** 均提供强大的内省能力、健壮的类型系统（正确配置下）和可靠的依赖管理。

**二、编程范式的根本性转变：理念导向编程 (IOP)**

1.  **AI 的推动：** 大型模型正推动软件开发走向“想法导向”或“理念导向”编程。
2.  **IOP 的定义与区别：**
    *   **IOP：** 关注项目背后的“想法”和“目标”，而非具体语法细节。
    *   **与“外部编码”区别：** IOP强调对设计关键方面的思考，将大量繁重工作委派给AI工具，开发者进行审查、微调与原则提炼。
    *   **开发者角色转变：** 从“程序员”转变为“总架构师”或“导师”（如同开源导师的角色）。
3.  **IOP 对语言选择的影响：**
    *   **过去：** 基于开发者对语言的熟悉度（如作者过去默认选择Rust）。
    *   **现在（与AI协作）：** 优先考虑库、基础性能、集成平台，追求直观和高层抽象，以最大化AI的成功机会。
    *   **结果：** 倾向于混合使用Python（数据/AI）、Rust（性能关键）和TypeScript（前端/全栈）。

**三、支撑 IOP 的关键技术与生态**

1.  **内省（Internal Information）的重要性：**
    *   **传统计算机 vs. 大型模型：** 传统计算机确定性高但不容模糊，大型模型可容错且概率性。
    *   **高级内省的价值：** 保护领域知识，引导开发者（尤其AI协作伙伴）走向成功，弥补AI在记忆和全面性上的不足。
    *   **RPT 的内省能力：** Rust、TypeScript和Python（需MyPy配置）均拥有良好内省。
2.  **生态系统与包管理器：**
    *   对理念导向编程至关重要，能高效构建和管理依赖。
    *   **RPT 优秀表现：** Rust 的 Cargo、TypeScript 的 NPM 和 Python 的 UV。
    *   **优先级：** 语法细节和不明显的编程方案变得不那么重要，而错误信息和准确指引变得至关重要。
3.  **错误信息与 AI 协作：**
    *   **Rust 经验：** 投入大量精力改善错误信息，使复杂问题易于解决。
    *   **AI 处理错误：** 某些错误AI根本不会犯，另一些可根据错误信息快速纠正。
    *   **未来：** 更大的空间通过“模糊词汇”来指导和教育大模型，提高沟通效率。

**四、IOP 带来的变革与展望**

1.  **降低强大工具的门槛：** 理念导向编程并非根本性新概念（大公司早有类似架构师角色），但AI的出现使其变得更易实现。
2.  **开发者角色与体验的转变：**
    *   **担忧：** 有人认为编写代码时间减少会使编程变得无聊。
    *   **作者体验：** 通过与AI（如Claude）进行头脑风暴、设计和规划，能获得相似甚至更好的体验，专注于大局。
    *   **效益：** AI可自动化许多繁琐的细节工作（如文档、样板代码），让开发者专注于高层设计和创新。

---

### Mermaid 概念图

<Mermaid_Diagram>
graph TD
    A["AI 日益普及"] --> B{"驱动编程范式转型"};

    subgraph "未来核心三驾马车"
        B --> C["理念导向编程 (IOP)"];
        C --> D["Rust"];
        C --> E["Python"];
        C --> F["TypeScript"];
    end

    subgraph "IOP 对编程的影响"
        C --> G["语言选择优先级变化"];
        G --> H["聚焦高级抽象与平台集成"];
        G --> I["融合使用 RPT"];
        C --> J["开发者角色转变"];
        J --> K["从编码者到 '总架构师/导师'"];
        J --> L["与 AI 协作"];
    end

    subgraph "RPT 语言的核心优势"
        D --> M["效率与系统编程"];
        E --> N["数学与数据处理"];
        F --> O["Web 与多领域原生运行"];
        D,E,F --> P["强大内省"];
        D,E,F --> Q["健壮类型系统"];
        D,E,F --> R["可靠依赖管理"];
    end

    subgraph "支持 IOP 的关键特征"
        P --> S["高层内省 (领域知识、指引)"];
        Q --> S;
        R --> T["生态系统与包管理器"];
        S,T --> U["错误信息与准确指引"];
    end

    U --> V["AI 快速纠错"];
    V --> W["降低工具使用门槛"];
    L --> X["自动化琐碎工作"];
    X --> Y["开发体验提升"];
    W --> Y;

    style A fill:#4CAF50,stroke:#333,stroke-width:2px,color:#FFF;
    style B fill:#2196F3,stroke:#333,stroke-width:2px,color:#FFF;
    style C fill:#00BCD4,stroke:#333,stroke-width:2px,color:#FFF;
    style D fill:#B0C4DE,stroke:#333,stroke-width:1px,color:#333;
    style E fill:#B0C4DE,stroke:#333,stroke-width:1px,color:#333;
    style F fill:#B0C4DE,stroke:#333,stroke-width:1px,color:#333;

    style G fill:#FFD700,stroke:#333,stroke-width:1px,color:#333;
    style H fill:#FFEB3B,stroke:#333,stroke-width:1px,color:#333;
    style I fill:#FFEB3B,stroke:#333,stroke-width:1px,color:#333;
    style J fill:#FFD700,stroke:#333,stroke-width:1px,color:#333;
    style K fill:#FFEB3B,stroke:#333,stroke-width:1px,color:#333;
    style L fill:#FFEB3B,stroke:#333,stroke-width:1px,color:#333;

    style M fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style N fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style O fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style P fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style Q fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;
    style R fill:#90EE90,stroke:#333,stroke-width:1px,color:#333;

    style S fill:#F8BBD0,stroke:#333,stroke-width:1px,color:#333;
    style T fill:#F8BBD0,stroke:#333,stroke-width:1px,color:#333;
    style U fill:#F8BBD0,stroke:#333,stroke-width:1px,color:#333;

    style V fill:#C5CAE9,stroke:#333,stroke-width:1px,color:#333;
    style W fill:#C5CAE9,stroke:#333,stroke-width:1px,color:#333;
    style X fill:#C5CAE9,stroke:#333,stroke-width:1px,color:#333;
    style Y fill:#8BC34A,stroke:#333,stroke-width:2px,color:#FFF;
</Mermaid_Diagram>

Content:
我们来看电文章我来讲Rostpison和TypeScript新的三架马车作者是大明天的Nikker Masakis就是他的原文宁连接就已经可以看下了原文我们来看他的详细内容独家爆料我猜测Rostpison和TypeScript将从未未来的主导语这里面不包括疑众市场那里面情况比较符来一点这个弄点很简单AI变成的日益普及将会削弱人们对变成远的终程度将其从一个通常带有部落主义涉及的决定转变为一个基本原例的决定而这三种远的基本原理在我看来非常强大Rostpison对系统软件或者是效率至关重要的领域而Pinesis的领域有强大的数学和数字库生的系统并且非常适合实验和远行开发而TypeScript当然可以在涌篮器外国以及其他许多领域原生远行并且他们都至少的正确配置情况下提供强大的竞产内心和辨谍的依赖管理让我们阻点了抛弃这个能问题一个人物自然正在推动我们走向想法导向或者叫里面导向变成使用大模型进行各电目前是一种相当不平稳的体感就是用大模型去冰冰冰要什么的话还是不平稳的这种节但我认为长期去述是足够清晰的未来肯定会是这样的我们正在看到一种像心变成放置转变的趋势我说带出号码最近开始把它称为里面导向变成顾明是一里面导向变成是一种比首先且最主要关注项目背后里面的变成法式你就在想法里面有什么想法然后就把它变成出来我为什么说里面导向变成而不是平衡感觉变成而不是为什么不叫外部扣定呢对我来讲他们是既然不同的外部扣定是暗示着一种对具体细节的猛不惊心就像模糊的从事AI会不会手术做点内事这样的事情那就像把AI当成精明或者是普人来对待而我认为整两种做法都没有好处里面导向变成它才是这样的八进的变成里面导向变成相比之下确实它上是变成当你的角色比如说不成周围成续员你更向手机加入师你的编码工具就向你的学图你思考的是目标以及设计的关键方面你致允清晰的计划并将大量防重的工作围派给工具然后审查他们输出进行微调更重要的是把这些微调体念成持久的原则当问题的某些部分变得很几手的时候你会捐其秀子亲自动手进行调示和教授问题如果你已经在夜间打拼了一段时间这种描述会让你感觉很熟悉这本质上就是手机过程师的角色这也是我认为一个开源导师你应该所做的事情的侠法描述面向里面变成改变了预言选择的优先机过去当我构建软件项目的时候我同场会默认选的RUST这并不是说RUST是所有情况下的最佳选择而是因为我最了解RUST所以使用它的时候我的开发商率最高我只有在遇到能够提供令人幸福的优势的时候才会成为其他远当我跟AI住手一起开发项目的时候我发现我的适合方式会优秀不成我会更多的口律和用的库我的基本性能率就以及我预期要集成的平台我希望一切都尽可能的直光和更加高层一点因为这样就能够让AI过得最大的成功机会并最大的减少我深入研究的比较结果就是我最终会混合使用PICEN它不被移植GRAZEN在其他情况下会使用GRAZEN为什么不认选用RUST呢?我当然很喜欢它但更重要的是我知道它的内心系统能够提前不获除并且我知道它的整体设计能够性能前内争专用相对比较少如果我随后在云端去运行可以干嘛那会降低我的成本如果我在我的台式机上去运行它会给Microsoft R6留下更多的内存分件你看在那些系统对于理念导向的编程机体重要大型的预言DAMO型就彻底改变了我们对计算机的期望典型的计算机能够超高速的交叉引用海量性性并执行确定性计算但并对马帆一丝模糊性也会出手不撤了相比之下DAMO型可以存医药的去复有错误性和试考但他们并非直接呈现在以前的数字之次有限的除非这些数跟去年中更深低估的模糊模式相符这方面他们并向人类我猛为应对此开发的技术比如Ragger或者是GEM-MCP福祭大多是试图他们可能觉得有用的信息直接的呈现在他们面前但当然程运人早已经发展出这种因对人类注意力下载和方法的内信息特别是高级的信息基本内信息可以补作小错误例如内信错误的参数但是Ragger和Tapscript等高级的内信息可能保护领域丑都没知识并且引导你走向成功比如说使用Ragger的美举可以同时保护程序所处的状态以及状态相关的数据这意味着你不会意外地去读局当前不相关的指挽都对你很重要当对你的AI协作伙伴来说更为重要因为他们没有你那样全面的记忆也很难记住最美事情值得注意的是Ragger、Tapscript和Python都拥有相当不错的内信息对于Python你需要进行配置才能使用MyPy和Python生态系统和包管理器比一晚任何时候动动的重要生态系统和包管理器对于理念导向的变成也至广重要当然云有一个强大的库来购件下某一只是家属器但它以前也放弃了一个更大的比较因为你必须花时间熟练掌握库的工作方式现在也不再是个大问题了比如说我一直在购件一个家库运行不够我在家上使用我想天家不幸宣扰我尝出了高层一点的概念当我能够依靠Claw的管理第三库的使用结果非常棒这次最终是Rusty Top 3和Python都拥有相当不错的包管理器分别是CacoNPM和UV所需的语法问题和不明显的变成方案就不那么重要了但错误信息和准确的指引人很重要2016年我和Iron Tourine在Rusty.com发表了主题演讲仓宝、推行、议论性、产业我们的基本观点是Rusty中有很多错误其实很容易解决但前提是你得知道窍门如果你不知道窍门他们就可能成为一个非常彻底的战略甚至让你完全放弃这么一眼经过你问题的大量可能只是在正确的位置听讲一个信号就行了在Rusty中我们投入了大量的精力的解决这一问题要么通过改变原本身要么通过改变错误消息了直到你成功我观察到对考字来说情况就不一样了其中一些错误它根本就不会犯另一些错误它会犯但随后可以根据错误消息快速来纠正这很好如果我手动必携带马我会验反一遍又一遍的因为相同的重复性更改但如果是靠着这做我就没那么在意了也许还能得到一些额外的收获比如说我现在可以更清晰地看出哪些变量被试明为留着到但所有这些都重要的前提是Klaude能够交流问题要么是因为它成去年农学到了要么是因为错误消息足够好能够引到它成功不过我非常感兴趣点是我认为我们现在有更大的空间来提过模糊的词的比如说这里有三中可能的修法但你会必须决定了还懂最好的并且让大魔形来教育它当然原知大魔形降低了强大工具的门口规根结底实现你面取农的变成并非根本性的心受当之前要以这种方式工作你必须使一家大公司的手续功能师在这种情况下你可以让初几个人使去摸索会进到一个文档的初期出息现在可以的条件都不一样了这种工作方式变得更容易实现当然这确实引发了一些问题手续功能师之所以从于手续功能师部分原因是看完拥有丰富的经验可以解决年轻的功能师能以同样的方式去工作吗我认为可以但是需要一些时间来找到交受人们这种判官力的举家方法以前这从来不可能因为工具不太但同样这种工作方式也因为这里花在编写代码和整个各个部分的那种心流这种时间更少有人说这种变成并的无聊我并不觉得我发现通过跟Cloud进行图漏风暴和设计以及写出我的计划和FC我可以获得非常相似甚至更好的体验由于Cloud可以编写细节我们专注于大局怎么去形结这种课诗过程中的许多繁琐工作都以一出当这同样像是我们未来会更深度的就是说的确有一点我是非常的有众的成长就是很多系列上面的东西AI可以帮你去做了比如说我要把一个东西放在地上上面之外要写很多的什么说明RID密制类的都它都给你搞而且都是很正确的方式看起来这就非常的棒很完善包括跟Icon这么设计什么之类的全跟你弄好这就是非常棒的一点这是整片文章的内容
