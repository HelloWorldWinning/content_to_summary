Timestamp: 2025-08-16T01:16:46.627444
Title: GPT5 VS Claude｜深度测评｜AI 编程产品中究竟该选择什么模型？｜Cursor &amp; Claude Code BV1aHbVz2EDY
URL: https://b23.tv/nD5Q7l8
Status: success
Duration: 16:29

Description:
### 核心观点总结

尽管GPT-5在语义理解和成本效益上有所优势，但就编程这一垂直领域而言，Cloud 4 Sonnet凭借更强的代码生成质量、功能完整度和多文件处理能力，目前仍是更优的选择。

### 总结的总体框架

本内容围绕GPT-5与Cloud 4 Sonnet两大AI编程模型，从实际开发者的视角出发，通过多维度、真实项目场景的对比测试，深入剖析了两款模型在编程能力上的优劣，最终提供了基于性能、成本和使用场景的综合性选择建议。

### 结构化概要

**一、背景与模型介绍**
1.  **GPT-5发布与关注点：** 熬夜关注GPT-5发布，个人更关注其在编程领域发展。
2.  **测试模型版本：**
    *   **GPT-5系列：** GPT-5（实测为官方GPT-5 Mini）、GPT-5 Mini、GPT-5 Nano、GPT-5 H（官方GPT-5）。
    *   **Cloud系列：** Cloud 4.1 Opus（未实测，成本过高）、Cloud 4 Sonnet（主要实测对象）、Cloud 3.5 Highco。
3.  **测试环境：**
    *   **AI编程IDE：** Cursor (可能影响Cloud上下文发挥)、Cloud Code (Cloud更适合)。
    *   **测试项目：** 基于实际开发中的全新小项目，覆盖前端、后端、整体架构，而非简单Demo。
4.  **编程领域背景：**
    *   **Cloud曾是编程领域无冕之王：** 核心定位是Coding，定价高但认可度高。
    *   **Cloud模型的重要性：** 拒绝为Vscode服务导致用户流失，专业开发者首选支持Cloud的AI编程产品。
    *   **营收对比：** OpenAI年营收120亿美元，AI BAN 50亿美元，但AI BAN在API调用（尤其Coding相关）营收超OpenAI，显示编程领域消费潜力。
    *   **OpenAI对编程的重视：** GPT-5发布会一半时间聚焦编程。

**二、多维度对比测试结果**
1.  **项目基础框架与架构优化：**
    *   **Cloud 4 Sonnet：** 生成代码完整性高，扩展功能多（暗色模式、示例、文档），能快速修复启动问题，提供部署方案建议。架构并非完全预期，但完整度高。
    *   **GPT-5：** 完成任务，优化架构，但完整度低，启动需多次修正。无建议。
    *   **结论：** Cloud 4 Sonnet胜出（完整性），GPT-5架构规划可，但生成有欠缺。
2.  **页面UI生成（基于需求）：**
    *   **Cloud 4 Sonnet：** 页面功能和逻辑完整，细节处理好。风格固定（橙蓝紫，有动效），功能性强但审美疲劳（建议提前约束样式）。
    *   **GPT-5：** 无特定风格（优点），功能简陋，样式统一但细节少。
    *   **结论：** Cloud 4 Sonnet胜出（功能完整度）。
3.  **页面UI生成（基于风格/参考）：**
    *   **GPT-5：** 样式生成能力优秀，能很好地学习和重构样式。但功能逻辑部分仍远逊于Cloud。
    *   **Cloud 4 Sonnet：** 样式生成能力尚可，但不如GPT-5美观，学习参考能力强。
    *   **结论：** GPT-5在样式生成上胜出，Cloud在功能逻辑上保持优势。
4.  **CRUD接口生成与对接：**
    *   **Cloud 4 Sonnet：** 接口生成几乎无问题，复杂接口两三步解决，自动对接前端。
    *   **GPT-5：** 简单接口尚可，复杂接口问题多，需反复修改，无自动对接。手动对接也有小问题。
    *   **结论：** Cloud 4 Sonnet显著胜出。
5.  **接口学习与生成：**
    *   **两者：** 学习标准接口后，生成类似接口表现均不错。
    *   **GPT-5：** 当接口逻辑与示例差异大时，问题增多。
    *   **结论：** 两者均可，Cloud更稳定。
6.  **后续开发中的使用体验（单/多文件处理）：**
    *   **单文件处理：** GPT-5与Cloud 4 Sonnet表现相当。
    *   **多文件处理：** Cloud 4 Sonnet表现通常更好。
7.  **上下文长度：**
    *   **GPT-5：** 上下文长（官方400K，Cursor中272K），不易触及上限。
    *   **Cloud 4 Sonnet：** 上下文短（200K），且Cursor中实际可用更短，易降智。
    *   **结论：** GPT-5在此方面有显著优势。
8.  **原型图生成案例（小众需求）：**
    *   **测试方法：** 优化PRD文档 -> 优化PR提示词 -> 基于两者生成原型。
    *   **GPT-5 (Mini)：** 功能原型简陋，不完整。
    *   **GPT-5 H (官方GPT-5)：** 速度慢，功能相对完整但简单，样式统一。唯一做了暗色模式切换。
    *   **Cloud 4 Sonnet：** 任务拆解，文档自动写入。生成原型功能完整，细节多，有移动端适配，样式统一（蓝紫色，有小动效）。
    *   **结论：** Cloud 4 Sonnet在原型图生成（本质代码生成）上显著胜出。交叉测试也表明Cloud生成文档结构简单但内容完整，GPT-5文档华丽但代码生成细节不足。

**三、总结与使用建议**
1.  **模型定位：**
    *   **Cloud 4 Sonnet：** 编程领域的无冕之王，代码生成能力、功能完整度、复杂问题解决能力强。
    *   **GPT-5：** 更趋向于通用性理解的大模型，语义理解能力极强，但代码生成能力（尤其细节和完整性）不足，被称为“语义巨人，行动矮子”。
2.  **核心优势与劣势：**
    *   **GPT-5优势：** 语义理解强、价格更低、上下文长度长。
    *   **GPT-5劣势：** 代码生成质量不足、多文件协作差、功能完整度低。
    *   **Cloud优势：** 编程能力强、代码生成质量高、功能逻辑完整、复杂问题解决强。
    *   **Cloud劣势：** 上下文限制（尤其Cursor中）、价格较高、UI风格固定。
3.  **使用建议：**
    *   **按量计费产品（如Cloud Code）：** 可考虑通过M-C-P服务器集成GPT-5作为辅助，降低成本，分配部分编码任务给GPT-5。
    *   **按订阅计费产品：** 仍优先选择Cloud。
    *   **适用领域：** 以上结论仅限于编程领域。

<Mermaid_Diagram>
graph TD
    A["AI编程大模型对比：GPT-5 vs Claude 4 Sonnet"]

    subgraph "测试模型"
        B["GPT-5 (实测: Mini/H)"]:::gpt5-model
        C["Claude

Content:
Hello 朋友们 GPT5发布了我也是熬夜看了它发布会因为这些避缘大模型的大版本迭代总是令人期待的好营允 综合来看GPT5是一个优秀的版本迭代但是我个人更关注它在编程流域的发展这两天有很多博主在称赞GPT5的编程能力成其常过了Cloud真的是这样吗那我们是否要将主力模型切换到GPT5呢只看各种跑分的话GPT5几乎全面超越了Cloud在内的所有模型稳聚数据第一但其实做平常的前提是真的去体验而不是只看数据编程流域更需要大家牵声去体验一下那没有第一时间录制视频介绍GPT5是因为我这两天在实际开发反应中都尾度牵声测试了一下主要还是针对GPT5和Cloud的差异GPT5包含了GPT5GPT5 miniGPT5 Nano可以简单理解为高中低三个版本我使用的是GPT5而Cloud的目前是前几天最新发布的Cloud Stain E-opOS和背售好评的Cloud 4-Signat以及Cloud 3.5 HIGHCO突然也可以理解为高中低三款模型Cloud 4.1opOS无一是最好的网上有很多Cloud 4.1opOS和GPT5的对比但我这里使用的是Cloud 4-Signat因为大多数人在实际开发场景下并不会去使用Cloud 4.1opOS成本太高了对比起来没有太大的意义我们就按照实际开发中最长会用到的Cloud 4-Signat与GPT5做对比这样的话谁好用用谁很简单的道理使用的Ai-bend产品分别是CursorCloud的扣的这两款最继代表性的产品主要是因为Cloud的扣的中的Color mode使用上下文将得赶紧而Cursor会出于功能脱钻性衡量上会有很多内置提示词某些场景上会影响Cloud的发辉这也是很多人说Cursor中使用Cloud的降致的点有好有坏吧这不是本期的内容重点所以两者中方来看是比较合理的前一阶级这也是大多数朋友们用的最多的两款产品显示环境就是我在实际开发中的任务那由于我前方都做并且是基于我在做的一个新的小项目去使用的如果仅仅是选择几个方向的编程但Demo去对比的话是没有实际参考意义的那么前这个测试无论是前段界面后段逻辑以及整体架构上都可以兼顾到但是由于不是使用Demo测试的我并不能直接给大家看待嘛只能和大家聊一下我个人在多方面对比较的结论希望大家可以理解最后也会给大家提供一个相对指观的小例子大家可以自行品判那本期视频虽然是个人观点但绝对保持保证供大家参考其实在GP5发布之前Cloud的无疑是编程领预大模型的无免之王因为从Cloud发布以来一直都把Coding放在了核心位置收效也是明显的尽管它的定价很高但依然获得了认可比较有共时性的一句话是TOLYCloud所有的AiBAN成产品都是扯蛋这句话并不是微延宋婷我们可以通过前段时间Cloud拒绝为温的Serve提供服务而导致温的Serve用户大量流失这一事件就可以看出Cloud模型的重要性其实谴值到目前为止绝大多数专业开发表在选择一个AiBAN成产品付费之前第一点是看它是否支持Cloud的我们可以来看一张OPENI和AiBAN的2.5年营收对比图OPENI年营收在120亿美元而AiBAN是50亿美元有很差距对吧但是从营收购成上我们可以看到AiBAN在API调用的营收是要超过OPENI的而API调用购成中仅仅是Coding和Github口牌类两者的API调用消耗就有14亿美金大家可以评评对什么概念在GPT5一个对话时的方向不会上其中一半时间都是在介绍GPT5和扣病相关的内容显然OPENI也意识到了扣病的重要性准备去用GPT5和Cloud在编程领域达到太极究竟哪个模型更适合编程环境呢我们来看看多一度对比的结果由于我写的是一个新的项目所以我将我想要写的项目介绍以及我想要使用的基础旧站都写带了提了词中注意我只写了相关的旧站并没有免确给出一个架构规划然后我在Cursor中分别使用GPT5和Cloud4SANNIT让其声成项目基础框架并且帮我优化整体架构最终Cloud4SANNIT使用了我说的旧站帮我生存带吗并且帮我扩充了很多内容比如量色按色模式都严切换还给了一些势力以及文档在第一次启动时有一个配置项有问题包括了然后我又让其查找问题并且修复最终成功启动了项目虽然整体架构并不是完全按照我预期想法生存的但是完整性非常高我甚至需要删掉一些不必要的内容来降低KR的复杂度最后他还给了我一些建议由于这是一个NES的GS搭配Presima.org的项目他在生存完之后还选了我部署方案如果走Soulice方案的话提醒我需要从爱指变于行食环境导出Presima客户端相当不错而GP5同样完成任务也都是用到了我说的一些旧站并且帮我优化了架构活充了很多内容但完整度并不是很高启动因为缺少一些内容包错了然后我就让他反复修改了很多次才启动成功也没有给我一些建议但是对比之前的GP4OGP4.1明显要好上不少这一趴KR的4Soulice圣出但是可以看出GD5的整体项目架构规划上还是可以的就是生成不太给力然后我就花了一些时间旅乐率项目几乎架构把两分代码保持一致这样就又是处于同一个起砲线上那我又简单输离了下需求然后将需求落实到文档上让两个模型分别继于文档开始写业面最开始我是让两个模型继于需求帮我一次性输出相关的业面最终KR的4Soulice圣存业面还是相当完整的包括一些逻辑交互的细节也都很好就是业面吧也不能看就满满的KR的风格因为大家都知道如果不使用其实此约束KR的圣存的建议样式只是让它基于需求去生存一个好看的见面这个时候KR的圣存业面会十分格是广比如它会给你搞点见面色以及浮夸的小动效如果大家用多了就知道不约束主题色的话大概就是橙蓝子三种颜色选严纵见面但是由于功能完整度很高所以出看整体是不错的就是我个人用KR的生存的多了也就看逆了所以建议大家用KR的写面业面的风格主题色傻的都提前在提示词写好然后是GPT5GPT5生存业面它不使用见面色这一点还是不错的就是吧业面中很多功能向都十分检陋业面的样式还是比较统一的有一些小细节但是不多那这一趴KR的4Soulice再次圣出随后我有选中几个业面给出一些风格以及样式的提示词让两个模型分别去重够这个业面哎这次GPT5的样式生存相当不错KR的4Soulice也还行但是明显不如GP5生存的样式好看但还是同样的问题GPT5的业面功能逻辑部分差了KR的很多我还尝试给出一些业面样式参考让两个模型分别去生存这个时候KR的4Soulice的学习能力很强生存的业面基本能够和我给的势力保持一致但是GPT5就不太行了其实给大家介绍见面UI生存的时候大家应该能够感受到KR的逻辑生存能力是要强过GPT5不少的当然之前只是业面的功能逻辑我们把几个业面的样式调整好之后再次将两份代码保持一致然后同时测试了两两个模型分别具于需求和业面生存相关的CIRU立接口最终的结果是KR的4Soulice生存的接口几乎是没有问题的有一些复杂接口有点小问题但是一般都能够在两三步内解决并且KR的还在接口生存后帮我自动做了业面接口对接而GPT5生存的简单接口还好稍微复杂一点就会有各种问题修复时也需要反复修改很多次也没有帮我做一面接口对接生存完接口调整好之后我又让它去手动的做一面接口对接因为会涉及到多个文件的修改这里同样还是会有一些小问题存在需要再次进行修复调整才行之后我还测试了熟写一个标准接口让两个模型学习并且帮我生存其他的类似接口这次两个模型的表现都很不错有点小侠丝也都很快就解决了但是一旦接口螺线和势力接口不太一样时GPT5的生存接口存在一些问题需要经过不但修复才行这是前期开发中我刻意使用两份相同代码分别用这两个模型测试的结果在后续的开发中我没有再使用两份代码同步测试而是进入正常的开发流程用Curser做主力开发比如声称韩束、螺线油画、器杆样式调整接口、修复Bug等等等等和我日常使用APP成功具没差区别只是这中间我会经常性的切换两个模型去使用同时我还会使用Cloud Code的达达辅助一般情况下当我觉得GPT5处理内容处理的比Cloud 4S onnet好时我就会用Cloud Code再去跑一遍类似的逻辑以确保这种场景下不是Curser影响了Cloud模型的发挥在这个前提下我发现GPT5在单文件处理上其实是和Cloud 4S onnet不相上下的但是只要业务涉及到多个文件Cloud 4S onnet的发挥往往会更好一些但是当多个文件的上下文过大时或者是持续的在一个差的面板中和大模型交互上下文达到了一定的量Cloud 4S onnet的能力会断压事实下降这点在Cloud Code中还不是很明显但是在Curser中会非常明显因为Curser的一些功能集成导致内置的体制则很多其实在Curser中使用Cloud模型我们能够真正使用到的上下文长度是要比在Cloud Code中短很多的所以在Curser中就会很容易触碰到这个界限很多朋友不是很注意这个问题所以就会实常感受到降致的体验反观GPT5它的上下文长度要比Cloud的长很多OPEN AI官方给出的最大上下文长度是400KTOK而Cloud则是200KTOK差了一半尽管在Curser中GPT5的最大上下文长度是272K这依旧要比Cloud的长了很多所以GPT5反而不太容易触碰到这个界限这点也是GPT5的优势由于之前的观点无法让大家指观的看到所以我不充一个小案例但是如果看过我之前的Curser教程视频的话就会知道我在上期Curser视频某位演示了一个原型图生成的案例这是我之前随便想的一个关于犯企时中的产品核心需求结果很喜欢用这个案例去侧品模型因为这个需求足够小重市面上没有极其出色的产品能够给到大模型参考所以结果也会更真实一些而且让其生成原型其实本质上也是在写代嘛我们现在在根本路创建一个PRD文档放进去我的核心需求然后让大模型去优化再在根本路下创建一个PR文档放进去一份原型生成的基础提示词再让大模型居于优化后的PRD文档去优化这个PR提示词文档最后让大模型居于PRD需求文档和PR提示词文档去生成这个产品需求的原型界面我分别使用GPT5和Curser的四桑奈特生成了一份原型我们来看一下过程和结果在使用GPT5的案例中可以看到第一次我让GPT5帮我优化PRD文档他确实帮我优化了但是他并没有给我直接写入PRD文件所以接着我让他做了一个邪路操作然后是优化PR提示词文档最后是基于PR提示词文档和PRD需求文档去生成原型我们来看一下GPT5优化的需求文档和提示词文档其实可以看到这份PRD文档对比我们优化前的那段核心功能看上去补充得很完整提示词文档对比优化前的那些描述也很不错我们看一下生成的结果很令人震惊对吧一共生成了十一个页面他除了给了个页面三选以及评过边框生成的还不错之外功能原型太假漏了甚至都不是很完整二里说不应该这样的所以我仔细检查了下才发现原来模型用错了PRD终GPT5系列的模型和OpenAI官方名字不一样官方的GPT5在PRD终应该是GPT5H而我用的是GPT5对表到OpenAI官方那边就是GPT5Mini然后我就又切换到GPT5H重新走了一遍流程这次生成的速度明显慢了很多不过效果好的话也可以接受可以看到这里依然是我手动让他去写入文件并没有给我自动写入其他的流程都一样我们看看生成的PRD终究文档和PRD词文档明显要比之前的版要详细很多OK看他最终生成的原型结果嗯虽然功能依旧有些简陋起码样式还是比较统一的功能也是相对完整一共生成了8个页面但是对比我上一期视频中使用Called3.7S上的圆形除了页面多了几个单身页面质量感觉还不如Called3.7S那我们接下来再试试Called4S还是团案的步骤可以看到这里Called3进行了处理他将体制词拆解成任务步骤然后一个个执行最终优化后的PRD文档也直接帮我写入文件了后续优化PRD词以及最终的圆形生成也都拆解了任务步骤逐步生成这个其实不是Called的能力而是Called3的内部针对Called3模型有很多特殊处理Called3很多功能是指质是Called3模型的他的心态就是报警Called3的大腿当然Called3也为此放弃了Called3模型的清访调用我们检查下最终优化的需求文档和其实词文档其实我们可以明显的看到抛开内容不论Called4SSanite生成的文档格式上是比较简单的没有GP5那么多样化GP5生成的文档使用了很多麻辣达格式不过Called这个文档看内容其实也都涉及到了OK我们来看看生成的原先结果我只能说没有对比就没有伤害一共有10个页面先不说界面功能上是10分完整的还多了很多细节还有移动端的蔡兰兰倒黄兰至于页面风格也是很一致的大家可以看到这就是我之前说的标准Called的风格蓝紫色见面加上这小动效我现在都对Called的升红页面硬机了不是说不好而是看逆了但功能是非常完备的交互也有我们刷新一下可以看到这个专注结束页面还给了点冰分的落与效果给大家看这个案例是因为它不像光网落地业或者是摊吃舌内的东西这其实是一个相对来说比较贴合实际的需求而圆形生成本质上也是代码的生成是具有一定代表性的你可能会质疑是不是提示辞幽画环节的问题我可以很负责的告诉大家有一点点但真的影响不大不信的话我还进行了交叉测试我们可以基于GDP5害优化的PiaD文档以及Pia提示辞文档让Called 4Solmet模型升红圆形同样也可以基于Called 4Solmet优化的PiaD文档以及Pia提示辞文档让GDP5害模型升红圆形多说无意我们可以直接看看结果这是基于GDP5优化的文档Called的生成的模型结果中图标是有些问题的整体建议样式比较一般倒计时这个页面有很大的问题但是可以看到整体的页面功能依然生成的非常细致再看一下基于Called的优化的文档GDP5生成的圆形这个生成怎么说的背景颜色倒是还行整体功能也是庇还了就是页面略畏有一点点简单不是简单而是简单而且手机框和内容没有失配好但是值得一体的是这是唯一一个做了名案色切换的之前Called的那一半也是一路了点击就会切换模式我们需要刷新一下还给连个说明文档总体来说这个也是很不错的这个交叉测试能够说明什么我们前面有聊到过GDP5生成的文档其实是要比Called的生成的要华历系因为在结构上用MAC档与法用得比较多通过这四个结构的对比我们可以得出Called的生成的文档虽然结构简单但内容信息都给到了而通过这几个结构我们也不难看出GDP5在代码生成上确实还有所欠缺细节不够完整当然这也不能代表全部仅在编程量与试用OK 最后我们总结一下从一个专业开发者WebCode的角度去看其实GDP5在实际编程开发方面是不如Called的4Solnet的Called的4.1Aoproze我不怎么用所以也没有试但是可以确定的一点是Called的4.1Aoproze是超过Called的4Solnet的当然GDP5也并不弱最令我感到差异的一点是GDP5的语义理解其实在这之前GDP4O就评借土匠生成大火了一榜除了它优秀的生成能力之外其实很多人最喜欢的一点是它可以很好地通过语义理解去生成土匠要知道之前无论是Slept的非圣还是到一三都是需要一些格式化的提示词才能生成教好的土匠而GDP5显然是计程了这一点我在给到GDP5任务让其实生成代码时它要比Called的更能理解我想要表达的点不需要我太刻意的优化提示词当然这个差异并不大但是我确实会遇到一些Called的会误解的需求GDP5就可以很好地理解我所表达的内容只是代码生成方面我个人看来GDP5确实不太行有点口读上的巨人形动上了IZ的那意思归根结底就是垂直两运还是不太行这其实也体现了GDP5还是一个更趋向于通用性理解的大模型能够适配的长解了很多综合来看也更智能但是就编程这个垂直两运而言Called的目前的地位还是不可汗动不过差距也并不是很大GDP5的提升还是很可观的用肯定是可以用的关键是它比Called的便宜GDP5的定价甚至比Called的4S上代的还便宜这样的话如果朋友们是在使用CalledCalled的这种以Called为主的按亮机费产品是可以考虑通过MCP server的方式集成GDP5作为辅助使用让Called将一些编码任务分配给GDP5来执行实现模型间的鞋头工作这样可以极大降低我们的成本如果是在Called中并且是按刺机费的这种调用模式那就没有必要用GDP5了还是首先Called再次说明以上紧视用于编程领域OK本期的视频到这里就结束了感谢大家的观看记得三点下次再见
