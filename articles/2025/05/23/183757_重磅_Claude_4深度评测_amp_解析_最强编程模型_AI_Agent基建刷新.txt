Timestamp: 2025-05-23T18:37:57.084594
Title: 重磅！Claude 4深度评测&amp;解析：最强编程模型，AI Agent基建刷新！
URL: https://youtube.com/watch?v=0ctrtvMCxHc&si=fTXqS8WVvMJTHpye
Status: success
Duration: 14:50

Description:
好的，以下是根据文本内容提炼和总结的信息：

**核心观点 (Core Point):**
Anthropic 推出的 Claude 4 模型，特别是 Sonnet 4，在真实编程场景下显著刷新了最佳 AI 编程模型的表现。

**总体框架 (Overarching Framework):**
Anthropic Claude 4 模型发布、性能评估与应用前景 (重点在编程与 Agent 能力提升)。

**结构化摘要 (Structured Summary):**

1.  **新模型发布:**
    *   Anthropic 发布了 Claude Opus 4 和 Claude Sonnet 4。
    *   Opus 4 是重新推出的模型，Sonnet 4 是 Sonnet 3.7 的升级版。

2.  **模型定位与使用建议:**
    *   **Opus 4:** 被定位为目前世界上最好的编程模型，擅长处理复杂、长时间运行的任务以及 Agent 工作流。
    *   **Sonnet 4:** 是 3.7 的直接升级，适用于原来用 3.7 效果好的任务，并在大多数编程任务（脚本、网页、APP初始开发等）上表现优异。
    *   **建议:** 大多数编程任务优先使用 Sonnet 4；复杂/大型项目或重构可尝试 Opus 4。

3.  **关键能力提升 (尤其针对 Agent):**
    *   强化了对 AI Agent 工作流的支持。
    *   实现扩展思考与工具使用的并行，如必要时先搜索再思考。
    *   支持并行使用多种工具，更精确遵循指令。
    *   系统指令 Token 长度显著降低 (从 16K 降至约 37% 水平)，但表现类似甚至更好。
    *   增强了记忆能力，适合执行长时间任务（Opus 4 可执行长达 7+ 小时），通过文件记录上下文。

4.  **新产品与架构:**
    *   推出了 AI 编程工具 Claude Code (作者认为目前不如 Cursor 友好，建议观望)。
    *   Opus 4 和 Sonnet 4 都是混合模型，支持 API 调用时控制思考模式 (非思考/推理)。

5.  **定价策略:**
    *   Opus 4 定价远高于 Sonnet 4 (约 5 倍)。
    *   Opus 4 通常需要使用 Max 模式 (需额外付费，Pro 订阅不包含)。
    *   Sonnet 4 的快速调用次数有优惠 (0.5 次/0.75 次)。

6.  **性能评测 (Benchmark):**
    *   **SWE bench:** 评估真实世界编程能力的体系。Sonnet 4 和 Opus 4 的 SWE bench 评分均显著优于 3.7。Sonnet 4 的评分甚至略高于 Opus 4。这支持了 Sonnet 4 适合大多数编程任务的结论。
    *   **其他评测:** Opus 4 在 SWE bench 之外的多数评测上表现优于 Sonnet 4。

7.  **其他重要改进:**
    *   减少了模型“走捷径”或欺骗行为 (即未真正完成任务却声称完成)。
    *   长时任务记忆管理提升 (通过宝可梦游戏示例验证)。
    *   引入了思考摘要功能 (次要)。
    *   与 Claude Code 和 Github 有更好的集成 (待后续评测)。

8.  **可用性:**
    *   已在 Claude 官网和 Cursor 中可用。

9.  **实际测试示例:**
    *   **网页生成:** 使用 Cursor + Sonnet 4 成功生成一个产品介绍网页 (1000+行代码)，包含动态/响应式元素，并自动生成 Readme 文档，显示出良好的长代码生成能力和编程习惯。
    *   **APP 原型图生成:** 使用相同的提示词对比 Sonnet 4, 3.7, Gemini 1.5 Pro。
        *   Gemini 1.5 Pro 表现最差，无法理解提示词。
        *   Claude 3.7 表现不错。
        *   Claude Sonnet 4 表现最优异，保真度高，细节更丰富，甚至创造了意外的交互效果 (如封面图片旋转)。

10. **总结建议:**
    *   强烈建议用户立即将大多数编程任务切换到 Sonnet 4，因为它表现更好且价格优惠。
    *   Opus 4 适用于解决更复杂、大型的项目或重构需求。

<Mermaid_Diagram>
graph TD
    A["Anthropic"] --> B["Claude 4 发布"];

    subgraph "Claude 4 模型类型"
        C["Opus 4"]
        D["Sonnet 4"]
    end

    B --> C;
    B --> D;

    subgraph "关键能力提升"
        E["增强记忆/长时任务处理"]
        F["Agent 工作流支持"]
        G["并行工具使用/指令遵循"]
        H["系统指令 Token 降低"]
    end

    C --> E;
    D --> E;
    C --> F;
    D --> F;
    C --> G;
    D --> G;
    C --> H;
    D --> H;

    subgraph "评估与应用"
        I["SWE Bench 编程评分"]
        J["定价策略"]
        K["编程任务"]
        L["Agent 应用"]
        M["对比测试 (v3.7, Gemini)"]
    end

    C --> I;
    D --> I;
    C --> J;
    D --> J;

    E --> L;
    F --> L;
    G --> K;
    G --> L;

    I --> M;
    J --> M;

    subgraph "结果与建议"
        N["推荐使用模型"]
    end

    M --> N;
    N -- "Sonnet 4 (大多数编程)" --> D;
    N -- "Opus 4 (复杂/长时)" --> C;

    style A fill:#F9F7D8,stroke:#333,stroke-width:2px,color:#333;
    style B fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style C fill:#B0E0E6,stroke:#333,stroke-width:1px,color:#333;
    style D fill:#B0E0E6,stroke:#333,stroke-width:1px,color:#333;
    style E fill:#98FB98,stroke:#333,stroke-width:1px,color:#333;
    style F fill:#98FB98,stroke:#333,stroke-width:1px,color:#333;
    style G fill:#98FB98,stroke:#333,stroke-width:1px,color:#333;
    style H fill:#98FB98,stroke:#333,stroke-width:1px,color:#333;
    style I fill:#FFFFCC,stroke:#333,stroke-width:1px,color:#333;
    style J fill:#FFD700,stroke:#333,stroke-width:1px,color:#333;
    style K fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style L fill:#ADD8E6,stroke:#333,stroke-width:1px,color:#333;
    style M fill:#FFB6C1,stroke:#333,stroke-width:1px,color:#333;
    style N fill:#D8BFD8,stroke:#333,stroke-width:2px,color:#333;
</Mermaid_Diagram>

Content:
WEBVTT Kind: captions Language: zh Anthropic 在凌晨又发布了两个模型 Claude Opus 4 和 Claude Sonnet 4 在给你做任何介绍之前 我们先看两个 就是用 Claude 4 生成的界面的信息 然后这个的话 是一个播客 APP 的原型的制作 然后还有一个的话 是我让 Claude 4 去写的 一个介绍 Claude 4 模型的一个网页 经过这几次测试 我得到的结论是 AI 编程模型的圣杯 其实还在 Claude 的手上 他在继续刷新 当今世界最佳编程模型的表现 然后在这期视频里 我会带你过一下 Anthropic 今天发布的具体的内容 以及用一些实际编程场景的测试 去评估一下这两个新模型的表现 千万别错过了 嗯接下来 我们再来看一下 它这次更新的主要的一些变化 就是其实之前在 Claude 3.7 的时候 它一直没有推出 Opus 的模型 然后现在的话 就是在 4 的时候 Opus 模型又重新推出了 然后他们认为 就是 Opus 4 是现在世界上最好的编程模型 主要在复杂和长时间运行的任务 以及 agent 的那个工作流里 有很好的表现 the Claude Sonet 4 的话 它其实是 3.7 的一个升级的版本 所以简单来说的话 就是你现在如果有一些任务 用 Claude 3.7 干的就很好了的话 直接升级到 Sonnet 4 这个模型就可以了 然后如果你原来有一些任务 用 3.7 Sonnet 完成的不是很好 的话 用 Opus 4 有可能会有一些很好的表现 然后另外的话就是除了模型本身之外 他还做了一些调整 然后在我看来的话 就这些调整 其实都是为了 agent 来服务的 所以就是 Claude 的新模型的发布 其实是让 AI agent 的能力 有了很大的提升 我们估计可以看到就是像 Manus 或 GenSpark 以及最近推出的 Skywork 就这些 agent 产品的话 我觉得有可能在新模型出来之后 他们的能力也能获得一个巨大的提升 然后这里的能力的话 其实主要是包含两个方面 就是第一个方面的话 它是可以同时去进行扩展思考 以及工具使用 他会在必要的时候 就比方说要用网络搜索的时候 他先搜索 搜索完之后 再拿搜索来的内容去进行相应的思考 我觉得这个能力还蛮有用的 然后第二个的话是现在两个模型的话 它都可以去并行使用多种工具 以及可以更精确的去遵遵循指令了 然后他们提的一个点是 就是因为现在 Claude 3.7 的时候 他们使用的系统指令的提示词有 16K 的那个 TOKEN 那个其实是非常长的 然后他们用了 Claude 4 之后 那个 TOKEN 长度其实只降到了 就大概 37%的水平 但是模型的表现能力类似 然后我估计后续就是 如果我们自己使用这样的模型的话 我们如果去写长的指令提示词 我们能获得的模型的表现 也会有相应的变好 然后还有一个就是 是很显着的一个能力 提升是他增加了自己的记忆 然后有了这个记忆的这种功能 之后的话 你可以认为就是 它更适合作为 我们长时间陪伴型的任务伙伴了 就是当你要执行一个非常长 可能长达几个小时的任务时 Claude 他自己说的是 Opus4 模型可以一次性执行 甚至 7 个小时的任务 因为执行的任务越多 步骤越多 它积累的那些材料 上下文的东西就越多 但是现在 Claude 4 模型 它最长的上下文长度还是只有 200K 也就是 20 万 那如果有更多的信息怎么处理呢 有一个机制 就是 模型可以把那些东西记录在文件里 然后在必要的时候再进行访问 就是我觉得对于 agent 能力的提升 会有非常大的这种帮助 那另外的话就是他们推出了 Claude code 这个就是 AI 编程的一个工具产品 那个产品的话 我觉得后续看大家需要吧 我再来做一些评测 但是你可以认为 就是现在这种产品 肯定还没有 Cursor 那么好用 那么新手友好 我们可以再等一等 不用那么着急 然后现在他的这个 Opus 4 和 Sonnet 4 两个模型的话 其实都是混合模型 所谓混合模型 就是他的思考和不思考两种模式 是从 0 到 1 的一个滑块的 一个情况 就是你可以让他作为一个非思考的 指令型的模型 也可以让它作为一个推理的模型 这个是可以在 API 调用的时候 自己去规 划的然后 像有一些如果去接入他们的 API 的话 像 Cursor 他会把一个模型去拆分成两个 一个就比方说 Sonnet4， Cursor 中 会有 Sonnet 4 以及 Sonnet 4 thinking 其实就是模型完全是一样的模型 只是说他们在调用 API 的时候 去限制了这个模型 到底要不要进行思考而已 就差异只是在这里 然后从模型定价来说的话 Opus4 的价格是比 Sonnet 4 要高出四倍 是它价格的五倍 就贵非常多 但是我们从它的实际 Benchmark 的表现 来说的话 我们来看一下 然后我们看这里的那个 SWE bench 的这个评分的话 这个评分 是可以认为是现在最适合用来评价 就是真实世界编程能力表现的 一个评分体系 它是用一些现实世界的一些编码问题 来对 不同模型的表现去进行评价的 然后在这里你可以看到 就是原来 Sonnet 3.7 是在几乎第一的这个水平 然后有被 OpenAI 的 CodeX-1 超越过 然后也跟 OpenAI 的 O3 比较接近 但我们估计 实际大多数现在在写软件的人用下来 其实还是觉得 Claude 3.7 Sonnet 表现是最好的 而现在 Sonnet 4 的话 它的表现 又有了 10 个百分点左右的提升 甚至 Sonnet 4 的的分数 还比 Opus 4 要稍微高一点点 所以其实在绝大多数的编程任务上 就不管你 是去写一个脚本 写一个网页 还是去写 APP 来说 大多数相对比较简单比较初始的任务 其实你用 Sonnet 4 就可以了 而 Opus 4 的话 它还是在解决更复杂更大型的问题 或者去解决一些项目重构的问题 可能会比较好用 然后再看底下的一些评价 评分的话 你会发现就是除了 SWE bench 之外 其他的表现上 Opus 4 其实都比 Sonnet 4 要相对要更好一些 因为它本身是 就是一个重新训练的一个更大的模型 它整体来说它是一个更好的模型 OK 除了这里提到的 直接的编程的表现之外 其他还有一些 就是 Anthropic 提到的 一些重要的模型的改进 其中一个点是说 就是原来的模型在做一些任务的时候 会特别想走一些捷径 而没有真正的去完成任务 然后跟 Sonnet 3.7 相比 都有了很大的提升 所以以后应该不太会有 就是你让他执行某个任务 他骗你自己已经执行了 或者说他给你乱改内容的那个情况 我觉得这里这个调整 其实 你可能他没有办法从跑分上直接体现 但是 从你实际的那个编程的感受上来说 应该会有非常大的提升 我会建议大家 都赶紧先把 Sonnet 4 这个模型用起来 然后还有他们提到的一点是 Claude Opus4 在内存的那个管理方面 有一个很大的提升 就是也是我们前面提到的如 果你允许他创建本地文件 然后去进行记忆的话 他能去完成非常长时间的这个任务 就其中有一个例子 就是他用来玩宝可梦 然后他玩宝可梦的话 大概是玩了十几个小时 60 多个关卡 所以我觉得这个长时的这个能力 对于去执行 agent 的任务 会有非常好的这种提升 最后就是 他们还引入了一个 所谓思考摘要的这个功能 我觉得这个的话就不是太重要了 以及他们 Claude code 这个编程的产品 以及和 Github 好像都有了更好的一些集成 就包括它可以直接用 Github action 去做一些自动的这个调用 这个的话我后续再给大家去做评测吧 然后你现在已经可以在 Claude 的官网 以及 Cursor 中 去使用 Sonnet 4 和 Opus 4 模型了 我们来看一下这里 我是已经做了一个编程的任务啊 然后你在底下其实已经可以去 选择不同的模型了 然后而且非常离谱的是 就现在 Claude 4 搜那只模型 甚至只需要占用 0.5 次的 那个就是快速的那个调用次数的 等于是有一个很好的折扣 所以你应该立刻切换过来 然后如果是带思考的 Claude 4 Sonnet 就是有 thinking 的这个模型的话 是 0.75 次的 那个次数就其实也还挺不错的 然后 Opus 模型其实也在里面了 就是 Opus 和 Opus thinking 就是这两个模型的话 它都会要求你用 Max 模式 Max 模式的话就是要单次有 0.04 美元的付费 是要单独付费的 你订阅 Pro 也没有用 所以就是 Opus 模型 其实 现在不是那么的建议大家去使用了 所以我们看一下 就是它现在的一个表现啊 我这里是 其实就是写了一个简单的提示词 让他深入搜索和了解 Claude 4 模型的信息 为他制作一个产品的介绍页面 就是 大概可能三四十个这个 prompt 提示词吧 然后他就通过搜索信息以及写代码 帮我完成了对应的内容 而且写完之后 他直接去写了 Readme 的这个文档 所以从这里来看的话 就是现在的新的 Claude 4 的模型 去写一个 1,000 多行的代码 没有什么问题 没有中断就写长代码的能力 其实是很好的 以及他有很好的编程习惯 就是你不给额外提示词的情况下 他也知道去写 Readme 文档 让你整个项目就是更加规范 然后我们打开来看一下这个啊 就是这里有一些非常有意思的表现 就是比方说这里有动的这个数字 有一些更动态化的情况 然后底下的话 也是有一些响应式的这种能力的 甚至下面就是这里的伪代码 就是它有一个打字的这个过程 整体来说的话 就是现在 Cursor 和 Claude 4 模型 其实结合的非常好 非常稳定 我觉得这个是还是挺难得的 而且他能一次性就你 帮你完成一个相当不错的网页的编写 的任务如果你写更丰富的提示词 做一些更充分的要求的话他 的表现完全是可以更棒的 然后后面我们再来后面再来看一下 就是一个我之前用过的 就是生成高保真 APP 原型图的提示词 我用同一套提示词 让 Claude Sonnet 4 做了一个设计 然后用 Claude 3.7 又做了一次设计 并且又用了一下 Gemini 2.5 对 很难评就是这中间这几个 一对比你就知道 这他们之间的那个差异是什么样的 就是绝密的 2.5 Pro 虽然在一些就是长的代码项目上 它有一些特殊的可能还不错的表现 但是实际在很多编程任务里 它做的真的都是一团糟 他没有办法很清楚的去理解 你的那个提示 的要求 给他对编了一个很奇怪的东西 然后 Claude 3.7 的话 他表现 其实我们之前的视频里有介绍过 他其实已经很厉害了 我的这份提示词是这样的 就是让他开发一个 类似就是小宇宙的播客 APP 的那个高保真原型图 然后底下 我设定了一些非常明确的执行步骤 和文件结构的要求 然后我们看一下 就是这里生产出来的 就是高保真程度确实是非常高 而且就是相比 3.7 来说的话 4 这块生成的内容 除了就是维持了很高的那个保真程度 之外它还有非常多的一些细节 就比方说这里 红点应该是表示 有点击过和没有点击过 以及总共多少分钟听过没有听过 以及你总共订阅了多少播客 本期更新本周更新多少未听的 节目总共有多少 就这里有一些非常细致的这个细节 并且他还做了一些很有趣的 在我意料之外的这种交互 他让这个封面的那个图片 在这里进行 有一个旋转动的这种感觉 我觉得这都是非常意外的这个惊喜 就 Claude 3.7 的话 这里表现其实已经不错了 但是你会发现 就是它相比 Claude Sonnet 4 来说的话 它是有一些缺乏细节 而且整体设计来说的话是更平庸的 而我用的提示词 它们其实是完全完完全全一样的 所以我们最后再来总结一下 这几个模型的表现差异 以及我个人给你的建议 Opus 4 和 Sonus 4 在这里的那个表现上 和 VScode 还有 Jetbrain
