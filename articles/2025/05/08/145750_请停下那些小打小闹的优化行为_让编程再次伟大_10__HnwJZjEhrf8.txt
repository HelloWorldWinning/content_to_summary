Timestamp: 2025-05-08T14:57:50.698457
Title: 请停下那些小打小闹的优化行为【让编程再次伟大#10】 HnwJZjEhrf8
URL: https://youtu.be/HnwJZjEhrf8?si=Dzw4m9S0-_HF7tN2
Status: success
Duration: 10:47

Description:
好的，这是对您提供的文本的总结和分析：

**核心论点：** 细节本身不决定当下的成败，但前期对细节的深入理解和实践，决定了未来的成败。

**文章框架：**

I.  **引言：细节决定成败的迷思**
    *   批判“细节决定成败”在软件行业的过度应用，特别是对性能的盲目追求。
    *   指出这种追求可能导致不必要的加班和对细节的过度关注，忽略了更重要的决策。

II. **性能优化：战略决策的重要性**
    *   通过API设计的例子，说明软件设计的架构和策略，远比代码层面的细节优化更重要。
    *   采用异步API设计，性能提升数量级，优于同步API的细枝末节优化。
    *   强调底层技术的重要性，例如利用内存读取代替网络调用，大幅提升性能。

III. **故障与人为因素**
    *   软件故障通常源于人为错误，而非性能问题。
    *   配置文件错误、动态扩容逻辑错误等，影响远大于性能优化。

IV. **性能与用户体验**
    *   性能对软件销量和用户量的影响有限。
    *   以Atlassian系列产品（Jira, Confluence）为例，即使性能差，用户仍会因为生态系统选择使用。
    *   消费者软件服务，价格和售后政策比性能更重要。
    *   以云服务商Vicelle为例，提升性能带来的收益可能微不足道。

V.  **细节的真正价值：深入理解是关键**
    *   引用毕加索的名言，强调深入理解细节的重要性。
    *   只有通过对细节的深入实践和理解，才能超越细节的束缚，抓住本质。
    *   类比素描练习，强调前期对细节的扎实掌握，是未来成功的必要条件。

VI. **结论：细节与未来**
    *   总结：细节不决定现在的成败，但决定未来的成败。
    *   承认标题是为了吸引流量而选择的。

<Mermaid_Diagram>
graph LR
    subgraph 核心观点 [核心观点]
        A[细节不决定当下成败，但决定未来成败]:::core
    end

    subgraph 常见误区 [常见误区]
        B[过度强调细节导致盲目优化]:::mistake
        C[忽略战略决策的重要性]:::mistake
        D[迷信“细节决定成败”]:::mistake
    end

    subgraph 架构与策略 [架构与策略]
        E[API设计：同步 vs 异步]:::strategy
        F[底层技术：内存读取 vs 网络调用]:::strategy
    end

    subgraph 人为因素 [人为因素]
        G[配置错误、逻辑错误等]:::human
        H[对系统影响远大于性能问题]:::human
    end

    subgraph 性能与用户体验 [性能与用户体验]
        I[性能对销量/用户量影响有限]:::experience
        J[生态系统、价格、售后更重要]:::experience
    end

    subgraph 真正价值 [真正价值]
        K[深入理解细节]:::value
        L[超越细节，抓住本质]:::value
        M[扎实的基础是未来成功的必要条件]:::value
    end

    A --> M
    B -- 导致 --> C
    D -- 助长 --> B
    E -- 影响 --> 性能优化
    F -- 影响 --> 性能优化
    G -- 导致 --> 系统故障
    H -- 说明 --> G
    I -- 说明 --> J
    K -- 帮助 --> L
    L --> M

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#fcc,stroke:#333,stroke-width:1px
    style C fill:#fcc,stroke:#333,stroke-width:1px
    style D fill:#fcc,stroke:#333,stroke-width:1px
    style E fill:#ccf,stroke:#333,stroke-width:1px
    style F fill:#ccf,stroke:#333,stroke-width:1px
    style G fill:#cff,stroke:#333,stroke-width:1px
    style H fill:#cff,stroke:#333,stroke-width:1px
    style I fill:#cfc,stroke:#333,stroke-width:1px
    style J fill:#cfc,stroke:#333,stroke-width:1px
    style K fill:#ffc,stroke:#333,stroke-width:1px
    style L fill:#ffc,stroke:#333,stroke-width:1px
    style M fill:#ffc,stroke:#333,stroke-width:1px
</Mermaid_Diagram>


Content:
大家好,这个学院只能细节决定成败的句话,我们从小就听过它的道理在很多地方都通用,包括很多高科技行业但是在软件行业就就化被逛书在程序人身上的时候,就很允许便宜成为一种化病或者是非物质层面的加班动力那你觉得你在写这段代码,很重要那你在加班那晚上十一点的时候还能够对自己说今晚我必须从过完这一段代码,否则明天公司就要倒闭了全村的希望都在我身上某种程度上来说这种精神也会运遇出一些喜欢构细节的干净他们不分轻重,搞不清楚,充分和必要条件的区别,没有大决刮也是钻对里面最让人头疼的存在扩好尤其是开会讨论的时候所以如果你不希望成为干净那就请听我说一说为什么细节不决定成败晚间开发的过程中最容易被构细节的地方就是性能一个佛陆要不要保留就这种小事我建国不少成续员为此会扯皮革没有完美了著名成续员,他们Anybody说过Deciding what to do is more important how to do it在性能问题上面,当你决定的软件设计的大致方向的时候他的性能上限已经基本上定局了你怎么去修改,怎么去优化你代码也不有很大的影响举个例子来说你要造一个API如果决定要造成重步API那么它被掉用的时候你可能需要按顺序去读取一个数据库然后把数据传到某个第三方的接口或者额外的数据再把反回来的数据在本地做些处理把结果再写回到数据库保存最后再把结果返回给用户你可以试着去优化你的代码逻辑表面上来说这这么多个步骤里面你确实有很多可以优化的地方比如说你可以优化你的缓存机制你可以人家你的concurrency等等做得好了话说不定可以从罩扣10号秒从那扣20号秒但是最后你会发现那个第三方接口要一秒多才能够防卫结果那结果就是说你的这个API的性能完全被这个第三方接口了性能上限给锁死了无论你怎么优化你都要承受他就带来一秒钟的号师但是如果从一开始你就决定不造重步API而是一步API那情况马上就扩扬开朗比如说我最近非常喜欢用的WalkQ的设计就是把这些带有外部依赖运行状况运行效力的很不可控的步骤通通转移到后台进行一步处理那么这些对外的API就可以做到低于100毫秒的伐回它的响应速度比起重步设计直接上升一个数量机这具体怎么设计因为不是本期视频的主题这也就不多说了我会有时间的话当独做一个视频来讲解但我们能够获得几个数量机的速度优化那么那些几毫秒的小打小闹这样就显得毫无意义如果大家还记得之前有视频里面有提到一个读写的速度表这个表就是获取成千三百倍速度优化了一个秘密武器比如说如果某一个功能你本来是需要通过网络去调用一些资源的你把它设计成能够再本地去调用那么恭喜你你还没有写一行代码已经获得了200倍速度提升又比如某一个功能需要计算100个机的大数据有些人会提出来用多线程同步处理可能有一些人会提出来坚立一个Hardocaster那你的这个时候你就可以建议我门申请买一条128g的内存加到服务器里面这样我们可以把数据直接读进内存里面直接计算你的这个方案不仅比其他人的方案快至少1500倍性能更强更省时间最重要是更省钱因为一条128g的内存最多就3000块钱远利于其他方案的人力什么而且你这个还是资产不是费用这个财务部门非常喜欢的就像在MapGa第5期里面提到了那个链表的性能问题它的破局的点就在于L1L2缓存这一层同样的在第8期的时候我再次提出了要重视的底层技术当时还有不少人再评论去吵的天混量那么今天历史期了我又再次给了你一个需要重视底层技术的原因因为只要你几里到足够多的这些知识和经验储备你就能够找到更好的去爬升这个速度表的一个路线然后比其他人都更轻松的获得疼被沉被的性能的提升我觉得这个理由应该够充分了吧好好好了那么转折来了其实就算你把性能就画得特别好代码穷构的特别漂亮稳不到一点史上的味道也不会对反见的阶级产生多大的影响就比如说软件出故障的时候通常也都是人为的错误而不是软件的性能问题导致的生产环境的系统的配置文件放错动态扩容的逻辑的设置写错了等等这些听起来都很弱智的错误但其实都是国际几大公司里面出现过的都是上过国际新闻的严重事故这种人为事故出一个他所造成的影响远远大于你们这些软件的性能问题加起来的影响其实不只是坏事明你的份好事跟你的关系其实也不大比如说对于软件的销量或者是用户量的影响在众多的因素里面性能基本上就是倒数利益的例子我们上一期有提到过Altraxia们的全家同用过的都知道像Gera和ConferenceG软件他就是史上代码的教科书士的存在每一个页面打开都要半天每个操作都会卡论每个功能都有超级复杂超级萝卜的交互逻辑说他是生产力工具还不如说是脱类生产力的工具但无论我们怎么抱怨我们捏着鼻子也要用它因为整个公司的软件开发都是放在生态里面管理的只用他们全家统这也会有很多方面的考量比如说他们提供的服务的套上各不够完整能不能够概括一个企业现在的和以后的技术开发方面的支持比如他们提供了这个收后的保障能不能够拿到一个企业要的极别他们不会去考虑几个软件的见面丑不丑用起来卡不卡这些代码能够影响的东西就算是面向消费者的软件服务我们也可以看到性能的影响有多薄弱比如那些抱怨支付宝好保太卡的人该用他们的时候还是会用就算他们之后转头了拼多多也不是因为信任问题而是因为价格和警退款政治一些以性能为卖点的服务也不会有给性能多少真正发挥作用的空间比如说最近一个叫Vicelle的云服务商宣传他们在用Rust大大的提升了自家的威服务引擎的启动性能他们的说法是可以给每一次的威服启动省下100毫秒的时间这个债听一看好像挺厉害但实际上仔细想想一般会使用这种威服务的场景每一次仔细都会花上几十到三百秒因为它这个东西的收费是按照执行时间来算的所以任务时间不挽的那些东西就不会放在威服务上这样会很亏所以在几十三百秒的威服务的收费里面省下来的那一百毫秒则算成折扣甚至都算不上九点几九折就会十分的积乐看到这里有些观众可能就会想你的意思是不是说细节是毫无意义毫无价值的如果我被分配到这些任务我应该摆烂摸鱼当然我完全没有这么说我觉得细节的价值最好的举例应该是必假所必假所有一句名言是我花了一辈子学会像一个孩子一样去画画这一句话其实会让不少人有误解他们会觉得你的意思是其实没有必要那么辛苦去画画画因为归根道理到最后你还是画了像个小孩一样那么干脆一步到位我直接现在就可以画了像个小孩子一样主要是这些人都漏掉了这句话的前半句是我花了四年才画的像拉费了一样这个前提可以说是后半句的充分且必要条件因为必假所知所以能够在晚年随手的极笔就能画出充满神运的话跟他小时候尖历得非常扎实牢固的速描基础是分不开的他在练习速描的这些年里面深刻地认识到了事物的细节让他能够有能力去看穿的表面找到了本质之后他可以脱离这些细节的束缚可以把这个事物的精髓用聊聊几笔就表达出来虽然会化含义还计算机含义的区别有点大但是这个道理是相通的就你在干出道的时候你被安排去写那些无伤大雅的代码的优化那些没什么影响的重够或者你亲手设计出来一些看上去还挺续固的实际上也没什么用的那些功能逻辑这些就更画几大的那种数描练习他是让你亲身的去体会细节中的细节然后你才会有机会破剪沉点这个过程是不能省略的因为没有一步到位的结晋如果你只是单纯的想要靠的几分钟的农说视频我的几个观点你就可以快速地吸收到所有的精华那最终你只是会停留在兆毛画虎的程度你画出来的只是幼儿园级别的凌磨回个头来看其实标题的这句细节不决定成败准确的说法应该是细节不决定现在的成败但是会决定未来的成败但是能这样的标题估计播放量会跌破以前所以我是为了能够向更多的人传播我的知识我才依然走上了这个标题长的道路那么下期让我们继续MAP Progaming Great Again拜拜
